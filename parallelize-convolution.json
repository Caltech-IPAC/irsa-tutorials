{"version":2,"kind":"Notebook","sha256":"68ed43783b40185a1d4ef25d932e183e199dbd7cced5bf15a0f3832b8de94912","slug":"parallelize-convolution","location":"/tutorials/parallelize/Parallelize_Convolution.md","dependencies":[],"frontmatter":{"title":"Parallelizing image convolution","kernelspec":{"name":"python3","display_name":"Python [conda env:clonenv]","language":"python"},"jupytext":{"text_representation":{"extension":".md","format_name":"myst","format_version":"0.13","jupytext_version":"1.16.2"}},"skip_execution":true,"content_includes_title":false,"authors":[{"id":"IRSA Scientists and Developers","name":"IRSA Scientists and Developers"}],"github":"https://github.com/Caltech-IPAC/irsa-tutorials/","subject":"IRSA Tutorials","keywords":["astronomy"],"settings":{"output_matplotlib_strings":"remove"},"numbering":{"title":{"offset":1}},"edit_url":"https://github.com/Caltech-IPAC/irsa-tutorials//blob/main/tutorials/parallelize/Parallelize_Convolution.md","exports":[{"format":"md","filename":"Parallelize_Convolution.md","url":"/irsa-tutorials/build/Parallelize_Convolut-4c1215b66e49ece53f1aec11b74890a2.md"}]},"mdast":{"type":"root","children":[{"type":"block","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"heading","depth":2,"position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"text","value":"Learning Goals","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"F8OlYHAx38"}],"identifier":"learning-goals","label":"Learning Goals","html_id":"learning-goals","implicit":true,"key":"J5oBRmd330"},{"type":"paragraph","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"children":[{"type":"text","value":"By the end of this tutorial, you will be able to:","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"key":"y3FM1rwq7R"}],"key":"h8tirVuRLf"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":23,"column":1},"end":{"line":26,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"children":[{"type":"text","value":"Employ three parallelization libraries to speed up a serial process.","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"key":"LICazolx0y"}],"key":"uddR6AQydC"},{"type":"listItem","spread":true,"position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"children":[{"type":"text","value":"Calculate the speedup of the different approaches shown.","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"key":"phIREnsyQi"}],"key":"oJXpZBGHVa"},{"type":"listItem","spread":true,"position":{"start":{"line":25,"column":1},"end":{"line":26,"column":1}},"children":[{"type":"text","value":"Evaluate which library is suited to your task.","position":{"start":{"line":25,"column":1},"end":{"line":25,"column":1}},"key":"AsfFpLjlPy"}],"key":"gkJTRHI9DM"}],"key":"teJCvtafbt"}],"key":"SZkYacOQYB"},{"type":"block","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"children":[{"type":"heading","depth":2,"position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"children":[{"type":"text","value":"Introduction","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"kEtEXq6YUd"}],"identifier":"introduction","label":"Introduction","html_id":"introduction","implicit":true,"key":"GIzVLvZrUw"},{"type":"paragraph","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"children":[{"type":"text","value":"This notebook shows how to speed up an image convolution task using these three libraries:","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"key":"rEkcL7uCxr"}],"key":"h9wgD9PLXM"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":33,"column":1},"end":{"line":36,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"children":[{"type":"text","value":"Ray: an open-source unified compute framework that makes it easy to scale AI and Python workloads.","position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"key":"mIOEBWFhKT"}],"key":"kOvcQnY9CZ"},{"type":"listItem","spread":true,"position":{"start":{"line":34,"column":1},"end":{"line":34,"column":1}},"children":[{"type":"text","value":"Multiprocessing: part of the standard library; supports spawning processes using an API similar to the threading module; offers both local and remote concurrency, effectively side-stepping the Global Interpreter Lock by using subprocesses instead of threads.","position":{"start":{"line":34,"column":1},"end":{"line":34,"column":1}},"key":"kB2UAQeflq"}],"key":"y9b47KIltY"},{"type":"listItem","spread":true,"position":{"start":{"line":35,"column":1},"end":{"line":36,"column":1}},"children":[{"type":"text","value":"Dask: developed to natively scale computational packages like numpy, pandas and scikit-learn, and the surrounding ecosystem, to multi-core machines and distributed clusters when datasets exceed memory.","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"R0hjvUnLLT"}],"key":"ViPo0ykEmD"}],"key":"VWCANOpipT"}],"key":"dlNVaxQYyW"},{"type":"block","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"children":[{"type":"heading","depth":2,"position":{"start":{"line":39,"column":1},"end":{"line":39,"column":1}},"children":[{"type":"text","value":"Imports","position":{"start":{"line":39,"column":1},"end":{"line":39,"column":1}},"key":"qalASPnjWJ"}],"identifier":"imports","label":"Imports","html_id":"imports","implicit":true,"key":"UzcLiZQnQ2"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":41,"column":1},"end":{"line":47,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"children":[{"type":"text","value":"multiprocessing.Pool","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"key":"YiTFqb7wlf"}],"key":"AqWuNJnsgx"},{"type":"text","value":" for multiprocessing using the standard library","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"key":"YY9R98yCWB"}],"key":"B8Q75mauKP"},{"type":"listItem","spread":true,"position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"children":[{"type":"text","value":"time","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"key":"jo7AdXkK6Q"}],"key":"xR8SiyBRjE"},{"type":"text","value":" for timing the processes","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"key":"pQ1ad9xyuj"}],"key":"yjOyl7qCbg"},{"type":"listItem","spread":true,"position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"children":[{"type":"text","value":"dask.distributed.Client","position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"key":"jvLUf6uVxK"}],"key":"HbOJbm6aoo"},{"type":"text","value":" for making a local Dask cluster","position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"key":"AY8Ge6A82P"}],"key":"r25mVslxFl"},{"type":"listItem","spread":true,"position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"children":[{"type":"text","value":"numpy","position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"key":"IHoBqu8wCT"}],"key":"pxgzgsUOr6"},{"type":"text","value":" and ","position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"key":"PbbI9DvRCA"},{"type":"emphasis","position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"children":[{"type":"text","value":"scipy.signal","position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"key":"QzqP5LAssF"}],"key":"hQY65jKmMn"},{"type":"text","value":" for numerical work","position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"key":"uBoIHQVojm"}],"key":"fYQM8o2er2"},{"type":"listItem","spread":true,"position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"children":[{"type":"text","value":"psutil","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"key":"jxdjeB4J9U"}],"key":"qGtdmQ6ngh"},{"type":"text","value":" for finding the available processors on your machine","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"key":"iQQslwYHpB"}],"key":"X5hfGfpKYi"},{"type":"listItem","spread":true,"position":{"start":{"line":46,"column":1},"end":{"line":47,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":46,"column":1},"end":{"line":46,"column":1}},"children":[{"type":"text","value":"ray","position":{"start":{"line":46,"column":1},"end":{"line":46,"column":1}},"key":"sCXK1iDMcI"}],"key":"MoXkxV0br5"},{"type":"text","value":" for scaling up Python tasks","position":{"start":{"line":46,"column":1},"end":{"line":46,"column":1}},"key":"evK0Hilj5M"}],"key":"tC5HgF5NA8"}],"key":"pwV4Yf5lTn"}],"key":"YXd3Gungtz"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Uncomment the next line to install dependencies if needed.\n# !pip install dask[distributed] numpy ray scipy","key":"VRoIfoGWV3"},{"type":"output","id":"-PbcCGuYQM-tX1nAwpOzz","data":[],"key":"KqQ3zZksCe"}],"key":"K9CLZbMYso"},{"type":"block","children":[],"key":"aaPmvbbBux"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from multiprocessing import Pool\nimport time\n\nfrom dask.distributed import Client\nimport numpy as np\nimport psutil\nimport scipy.signal\nimport ray","key":"nUTqC0E3Wp"},{"type":"output","id":"EbZUo2NrLQPrk9EPszawv","data":[],"key":"Lg0hapGS9G"}],"key":"vRJ1RLPm44"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":64,"column":1},"end":{"line":64,"column":1}},"children":[{"type":"text","value":"Find the cpus available","position":{"start":{"line":64,"column":1},"end":{"line":64,"column":1}},"key":"RS5W0h0wz9"}],"identifier":"find-the-cpus-available","label":"Find the cpus available","html_id":"find-the-cpus-available","implicit":true,"key":"arkCG75RHU"},{"type":"paragraph","position":{"start":{"line":66,"column":1},"end":{"line":67,"column":1}},"children":[{"type":"text","value":"Find and print the number of cpus\n(taken from ","position":{"start":{"line":66,"column":1},"end":{"line":66,"column":1}},"key":"weVyJGa2pW"},{"type":"link","url":"https://towardsdatascience.com/10x-faster-parallel-python-without-python-multiprocessing-e5017c93cce1","position":{"start":{"line":66,"column":1},"end":{"line":66,"column":1}},"children":[{"type":"text","value":"https://​towardsdatascience​.com​/10x​-faster​-parallel​-python​-without​-python​-multiprocessing​-e5017c93cce1","position":{"start":{"line":66,"column":1},"end":{"line":66,"column":1}},"key":"LzWmo0vY78"}],"urlSource":"https://towardsdatascience.com/10x-faster-parallel-python-without-python-multiprocessing-e5017c93cce1","key":"v3jooqY9L7"},{"type":"text","value":")","position":{"start":{"line":66,"column":1},"end":{"line":66,"column":1}},"key":"ZiZgp9nuE4"}],"key":"kPs3p9eDen"}],"key":"U8FXUKv50y"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"num_cpus = psutil.cpu_count(logical=True)\nprint(num_cpus)","key":"gPY8P409W0"},{"type":"output","id":"-9o4QaB3iyo2xFgB2PfC7","data":[],"key":"Q83ZCFRMD2"}],"key":"h4UR8KCiqj"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"children":[{"type":"text","value":"Process serially using a conventional loop","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"key":"xYu10XSJzD"}],"identifier":"process-serially-using-a-conventional-loop","label":"Process serially using a conventional loop","html_id":"process-serially-using-a-conventional-loop","implicit":true,"key":"ZA7gqQTpjl"}],"key":"rAoo35gKrS"},{"type":"block","position":{"start":{"line":76,"column":1},"end":{"line":76,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"children":[{"type":"text","value":"Use ","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"key":"v0AgOD6cRy"},{"type":"inlineCode","value":"scipy.signal","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"key":"UepF0tspa9"},{"type":"text","value":" to convolve two 2-dimensional arrays and return a 5x5 downsampled result.","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"key":"s4vDkHxf1R"}],"key":"MMCvQsfDVa"}],"key":"IocBnCRjLY"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def fconv(image, random_filter):\n    return scipy.signal.convolve2d(image, random_filter)[::5, ::5]","key":"sEMdRL6hom"},{"type":"output","id":"7j-mszTzeBhEf64-dx_7l","data":[],"key":"FLh2HbmYEX"}],"key":"QqhqvP9smz"},{"type":"block","children":[],"key":"C5FfxfENcp"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"filters = [np.random.normal(size=(4, 4)) for _ in range(num_cpus)]","key":"gS2pRfE9df"},{"type":"output","id":"k-nTxZEDRBnkHfiIfL4K2","data":[],"key":"kq2VsiGw2a"}],"key":"MH9vSH0rWe"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":89,"column":1},"end":{"line":89,"column":1}},"children":[{"type":"text","value":"Process 100 iterations serially, then extrapolate to num_cpus*100","position":{"start":{"line":89,"column":1},"end":{"line":89,"column":1}},"key":"wvb0v1Wi5k"}],"key":"xlKLATgXY6"}],"key":"TH0ZQiuwui"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"start = time.time()\nnum_iter = 100\nimage = np.zeros((3000, 3000))\nfor i in range(num_iter):\n    result = fconv(image, filters[i % num_cpus])\nduration_conv = time.time() - start\nprint(\"(scaled) conventional duration for {:d} iterations = {:.1f} seconds\"\n      .format(num_cpus*num_iter, duration_conv*num_cpus))","key":"bMYb4XKsCG"},{"type":"output","id":"ngzBnUeRrzbWRp1GwvJ77","data":[],"key":"LZjElzF5kv"}],"key":"bhAACuBF8t"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":102,"column":1},"end":{"line":102,"column":1}},"children":[{"type":"text","value":"Process in parallel using Ray","position":{"start":{"line":102,"column":1},"end":{"line":102,"column":1}},"key":"hQLaBXCrq3"}],"identifier":"process-in-parallel-using-ray","label":"Process in parallel using Ray","html_id":"process-in-parallel-using-ray","implicit":true,"key":"ZtNEi0osat"}],"key":"oseD0bMl1I"},{"type":"block","position":{"start":{"line":104,"column":1},"end":{"line":104,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":106,"column":1},"end":{"line":106,"column":1}},"children":[{"type":"link","url":"https://docs.ray.io/en/latest/","position":{"start":{"line":106,"column":1},"end":{"line":106,"column":1}},"children":[{"type":"text","value":"Documentation for ray","position":{"start":{"line":106,"column":1},"end":{"line":106,"column":1}},"key":"ywIwFFSpk1"}],"urlSource":"https://docs.ray.io/en/latest/","key":"aITi4bSYXd"}],"key":"x7cz3TKDKX"}],"key":"OM0SHWptlv"},{"type":"block","position":{"start":{"line":108,"column":1},"end":{"line":108,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":110,"column":1},"end":{"line":110,"column":1}},"children":[{"type":"text","value":"The warning raised by ","position":{"start":{"line":110,"column":1},"end":{"line":110,"column":1}},"key":"YhOvYDpKN4"},{"type":"inlineCode","value":"ray.init","position":{"start":{"line":110,"column":1},"end":{"line":110,"column":1}},"key":"rD1j06fckv"},{"type":"text","value":" only affects shared object usage, which is not an issue for this tutorial. It may harm performance in other scenarios.","position":{"start":{"line":110,"column":1},"end":{"line":110,"column":1}},"key":"Dc8K6qr1zj"}],"key":"biF21qWHeD"}],"key":"hi1g7GH6JQ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ray.init(num_cpus=num_cpus)","key":"UIHjidwBUX"},{"type":"output","id":"Ef1pBBCdTHCQ1HXWz_EBW","data":[],"key":"mMofheu45H"}],"key":"ktOjD2116W"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":116,"column":1},"end":{"line":116,"column":1}},"children":[{"type":"text","value":"Use ","position":{"start":{"line":116,"column":1},"end":{"line":116,"column":1}},"key":"MrghZD3BdV"},{"type":"inlineCode","value":"scipy.signal","position":{"start":{"line":116,"column":1},"end":{"line":116,"column":1}},"key":"jGKGinVows"},{"type":"text","value":" to convolve two 2-dimensional arrays and return a 5x5 downsampled result. To use Ray, we decorate the function that is doing the work.","position":{"start":{"line":116,"column":1},"end":{"line":116,"column":1}},"key":"WIn9aQ8zhN"}],"key":"mnbj6obzql"}],"key":"vdkqZflW3j"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"@ray.remote\ndef fray(image, random_filter):\n    return scipy.signal.convolve2d(image, random_filter)[::5, ::5]","key":"UTi24d7rPH"},{"type":"output","id":"vdceEYSTOq2fRJtyPb3tI","data":[],"key":"HkvK84f8s0"}],"key":"GkEvnbTuNV"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"children":[{"type":"text","value":"In the following loop, ","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"key":"y30ARSW8GD"},{"type":"inlineCode","value":"ray.put","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"key":"RmXeCh7GMV"},{"type":"text","value":" places the image into shared memory. The call to ","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"key":"EM0Nxv3dIn"},{"type":"inlineCode","value":"ray.get","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"key":"NAda690gJs"},{"type":"text","value":" retrieves the result.","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"key":"DkMgqSWB4P"}],"key":"DESwWdNYUV"}],"key":"DKB7V8R330"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"start = time.time()\nimage = np.zeros((3000, 3000))\nfor _ in range(100):\n    image_id = ray.put(image)\n    ray.get([fray.remote(image_id, filters[i]) for i in range(num_cpus)])\nduration_ray = time.time() - start\nprint(\"Ray duration = {:.1f}, speedup = {:.2f}\"\n      .format(duration_ray, duration_conv*num_cpus / duration_ray))","key":"LpEmwpwYku"},{"type":"output","id":"lO_mpS2NrM1qMWDgfCx_6","data":[],"key":"x9TERaJEsR"}],"key":"S5zvtNYe24"},{"type":"block","children":[],"key":"jiEldJNGeu"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ray.shutdown()","key":"zGuwNxNLRx"},{"type":"output","id":"yf7MM1gfCKQmqYwLc0YAz","data":[],"key":"Cl0ry2y5Yt"}],"key":"NZ5BfbAGie"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":141,"column":1},"end":{"line":141,"column":1}},"children":[{"type":"text","value":"Process in parallel using multiprocessing","position":{"start":{"line":141,"column":1},"end":{"line":141,"column":1}},"key":"bRAojLbjrE"}],"identifier":"process-in-parallel-using-multiprocessing","label":"Process in parallel using multiprocessing","html_id":"process-in-parallel-using-multiprocessing","implicit":true,"key":"b9XTjdlPFq"}],"key":"cwe3XimyWU"},{"type":"block","position":{"start":{"line":143,"column":1},"end":{"line":143,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":145,"column":1},"end":{"line":145,"column":1}},"children":[{"type":"link","url":"https://docs.python.org/3/library/multiprocessing.html","position":{"start":{"line":145,"column":1},"end":{"line":145,"column":1}},"children":[{"type":"text","value":"Documentation for multiprocessing","position":{"start":{"line":145,"column":1},"end":{"line":145,"column":1}},"key":"TyxIoscoUQ"}],"urlSource":"https://docs.python.org/3/library/multiprocessing.html","key":"MfqbM1aP0F"}],"key":"bLXbmf2Hky"}],"key":"HIc1sGIqUm"},{"type":"block","position":{"start":{"line":147,"column":1},"end":{"line":147,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":149,"column":1},"end":{"line":149,"column":1}},"children":[{"type":"text","value":"Use ","position":{"start":{"line":149,"column":1},"end":{"line":149,"column":1}},"key":"Z6PnWOtsJX"},{"type":"inlineCode","value":"scipy.signal","position":{"start":{"line":149,"column":1},"end":{"line":149,"column":1}},"key":"Pj1AhuYUEl"},{"type":"text","value":" to convolve two 2-dimensional arrays and return a 5x5 downsampled result. The call to the function has a slightly different form than that for the serial loop.","position":{"start":{"line":149,"column":1},"end":{"line":149,"column":1}},"key":"wE76P3cHGC"}],"key":"OkjgOIO5jl"}],"key":"UE7EBEa2db"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Note: Mac and Windows users may need to copy the contents of this cell into a separate '.py' file\n# and then import it in order to use the `fmp` function with `multiprocessing`. This has to do with\n# differences in what does / does not get copied into the child processes in different operating systems.\nimport scipy.signal\n\ndef fmp(args):\n    image, random_filter = args\n    return scipy.signal.convolve2d(image, random_filter)[::5, ::5]","key":"b6jycoNWqw"},{"type":"output","id":"l-N57qP_u8T_XK_FE2d06","data":[],"key":"GhyuVn0rCM"}],"key":"oolko70Xg8"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":162,"column":1},"end":{"line":162,"column":1}},"children":[{"type":"text","value":"Use a multiprocessing pool with the number of cpus we found earlier.","position":{"start":{"line":162,"column":1},"end":{"line":162,"column":1}},"key":"byr8592alV"}],"key":"tODiPwEe64"}],"key":"M4uDipPnuV"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"pool = Pool(num_cpus)","key":"xQa5azpEcv"},{"type":"output","id":"_Pnwcvg6yineyduqfhV5h","data":[],"key":"d4hP8cyIEr"}],"key":"KsMcxtSQrm"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":168,"column":1},"end":{"line":168,"column":1}},"children":[{"type":"text","value":"Using ","position":{"start":{"line":168,"column":1},"end":{"line":168,"column":1}},"key":"v9Cu7J5lex"},{"type":"inlineCode","value":"pool.map","position":{"start":{"line":168,"column":1},"end":{"line":168,"column":1}},"key":"E3J2UEzGt0"},{"type":"text","value":" is the closest analog in multiprocessing to the Ray API.","position":{"start":{"line":168,"column":1},"end":{"line":168,"column":1}},"key":"CaVOiERjIv"}],"key":"P6iTr9ZXrT"}],"key":"kzzVlN0dv4"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"start = time.time()\nimage = np.zeros((3000, 3000))\nfor _ in range(100):\n    pool.map(fmp, zip(num_cpus * [image], filters))\nduration_mp = time.time() - start\nprint(\"Multiprocessing duration = {:.1f}, speedup = {:.2f}\"\n      .format(duration_mp, duration_conv*num_cpus / duration_mp))","key":"fnasj8r6SR"},{"type":"output","id":"XpOgu16NAHJJGVaZfbVeS","data":[],"key":"q6EHOM5JdI"}],"key":"ev7MUXnUR6"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":180,"column":1},"end":{"line":180,"column":1}},"children":[{"type":"text","value":"Process using Dask","position":{"start":{"line":180,"column":1},"end":{"line":180,"column":1}},"key":"bqXg2Cvm1u"}],"identifier":"process-using-dask","label":"Process using Dask","html_id":"process-using-dask","implicit":true,"key":"G8EiaDdbOa"}],"key":"s6muTfdowg"},{"type":"block","position":{"start":{"line":182,"column":1},"end":{"line":182,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":184,"column":1},"end":{"line":184,"column":1}},"children":[{"type":"link","url":"https://www.dask.org/get-started","position":{"start":{"line":184,"column":1},"end":{"line":184,"column":1}},"children":[{"type":"text","value":"Documentation for Dask","position":{"start":{"line":184,"column":1},"end":{"line":184,"column":1}},"key":"nqFKNs1xaY"}],"urlSource":"https://www.dask.org/get-started","key":"JdJH9dBmxB"}],"key":"A0nDqPx41O"}],"key":"vbttxSKzAa"},{"type":"block","position":{"start":{"line":186,"column":1},"end":{"line":186,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":188,"column":1},"end":{"line":188,"column":1}},"children":[{"type":"text","value":"Define a Dask distributed client with number of workers set to the number of cpus we found earlier, and with one thread per worker.","position":{"start":{"line":188,"column":1},"end":{"line":188,"column":1}},"key":"SRHlTVGaHq"}],"key":"yIWmt6TqEI"}],"key":"ArHZqPWwpC"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"client = Client(n_workers=num_cpus, threads_per_worker=1)","key":"zJ4okiZenD"},{"type":"output","id":"QKuJj9ihGeYevHpf0Z3Xa","data":[],"key":"JrLFfFnR4O"}],"key":"ZljTI4LG9H"},{"type":"block","children":[],"key":"zTU3p0jTTF"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"print(client)","key":"H6RqalZ9sj"},{"type":"output","id":"qNwWFmVLpohru19G9ggZt","data":[],"key":"Cwo8GYdBs8"}],"key":"a6arGGXuNw"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":198,"column":1},"end":{"line":198,"column":1}},"children":[{"type":"text","value":"Dask recommends scattering the large inputs across the workers, though this makes little difference in execution time.","position":{"start":{"line":198,"column":1},"end":{"line":198,"column":1}},"key":"NNVPHuZ1vj"}],"key":"Z6QDpjv5ja"}],"key":"rc2TToJISo"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"start = time.time()\nimage = np.zeros((3000, 3000))\nfor _ in range(100):\n    for j in range(num_cpus):\n        big_future = client.scatter((image, filters[j % num_cpus]))\n        future = client.submit(fmp, big_future)\nduration_dask = time.time() - start\nprint(\"Dask duration = {:.1f}, speedup = {:.2f}\"\n      .format(duration_dask, duration_conv*num_cpus / duration_dask))","key":"AuJmyvMO9D"},{"type":"output","id":"5256hq5G7LWp5c_j0ikZy","data":[],"key":"Ik75U8i46N"}],"key":"g4JqK07MUN"},{"type":"block","children":[],"key":"okr0BzJkxP"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"client.close()","key":"rewmS2Z2ib"},{"type":"output","id":"uaCNoeWiOkb8Zemt9R85W","data":[],"key":"kKzWReX3zK"}],"key":"O2P4GJTkJG"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":216,"column":1},"end":{"line":216,"column":1}},"children":[{"type":"text","value":"Conclusions","position":{"start":{"line":216,"column":1},"end":{"line":216,"column":1}},"key":"pyR12xXdws"}],"identifier":"conclusions","label":"Conclusions","html_id":"conclusions","implicit":true,"key":"QjCsoyTgvQ"}],"key":"E2UbFsFBGj"},{"type":"block","position":{"start":{"line":218,"column":1},"end":{"line":218,"column":1}},"children":[{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":220,"column":1},"end":{"line":223,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":220,"column":1},"end":{"line":220,"column":1}},"children":[{"type":"text","value":"Ray is the most effective at speeding up the convolution workload by fully utilizing all available processes","position":{"start":{"line":220,"column":1},"end":{"line":220,"column":1}},"key":"SChi14gJqp"}],"key":"q8szlgYMPc"},{"type":"listItem","spread":true,"position":{"start":{"line":221,"column":1},"end":{"line":221,"column":1}},"children":[{"type":"text","value":"Multiprocessing is second in effectiveness","position":{"start":{"line":221,"column":1},"end":{"line":221,"column":1}},"key":"RSb4cKFaJF"}],"key":"SNEzghr0M9"},{"type":"listItem","spread":true,"position":{"start":{"line":222,"column":1},"end":{"line":223,"column":1}},"children":[{"type":"text","value":"Dask delivers the least speedup; perhaps due to having only six processes on the dask.distributed client","position":{"start":{"line":222,"column":1},"end":{"line":222,"column":1}},"key":"FVWFkrEhdz"}],"key":"bDayFoWKbB"}],"key":"WAOupp3MTS"}],"key":"FR6giBOiYb"},{"type":"block","position":{"start":{"line":224,"column":1},"end":{"line":224,"column":1}},"children":[{"type":"thematicBreak","position":{"start":{"line":225,"column":1},"end":{"line":225,"column":1}},"key":"Rqq9X3UpX9"},{"type":"heading","depth":2,"position":{"start":{"line":227,"column":1},"end":{"line":227,"column":1}},"children":[{"type":"text","value":"About this notebook","position":{"start":{"line":227,"column":1},"end":{"line":227,"column":1}},"key":"LmVeFu3zqk"}],"identifier":"about-this-notebook","label":"About this notebook","html_id":"about-this-notebook","implicit":true,"key":"PsDrds2nuE"},{"type":"paragraph","position":{"start":{"line":229,"column":1},"end":{"line":229,"column":1}},"children":[{"type":"strong","position":{"start":{"line":229,"column":1},"end":{"line":229,"column":1}},"children":[{"type":"text","value":"Author:","position":{"start":{"line":229,"column":1},"end":{"line":229,"column":1}},"key":"Zz6hZm9jtu"}],"key":"B5c4kObb1Q"},{"type":"text","value":" David Shupe in conjunction with Jessica Krick and the IRSA Science Platform team at IPAC.","position":{"start":{"line":229,"column":1},"end":{"line":229,"column":1}},"key":"Nr93s0pCiK"}],"key":"Xcl8WhS52G"},{"type":"paragraph","position":{"start":{"line":231,"column":1},"end":{"line":231,"column":1}},"children":[{"type":"strong","position":{"start":{"line":231,"column":1},"end":{"line":231,"column":1}},"children":[{"type":"text","value":"Updated:","position":{"start":{"line":231,"column":1},"end":{"line":231,"column":1}},"key":"Pph13CEPqe"}],"key":"rtawrbHw3x"},{"type":"text","value":" 2024-09-24","position":{"start":{"line":231,"column":1},"end":{"line":231,"column":1}},"key":"agHuEWwlA5"}],"key":"hqiDuFoKue"},{"type":"paragraph","position":{"start":{"line":233,"column":1},"end":{"line":233,"column":1}},"children":[{"type":"strong","position":{"start":{"line":233,"column":1},"end":{"line":233,"column":1}},"children":[{"type":"text","value":"Contact:","position":{"start":{"line":233,"column":1},"end":{"line":233,"column":1}},"key":"GpO3h7qgUw"}],"key":"noKzY50Qzd"},{"type":"text","value":" ","position":{"start":{"line":233,"column":1},"end":{"line":233,"column":1}},"key":"wbYM0tEITw"},{"type":"link","url":"https://irsa.ipac.caltech.edu/docs/help_desk.html","position":{"start":{"line":233,"column":1},"end":{"line":233,"column":1}},"children":[{"type":"text","value":"the IRSA Helpdesk","position":{"start":{"line":233,"column":1},"end":{"line":233,"column":1}},"key":"ZlumZnwrPp"}],"urlSource":"https://irsa.ipac.caltech.edu/docs/help_desk.html","key":"PL2mIkAtBs"},{"type":"text","value":" with questions or reporting problems.","position":{"start":{"line":233,"column":1},"end":{"line":233,"column":1}},"key":"H3dQQQMDll"}],"key":"k7nh7hG1TD"},{"type":"heading","depth":2,"position":{"start":{"line":235,"column":1},"end":{"line":235,"column":1}},"children":[{"type":"text","value":"Citations","position":{"start":{"line":235,"column":1},"end":{"line":235,"column":1}},"key":"OlIxYrOpQR"}],"identifier":"citations","label":"Citations","html_id":"citations","implicit":true,"key":"coKvXa5BtT"},{"type":"paragraph","position":{"start":{"line":237,"column":1},"end":{"line":237,"column":1}},"children":[{"type":"text","value":"If you use these software packages in your work, please use the following citations:","position":{"start":{"line":237,"column":1},"end":{"line":237,"column":1}},"key":"TCunaOZcKZ"}],"key":"AwZitDGs9O"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":239,"column":1},"end":{"line":241,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":239,"column":1},"end":{"line":239,"column":1}},"children":[{"type":"text","value":"Dask: Dask Development Team (2016). Dask: Library for dynamic task scheduling. URL ","position":{"start":{"line":239,"column":1},"end":{"line":239,"column":1}},"key":"YGwnth2BAt"},{"type":"link","url":"https://dask.org","position":{"start":{"line":239,"column":1},"end":{"line":239,"column":1}},"children":[{"type":"text","value":"https://dask.org","position":{"start":{"line":239,"column":1},"end":{"line":239,"column":1}},"key":"c5sEX5WR2t"}],"urlSource":"https://dask.org","key":"TkCNjW8bRa"}],"key":"NgqLdulgSE"},{"type":"listItem","spread":true,"position":{"start":{"line":240,"column":1},"end":{"line":241,"column":1}},"children":[{"type":"text","value":"Ray: The Ray Development Team. URL ","position":{"start":{"line":240,"column":1},"end":{"line":240,"column":1}},"key":"tB9e6GJ0QT"},{"type":"link","url":"https://docs.ray.io","position":{"start":{"line":240,"column":1},"end":{"line":240,"column":1}},"children":[{"type":"text","value":"https://docs.ray.io","position":{"start":{"line":240,"column":1},"end":{"line":240,"column":1}},"key":"sczq1TJ3lR"}],"urlSource":"https://docs.ray.io","key":"O9ed9u9DBt"}],"key":"VqQfGE7JtT"}],"key":"zT5WYg98rp"}],"key":"BvVDADywto"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"","key":"PoRkAkPsYg"},{"type":"output","id":"xGhI3kCZZAwxy_7RcGi1a","data":[],"key":"XKep447ESU"}],"key":"uPKS2iwvzJ"}],"key":"s7AlmJrLzw"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Using Firefly visualization tools in Python to vet SEDs","url":"/seds-in-firefly","group":"Special Topics"}}},"domain":"http://localhost:3000"}