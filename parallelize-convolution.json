{"version":2,"kind":"Notebook","sha256":"68ed43783b40185a1d4ef25d932e183e199dbd7cced5bf15a0f3832b8de94912","slug":"parallelize-convolution","location":"/tutorials/parallelize/Parallelize_Convolution.md","dependencies":[],"frontmatter":{"title":"Parallelizing image convolution","kernelspec":{"name":"python3","display_name":"Python [conda env:clonenv]","language":"python"},"jupytext":{"text_representation":{"extension":".md","format_name":"myst","format_version":"0.13","jupytext_version":"1.16.2"}},"skip_execution":true,"content_includes_title":false,"authors":[{"id":"IRSA Scientists and Developers","name":"IRSA Scientists and Developers"}],"github":"https://github.com/Caltech-IPAC/irsa-tutorials/","subject":"IRSA Tutorials","keywords":["astronomy"],"settings":{"output_matplotlib_strings":"remove"},"numbering":{"title":{"offset":1}},"edit_url":"https://github.com/Caltech-IPAC/irsa-tutorials//blob/main/tutorials/parallelize/Parallelize_Convolution.md","exports":[{"format":"md","filename":"Parallelize_Convolution.md","url":"/build/Parallelize_Convolut-a0359ec72113b39c25a5c731e2024e78.md"}]},"mdast":{"type":"root","children":[{"type":"block","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"heading","depth":2,"position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"text","value":"Learning Goals","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"YGyB6Tyenf"}],"identifier":"learning-goals","label":"Learning Goals","html_id":"learning-goals","implicit":true,"key":"iFWurHcAqx"},{"type":"paragraph","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"children":[{"type":"text","value":"By the end of this tutorial, you will be able to:","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"key":"Hv1bnjxuvs"}],"key":"DuRFxbxAdS"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":23,"column":1},"end":{"line":26,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"children":[{"type":"text","value":"Employ three parallelization libraries to speed up a serial process.","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"key":"eLs4u6mPx1"}],"key":"tPQCyajlth"},{"type":"listItem","spread":true,"position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"children":[{"type":"text","value":"Calculate the speedup of the different approaches shown.","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"key":"hCNA57bStf"}],"key":"yXseK7lsSK"},{"type":"listItem","spread":true,"position":{"start":{"line":25,"column":1},"end":{"line":26,"column":1}},"children":[{"type":"text","value":"Evaluate which library is suited to your task.","position":{"start":{"line":25,"column":1},"end":{"line":25,"column":1}},"key":"iUQQrlHJAB"}],"key":"WmI0gKFBu9"}],"key":"lEeLQToTO7"}],"key":"SCZxjNjTdx"},{"type":"block","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"children":[{"type":"heading","depth":2,"position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"children":[{"type":"text","value":"Introduction","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"R2IgsHQnww"}],"identifier":"introduction","label":"Introduction","html_id":"introduction","implicit":true,"key":"rb09LTKtLD"},{"type":"paragraph","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"children":[{"type":"text","value":"This notebook shows how to speed up an image convolution task using these three libraries:","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"key":"RUxpg96qoN"}],"key":"xG9dDCSlKY"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":33,"column":1},"end":{"line":36,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"children":[{"type":"text","value":"Ray: an open-source unified compute framework that makes it easy to scale AI and Python workloads.","position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"key":"mmwStWq9CP"}],"key":"uKHsU78fs5"},{"type":"listItem","spread":true,"position":{"start":{"line":34,"column":1},"end":{"line":34,"column":1}},"children":[{"type":"text","value":"Multiprocessing: part of the standard library; supports spawning processes using an API similar to the threading module; offers both local and remote concurrency, effectively side-stepping the Global Interpreter Lock by using subprocesses instead of threads.","position":{"start":{"line":34,"column":1},"end":{"line":34,"column":1}},"key":"GaejhidgKx"}],"key":"XrMndMy6LW"},{"type":"listItem","spread":true,"position":{"start":{"line":35,"column":1},"end":{"line":36,"column":1}},"children":[{"type":"text","value":"Dask: developed to natively scale computational packages like numpy, pandas and scikit-learn, and the surrounding ecosystem, to multi-core machines and distributed clusters when datasets exceed memory.","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"QhdaErFKTA"}],"key":"rh4WimCPCt"}],"key":"Cmew5qbyWA"}],"key":"N1i13zUseI"},{"type":"block","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"children":[{"type":"heading","depth":2,"position":{"start":{"line":39,"column":1},"end":{"line":39,"column":1}},"children":[{"type":"text","value":"Imports","position":{"start":{"line":39,"column":1},"end":{"line":39,"column":1}},"key":"Ev4LMEWZE0"}],"identifier":"imports","label":"Imports","html_id":"imports","implicit":true,"key":"PPP7VWVlaN"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":41,"column":1},"end":{"line":47,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"children":[{"type":"text","value":"multiprocessing.Pool","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"key":"OEUhHIW1bK"}],"key":"ZtNjxSEMc9"},{"type":"text","value":" for multiprocessing using the standard library","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"key":"YavSTPoxjb"}],"key":"U6kTt9TTo8"},{"type":"listItem","spread":true,"position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"children":[{"type":"text","value":"time","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"key":"L6bN5OWRnD"}],"key":"qRR47ohKPA"},{"type":"text","value":" for timing the processes","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"key":"DAxGLBPmak"}],"key":"BdsgSpI0U2"},{"type":"listItem","spread":true,"position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"children":[{"type":"text","value":"dask.distributed.Client","position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"key":"LOtiWwX3fd"}],"key":"JvJIkhlNPR"},{"type":"text","value":" for making a local Dask cluster","position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"key":"JOO81jzi1x"}],"key":"TQZalrIdje"},{"type":"listItem","spread":true,"position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"children":[{"type":"text","value":"numpy","position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"key":"Iolm0Dk6hx"}],"key":"nUbXKnmesq"},{"type":"text","value":" and ","position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"key":"iomln0ytyl"},{"type":"emphasis","position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"children":[{"type":"text","value":"scipy.signal","position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"key":"PbzgeKyDi2"}],"key":"Fn3f5GN0Sq"},{"type":"text","value":" for numerical work","position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"key":"DvwmUPpNDW"}],"key":"pThd2dJWzY"},{"type":"listItem","spread":true,"position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"children":[{"type":"text","value":"psutil","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"key":"gIwnO05oHe"}],"key":"N0fXIKFxAJ"},{"type":"text","value":" for finding the available processors on your machine","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"key":"CiLEzGwAyU"}],"key":"NSy8OOI4un"},{"type":"listItem","spread":true,"position":{"start":{"line":46,"column":1},"end":{"line":47,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":46,"column":1},"end":{"line":46,"column":1}},"children":[{"type":"text","value":"ray","position":{"start":{"line":46,"column":1},"end":{"line":46,"column":1}},"key":"UdirB7dIvi"}],"key":"ElxHaWNzzx"},{"type":"text","value":" for scaling up Python tasks","position":{"start":{"line":46,"column":1},"end":{"line":46,"column":1}},"key":"J1Zz6Oqy2V"}],"key":"vQwgkiBPme"}],"key":"goDmY4sieq"}],"key":"RTDpXObaAx"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Uncomment the next line to install dependencies if needed.\n# !pip install dask[distributed] numpy ray scipy","key":"Gxb1iwjZqq"},{"type":"output","id":"na6IAP8x_dh0UqXuNz_2i","data":[],"key":"rxSEtDWn5U"}],"key":"FxnozltC6J"},{"type":"block","children":[],"key":"XkPMBZJ0yC"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from multiprocessing import Pool\nimport time\n\nfrom dask.distributed import Client\nimport numpy as np\nimport psutil\nimport scipy.signal\nimport ray","key":"qJHBJ2bVCr"},{"type":"output","id":"t8Uzlr7ayFFjjVyR7nfxY","data":[],"key":"kLAJak7KtY"}],"key":"HAsx3BJGWw"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":64,"column":1},"end":{"line":64,"column":1}},"children":[{"type":"text","value":"Find the cpus available","position":{"start":{"line":64,"column":1},"end":{"line":64,"column":1}},"key":"NR1QVsB4h2"}],"identifier":"find-the-cpus-available","label":"Find the cpus available","html_id":"find-the-cpus-available","implicit":true,"key":"gzwxRuhCRE"},{"type":"paragraph","position":{"start":{"line":66,"column":1},"end":{"line":67,"column":1}},"children":[{"type":"text","value":"Find and print the number of cpus\n(taken from ","position":{"start":{"line":66,"column":1},"end":{"line":66,"column":1}},"key":"A8l3gDg0Xe"},{"type":"link","url":"https://towardsdatascience.com/10x-faster-parallel-python-without-python-multiprocessing-e5017c93cce1","position":{"start":{"line":66,"column":1},"end":{"line":66,"column":1}},"children":[{"type":"text","value":"https://​towardsdatascience​.com​/10x​-faster​-parallel​-python​-without​-python​-multiprocessing​-e5017c93cce1","position":{"start":{"line":66,"column":1},"end":{"line":66,"column":1}},"key":"EwIvyWe5Zl"}],"urlSource":"https://towardsdatascience.com/10x-faster-parallel-python-without-python-multiprocessing-e5017c93cce1","key":"rLFLurQkxF"},{"type":"text","value":")","position":{"start":{"line":66,"column":1},"end":{"line":66,"column":1}},"key":"IXucLRVlnT"}],"key":"bzlh3Hf5cQ"}],"key":"eUezYms5k5"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"num_cpus = psutil.cpu_count(logical=True)\nprint(num_cpus)","key":"WISLkZ8Pok"},{"type":"output","id":"entbCrYDlhyVyuSgCd-Mi","data":[],"key":"i9nWvXCgmP"}],"key":"mQ4MvQdftm"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"children":[{"type":"text","value":"Process serially using a conventional loop","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"key":"w3sKdMREV5"}],"identifier":"process-serially-using-a-conventional-loop","label":"Process serially using a conventional loop","html_id":"process-serially-using-a-conventional-loop","implicit":true,"key":"YsMxaE5JUN"}],"key":"fFlP9f9oF8"},{"type":"block","position":{"start":{"line":76,"column":1},"end":{"line":76,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"children":[{"type":"text","value":"Use ","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"key":"TqUk93qMfU"},{"type":"inlineCode","value":"scipy.signal","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"key":"CBrVs8e18N"},{"type":"text","value":" to convolve two 2-dimensional arrays and return a 5x5 downsampled result.","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"key":"ohnpQxlmya"}],"key":"EZdo9FlteL"}],"key":"Ov820cZxbN"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def fconv(image, random_filter):\n    return scipy.signal.convolve2d(image, random_filter)[::5, ::5]","key":"JKEA7ufjNE"},{"type":"output","id":"DZ-ZIcFMeabLolzWX4nTy","data":[],"key":"NtIPb2kfBR"}],"key":"Kl3Z3xiISc"},{"type":"block","children":[],"key":"ssreTEhDTn"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"filters = [np.random.normal(size=(4, 4)) for _ in range(num_cpus)]","key":"umg0Ca9HCv"},{"type":"output","id":"5RuQUzTaDnoBgkdCyuNfh","data":[],"key":"gqmnATMYjR"}],"key":"PjehnRGcaK"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":89,"column":1},"end":{"line":89,"column":1}},"children":[{"type":"text","value":"Process 100 iterations serially, then extrapolate to num_cpus*100","position":{"start":{"line":89,"column":1},"end":{"line":89,"column":1}},"key":"rUCDAS86Sr"}],"key":"ZMJJk9dTVH"}],"key":"K1dX0LygcX"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"start = time.time()\nnum_iter = 100\nimage = np.zeros((3000, 3000))\nfor i in range(num_iter):\n    result = fconv(image, filters[i % num_cpus])\nduration_conv = time.time() - start\nprint(\"(scaled) conventional duration for {:d} iterations = {:.1f} seconds\"\n      .format(num_cpus*num_iter, duration_conv*num_cpus))","key":"rae4dUFAfB"},{"type":"output","id":"b9E3_7y0yEdMCSyb7rZ3A","data":[],"key":"EpVGJvTTMN"}],"key":"k1wFy9FrUl"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":102,"column":1},"end":{"line":102,"column":1}},"children":[{"type":"text","value":"Process in parallel using Ray","position":{"start":{"line":102,"column":1},"end":{"line":102,"column":1}},"key":"TGHwW1HvAv"}],"identifier":"process-in-parallel-using-ray","label":"Process in parallel using Ray","html_id":"process-in-parallel-using-ray","implicit":true,"key":"l7kOlZWZG3"}],"key":"uzfFpSnEaL"},{"type":"block","position":{"start":{"line":104,"column":1},"end":{"line":104,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":106,"column":1},"end":{"line":106,"column":1}},"children":[{"type":"link","url":"https://docs.ray.io/en/latest/","position":{"start":{"line":106,"column":1},"end":{"line":106,"column":1}},"children":[{"type":"text","value":"Documentation for ray","position":{"start":{"line":106,"column":1},"end":{"line":106,"column":1}},"key":"cysqoAoAyA"}],"urlSource":"https://docs.ray.io/en/latest/","key":"CGFYNOg2E9"}],"key":"SzNrZxReu1"}],"key":"Z56TaMdMfC"},{"type":"block","position":{"start":{"line":108,"column":1},"end":{"line":108,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":110,"column":1},"end":{"line":110,"column":1}},"children":[{"type":"text","value":"The warning raised by ","position":{"start":{"line":110,"column":1},"end":{"line":110,"column":1}},"key":"uySCUAcvcL"},{"type":"inlineCode","value":"ray.init","position":{"start":{"line":110,"column":1},"end":{"line":110,"column":1}},"key":"uJBqwNSA6s"},{"type":"text","value":" only affects shared object usage, which is not an issue for this tutorial. It may harm performance in other scenarios.","position":{"start":{"line":110,"column":1},"end":{"line":110,"column":1}},"key":"cUH0ZL7aoS"}],"key":"zBTlJHtqTl"}],"key":"F0R7n4K2vn"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ray.init(num_cpus=num_cpus)","key":"cALnDyMSUV"},{"type":"output","id":"54HuapmNSs2DTV5BF_Cip","data":[],"key":"jO4epWyoW4"}],"key":"PjqdYiroi2"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":116,"column":1},"end":{"line":116,"column":1}},"children":[{"type":"text","value":"Use ","position":{"start":{"line":116,"column":1},"end":{"line":116,"column":1}},"key":"PU0mt8X4Hd"},{"type":"inlineCode","value":"scipy.signal","position":{"start":{"line":116,"column":1},"end":{"line":116,"column":1}},"key":"oI1DYlKiff"},{"type":"text","value":" to convolve two 2-dimensional arrays and return a 5x5 downsampled result. To use Ray, we decorate the function that is doing the work.","position":{"start":{"line":116,"column":1},"end":{"line":116,"column":1}},"key":"gIAvr8MW4e"}],"key":"nzxAClOMmU"}],"key":"lrBePFHliQ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"@ray.remote\ndef fray(image, random_filter):\n    return scipy.signal.convolve2d(image, random_filter)[::5, ::5]","key":"V28UGApMI4"},{"type":"output","id":"Lh8VIN42CHRbchCnTfuRt","data":[],"key":"vz4tuQz2Cp"}],"key":"hIDHdzfaMI"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"children":[{"type":"text","value":"In the following loop, ","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"key":"OMAHPPb84b"},{"type":"inlineCode","value":"ray.put","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"key":"pQOjhIdFLc"},{"type":"text","value":" places the image into shared memory. The call to ","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"key":"g6VwxOlOSt"},{"type":"inlineCode","value":"ray.get","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"key":"DphmgrAqnb"},{"type":"text","value":" retrieves the result.","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"key":"eZBm3hZ9c6"}],"key":"SxjVxPCBW1"}],"key":"wCq7H4GrBK"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"start = time.time()\nimage = np.zeros((3000, 3000))\nfor _ in range(100):\n    image_id = ray.put(image)\n    ray.get([fray.remote(image_id, filters[i]) for i in range(num_cpus)])\nduration_ray = time.time() - start\nprint(\"Ray duration = {:.1f}, speedup = {:.2f}\"\n      .format(duration_ray, duration_conv*num_cpus / duration_ray))","key":"WVq5L3gbqq"},{"type":"output","id":"H0uC5B4GmXCjCDCbD4x3X","data":[],"key":"aGfuG3znzm"}],"key":"mA3B2JVKLl"},{"type":"block","children":[],"key":"OXfUJkyuMV"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ray.shutdown()","key":"AbS4sERrDm"},{"type":"output","id":"Wj46nvO5G7Od4BWwDbYSi","data":[],"key":"gFl17k5GgM"}],"key":"KF4IudVu8Z"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":141,"column":1},"end":{"line":141,"column":1}},"children":[{"type":"text","value":"Process in parallel using multiprocessing","position":{"start":{"line":141,"column":1},"end":{"line":141,"column":1}},"key":"aS2Xy1C91X"}],"identifier":"process-in-parallel-using-multiprocessing","label":"Process in parallel using multiprocessing","html_id":"process-in-parallel-using-multiprocessing","implicit":true,"key":"ZcTUM164Wu"}],"key":"r7mQHegtxE"},{"type":"block","position":{"start":{"line":143,"column":1},"end":{"line":143,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":145,"column":1},"end":{"line":145,"column":1}},"children":[{"type":"link","url":"https://docs.python.org/3/library/multiprocessing.html","position":{"start":{"line":145,"column":1},"end":{"line":145,"column":1}},"children":[{"type":"text","value":"Documentation for multiprocessing","position":{"start":{"line":145,"column":1},"end":{"line":145,"column":1}},"key":"LYMNvxjNNX"}],"urlSource":"https://docs.python.org/3/library/multiprocessing.html","key":"OwzyhnfiFD"}],"key":"byiyLBDuna"}],"key":"FjmrPnTVcE"},{"type":"block","position":{"start":{"line":147,"column":1},"end":{"line":147,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":149,"column":1},"end":{"line":149,"column":1}},"children":[{"type":"text","value":"Use ","position":{"start":{"line":149,"column":1},"end":{"line":149,"column":1}},"key":"uaPmwn8MW6"},{"type":"inlineCode","value":"scipy.signal","position":{"start":{"line":149,"column":1},"end":{"line":149,"column":1}},"key":"cf08QBkbja"},{"type":"text","value":" to convolve two 2-dimensional arrays and return a 5x5 downsampled result. The call to the function has a slightly different form than that for the serial loop.","position":{"start":{"line":149,"column":1},"end":{"line":149,"column":1}},"key":"xHXsOsL5WK"}],"key":"zgP3MiHe0A"}],"key":"Q54RKxJJAH"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Note: Mac and Windows users may need to copy the contents of this cell into a separate '.py' file\n# and then import it in order to use the `fmp` function with `multiprocessing`. This has to do with\n# differences in what does / does not get copied into the child processes in different operating systems.\nimport scipy.signal\n\ndef fmp(args):\n    image, random_filter = args\n    return scipy.signal.convolve2d(image, random_filter)[::5, ::5]","key":"ur0SdYTPA5"},{"type":"output","id":"i6KshiCGMck2SBzhzbD9u","data":[],"key":"L8S4tiJpbA"}],"key":"A0cWaA0FFR"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":162,"column":1},"end":{"line":162,"column":1}},"children":[{"type":"text","value":"Use a multiprocessing pool with the number of cpus we found earlier.","position":{"start":{"line":162,"column":1},"end":{"line":162,"column":1}},"key":"r4nfrJ4DQq"}],"key":"lSbaZtxsgg"}],"key":"UsI8Bdal8m"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"pool = Pool(num_cpus)","key":"etWkbqLTm0"},{"type":"output","id":"lhpIak5erZBA72Hv9-V32","data":[],"key":"XPKjZIUFFs"}],"key":"oaO2dxaWEj"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":168,"column":1},"end":{"line":168,"column":1}},"children":[{"type":"text","value":"Using ","position":{"start":{"line":168,"column":1},"end":{"line":168,"column":1}},"key":"YPAtP3T74v"},{"type":"inlineCode","value":"pool.map","position":{"start":{"line":168,"column":1},"end":{"line":168,"column":1}},"key":"oaUX12jk72"},{"type":"text","value":" is the closest analog in multiprocessing to the Ray API.","position":{"start":{"line":168,"column":1},"end":{"line":168,"column":1}},"key":"A0d3BzqCAF"}],"key":"BP5JyHwp3N"}],"key":"NMA0Wi21Qy"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"start = time.time()\nimage = np.zeros((3000, 3000))\nfor _ in range(100):\n    pool.map(fmp, zip(num_cpus * [image], filters))\nduration_mp = time.time() - start\nprint(\"Multiprocessing duration = {:.1f}, speedup = {:.2f}\"\n      .format(duration_mp, duration_conv*num_cpus / duration_mp))","key":"dtrmq5pF1H"},{"type":"output","id":"EC1mtFUetp6dIKCnAd5CJ","data":[],"key":"dzggdJThZ7"}],"key":"t83ECCglic"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":180,"column":1},"end":{"line":180,"column":1}},"children":[{"type":"text","value":"Process using Dask","position":{"start":{"line":180,"column":1},"end":{"line":180,"column":1}},"key":"JjbcfzdbsJ"}],"identifier":"process-using-dask","label":"Process using Dask","html_id":"process-using-dask","implicit":true,"key":"xJWCl6IqsR"}],"key":"OrK6n6OoZk"},{"type":"block","position":{"start":{"line":182,"column":1},"end":{"line":182,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":184,"column":1},"end":{"line":184,"column":1}},"children":[{"type":"link","url":"https://www.dask.org/get-started","position":{"start":{"line":184,"column":1},"end":{"line":184,"column":1}},"children":[{"type":"text","value":"Documentation for Dask","position":{"start":{"line":184,"column":1},"end":{"line":184,"column":1}},"key":"IMdhvrwUjv"}],"urlSource":"https://www.dask.org/get-started","key":"a0BIX9dPGs"}],"key":"hUn77IjtAJ"}],"key":"MW2dolbmY5"},{"type":"block","position":{"start":{"line":186,"column":1},"end":{"line":186,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":188,"column":1},"end":{"line":188,"column":1}},"children":[{"type":"text","value":"Define a Dask distributed client with number of workers set to the number of cpus we found earlier, and with one thread per worker.","position":{"start":{"line":188,"column":1},"end":{"line":188,"column":1}},"key":"zTafmLbNG8"}],"key":"LK8RI3TQfl"}],"key":"kx1orUhOMc"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"client = Client(n_workers=num_cpus, threads_per_worker=1)","key":"tGsNaOBRWD"},{"type":"output","id":"35KxpSeoN7rNOHkICj5eY","data":[],"key":"F3jZrjTzf3"}],"key":"YOZZcx6LYv"},{"type":"block","children":[],"key":"PbMSX5AkWL"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"print(client)","key":"TM5VbkxVNl"},{"type":"output","id":"rPNi7ijrntRmC7adNa7Jz","data":[],"key":"x80fLfK0Z1"}],"key":"pJzLQE6JVS"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":198,"column":1},"end":{"line":198,"column":1}},"children":[{"type":"text","value":"Dask recommends scattering the large inputs across the workers, though this makes little difference in execution time.","position":{"start":{"line":198,"column":1},"end":{"line":198,"column":1}},"key":"MHE0FFLSo5"}],"key":"p6cr80JHie"}],"key":"pNVbOh4IAy"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"start = time.time()\nimage = np.zeros((3000, 3000))\nfor _ in range(100):\n    for j in range(num_cpus):\n        big_future = client.scatter((image, filters[j % num_cpus]))\n        future = client.submit(fmp, big_future)\nduration_dask = time.time() - start\nprint(\"Dask duration = {:.1f}, speedup = {:.2f}\"\n      .format(duration_dask, duration_conv*num_cpus / duration_dask))","key":"b4jdCbV1S4"},{"type":"output","id":"1XdqKoW2El_dgsJ6KA2Ia","data":[],"key":"yjQu9nEzD2"}],"key":"YDo81Mrlcm"},{"type":"block","children":[],"key":"sTdneK3Rg7"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"client.close()","key":"a5p0Wx1ySi"},{"type":"output","id":"hOfqJ0hsYIBQJ1uv-QXCr","data":[],"key":"PJtnzWFFsc"}],"key":"Ci1LDwe7zy"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":216,"column":1},"end":{"line":216,"column":1}},"children":[{"type":"text","value":"Conclusions","position":{"start":{"line":216,"column":1},"end":{"line":216,"column":1}},"key":"CuxOlsV6cy"}],"identifier":"conclusions","label":"Conclusions","html_id":"conclusions","implicit":true,"key":"SDzaVkMhy8"}],"key":"pXYj6IuD7x"},{"type":"block","position":{"start":{"line":218,"column":1},"end":{"line":218,"column":1}},"children":[{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":220,"column":1},"end":{"line":223,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":220,"column":1},"end":{"line":220,"column":1}},"children":[{"type":"text","value":"Ray is the most effective at speeding up the convolution workload by fully utilizing all available processes","position":{"start":{"line":220,"column":1},"end":{"line":220,"column":1}},"key":"gQ3HxASis8"}],"key":"LKLSGPxxX8"},{"type":"listItem","spread":true,"position":{"start":{"line":221,"column":1},"end":{"line":221,"column":1}},"children":[{"type":"text","value":"Multiprocessing is second in effectiveness","position":{"start":{"line":221,"column":1},"end":{"line":221,"column":1}},"key":"BQi5qThJBo"}],"key":"pTvHsTiOEO"},{"type":"listItem","spread":true,"position":{"start":{"line":222,"column":1},"end":{"line":223,"column":1}},"children":[{"type":"text","value":"Dask delivers the least speedup; perhaps due to having only six processes on the dask.distributed client","position":{"start":{"line":222,"column":1},"end":{"line":222,"column":1}},"key":"RXZD0vPaYn"}],"key":"lQg4NRgloZ"}],"key":"Hs5JhvuBOK"}],"key":"FhYVWmWnyT"},{"type":"block","position":{"start":{"line":224,"column":1},"end":{"line":224,"column":1}},"children":[{"type":"thematicBreak","position":{"start":{"line":225,"column":1},"end":{"line":225,"column":1}},"key":"FITe2oYbaN"},{"type":"heading","depth":2,"position":{"start":{"line":227,"column":1},"end":{"line":227,"column":1}},"children":[{"type":"text","value":"About this notebook","position":{"start":{"line":227,"column":1},"end":{"line":227,"column":1}},"key":"Ra0OagKa7m"}],"identifier":"about-this-notebook","label":"About this notebook","html_id":"about-this-notebook","implicit":true,"key":"vZ9jZuAcqd"},{"type":"paragraph","position":{"start":{"line":229,"column":1},"end":{"line":229,"column":1}},"children":[{"type":"strong","position":{"start":{"line":229,"column":1},"end":{"line":229,"column":1}},"children":[{"type":"text","value":"Author:","position":{"start":{"line":229,"column":1},"end":{"line":229,"column":1}},"key":"UVPlT5VhRE"}],"key":"TR1htogKgO"},{"type":"text","value":" David Shupe in conjunction with Jessica Krick and the IRSA Science Platform team at IPAC.","position":{"start":{"line":229,"column":1},"end":{"line":229,"column":1}},"key":"B5QIpRtv55"}],"key":"q2PdN6K5O3"},{"type":"paragraph","position":{"start":{"line":231,"column":1},"end":{"line":231,"column":1}},"children":[{"type":"strong","position":{"start":{"line":231,"column":1},"end":{"line":231,"column":1}},"children":[{"type":"text","value":"Updated:","position":{"start":{"line":231,"column":1},"end":{"line":231,"column":1}},"key":"Qhf2dTE8wk"}],"key":"AxM84XtnHG"},{"type":"text","value":" 2024-09-24","position":{"start":{"line":231,"column":1},"end":{"line":231,"column":1}},"key":"ueuN5xfoz7"}],"key":"ccBrHwtf3m"},{"type":"paragraph","position":{"start":{"line":233,"column":1},"end":{"line":233,"column":1}},"children":[{"type":"strong","position":{"start":{"line":233,"column":1},"end":{"line":233,"column":1}},"children":[{"type":"text","value":"Contact:","position":{"start":{"line":233,"column":1},"end":{"line":233,"column":1}},"key":"XZDpaUM1Ir"}],"key":"cLGbk7sBhM"},{"type":"text","value":" ","position":{"start":{"line":233,"column":1},"end":{"line":233,"column":1}},"key":"OdSXGKbxBz"},{"type":"link","url":"https://irsa.ipac.caltech.edu/docs/help_desk.html","position":{"start":{"line":233,"column":1},"end":{"line":233,"column":1}},"children":[{"type":"text","value":"the IRSA Helpdesk","position":{"start":{"line":233,"column":1},"end":{"line":233,"column":1}},"key":"Ekk4kk1jhI"}],"urlSource":"https://irsa.ipac.caltech.edu/docs/help_desk.html","key":"mamnrFwwDK"},{"type":"text","value":" with questions or reporting problems.","position":{"start":{"line":233,"column":1},"end":{"line":233,"column":1}},"key":"OuHFUi8G5N"}],"key":"xUCAZnX92M"},{"type":"heading","depth":2,"position":{"start":{"line":235,"column":1},"end":{"line":235,"column":1}},"children":[{"type":"text","value":"Citations","position":{"start":{"line":235,"column":1},"end":{"line":235,"column":1}},"key":"tb1Py8dFZA"}],"identifier":"citations","label":"Citations","html_id":"citations","implicit":true,"key":"ccP3dB9KaD"},{"type":"paragraph","position":{"start":{"line":237,"column":1},"end":{"line":237,"column":1}},"children":[{"type":"text","value":"If you use these software packages in your work, please use the following citations:","position":{"start":{"line":237,"column":1},"end":{"line":237,"column":1}},"key":"bcSxWrJWLZ"}],"key":"G87WA7x1gB"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":239,"column":1},"end":{"line":241,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":239,"column":1},"end":{"line":239,"column":1}},"children":[{"type":"text","value":"Dask: Dask Development Team (2016). Dask: Library for dynamic task scheduling. URL ","position":{"start":{"line":239,"column":1},"end":{"line":239,"column":1}},"key":"Fqb1zBUBV0"},{"type":"link","url":"https://dask.org","position":{"start":{"line":239,"column":1},"end":{"line":239,"column":1}},"children":[{"type":"text","value":"https://dask.org","position":{"start":{"line":239,"column":1},"end":{"line":239,"column":1}},"key":"IUJVHebjz9"}],"urlSource":"https://dask.org","key":"Tp7IjyFhm3"}],"key":"ZBYfxrOUby"},{"type":"listItem","spread":true,"position":{"start":{"line":240,"column":1},"end":{"line":241,"column":1}},"children":[{"type":"text","value":"Ray: The Ray Development Team. URL ","position":{"start":{"line":240,"column":1},"end":{"line":240,"column":1}},"key":"C2c4qggYVD"},{"type":"link","url":"https://docs.ray.io","position":{"start":{"line":240,"column":1},"end":{"line":240,"column":1}},"children":[{"type":"text","value":"https://docs.ray.io","position":{"start":{"line":240,"column":1},"end":{"line":240,"column":1}},"key":"V4ehebV7cz"}],"urlSource":"https://docs.ray.io","key":"Pqzm1P4t7M"}],"key":"cuwcPaS3Xv"}],"key":"bFUBHvYjjw"}],"key":"IK87HI9jzW"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"","key":"kvVSLtP6eo"},{"type":"output","id":"wl3Hc5PjFaie8eCFzUEvE","data":[],"key":"fQF4kyCipn"}],"key":"afp5iROGja"}],"key":"cN5L15qx2x"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Using Firefly visualization tools in Python to vet SEDs","url":"/seds-in-firefly","group":"Special Topics"}}},"domain":"http://localhost:3000"}