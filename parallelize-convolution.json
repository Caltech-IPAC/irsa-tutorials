{"version":2,"kind":"Notebook","sha256":"68ed43783b40185a1d4ef25d932e183e199dbd7cced5bf15a0f3832b8de94912","slug":"parallelize-convolution","location":"/tutorials/parallelize/Parallelize_Convolution.md","dependencies":[],"frontmatter":{"title":"Parallelizing image convolution","kernelspec":{"name":"python3","display_name":"Python [conda env:clonenv]","language":"python"},"jupytext":{"text_representation":{"extension":".md","format_name":"myst","format_version":"0.13","jupytext_version":"1.16.2"}},"skip_execution":true,"content_includes_title":false,"authors":[{"id":"IRSA Scientists and Developers","name":"IRSA Scientists and Developers"}],"github":"https://github.com/Caltech-IPAC/irsa-tutorials/","subject":"IRSA Tutorials","keywords":["astronomy"],"settings":{"output_matplotlib_strings":"remove"},"numbering":{"title":{"offset":1}},"edit_url":"https://github.com/Caltech-IPAC/irsa-tutorials//blob/main/tutorials/parallelize/Parallelize_Convolution.md","exports":[{"format":"md","filename":"Parallelize_Convolution.md","url":"/irsa-tutorials/build/Parallelize_Convolut-c20bd0550835b01ab985e51fd2086a4a.md"}]},"mdast":{"type":"root","children":[{"type":"block","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"heading","depth":2,"position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"text","value":"Learning Goals","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"L9dRTb9jDS"}],"identifier":"learning-goals","label":"Learning Goals","html_id":"learning-goals","implicit":true,"key":"AJ8qmiS7nL"},{"type":"paragraph","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"children":[{"type":"text","value":"By the end of this tutorial, you will be able to:","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"key":"m6eWnwfzJi"}],"key":"fhoMJyLndj"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":23,"column":1},"end":{"line":26,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"children":[{"type":"text","value":"Employ three parallelization libraries to speed up a serial process.","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"key":"P8q8sN8pgV"}],"key":"tkkV9zlC7E"},{"type":"listItem","spread":true,"position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"children":[{"type":"text","value":"Calculate the speedup of the different approaches shown.","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"key":"x1l2FaVa9W"}],"key":"nyZycpYnwf"},{"type":"listItem","spread":true,"position":{"start":{"line":25,"column":1},"end":{"line":26,"column":1}},"children":[{"type":"text","value":"Evaluate which library is suited to your task.","position":{"start":{"line":25,"column":1},"end":{"line":25,"column":1}},"key":"rp5M4sEE2G"}],"key":"xsIG7VtOEH"}],"key":"jpnJPUqzi3"}],"key":"pHAddph6F1"},{"type":"block","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"children":[{"type":"heading","depth":2,"position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"children":[{"type":"text","value":"Introduction","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"zGwR8aMTgN"}],"identifier":"introduction","label":"Introduction","html_id":"introduction","implicit":true,"key":"Oq4PjsOsZE"},{"type":"paragraph","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"children":[{"type":"text","value":"This notebook shows how to speed up an image convolution task using these three libraries:","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"key":"TfbMSBKc4i"}],"key":"kZGizq07ef"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":33,"column":1},"end":{"line":36,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"children":[{"type":"text","value":"Ray: an open-source unified compute framework that makes it easy to scale AI and Python workloads.","position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"key":"Xd91NNNLey"}],"key":"Bri8lx868F"},{"type":"listItem","spread":true,"position":{"start":{"line":34,"column":1},"end":{"line":34,"column":1}},"children":[{"type":"text","value":"Multiprocessing: part of the standard library; supports spawning processes using an API similar to the threading module; offers both local and remote concurrency, effectively side-stepping the Global Interpreter Lock by using subprocesses instead of threads.","position":{"start":{"line":34,"column":1},"end":{"line":34,"column":1}},"key":"aQcDPKKsZK"}],"key":"Lnst0AkmLU"},{"type":"listItem","spread":true,"position":{"start":{"line":35,"column":1},"end":{"line":36,"column":1}},"children":[{"type":"text","value":"Dask: developed to natively scale computational packages like numpy, pandas and scikit-learn, and the surrounding ecosystem, to multi-core machines and distributed clusters when datasets exceed memory.","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"VQpqDX4dDL"}],"key":"dSxRfR2b3T"}],"key":"GUqpUdiSEQ"}],"key":"urmipukCYC"},{"type":"block","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"children":[{"type":"heading","depth":2,"position":{"start":{"line":39,"column":1},"end":{"line":39,"column":1}},"children":[{"type":"text","value":"Imports","position":{"start":{"line":39,"column":1},"end":{"line":39,"column":1}},"key":"KIKb7lKyBK"}],"identifier":"imports","label":"Imports","html_id":"imports","implicit":true,"key":"LIXfg8PJhL"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":41,"column":1},"end":{"line":47,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"children":[{"type":"text","value":"multiprocessing.Pool","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"key":"VQ1DeF8fBg"}],"key":"Xxdx3FbWaF"},{"type":"text","value":" for multiprocessing using the standard library","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"key":"nbbJaFcUSB"}],"key":"jYt8wJJvu7"},{"type":"listItem","spread":true,"position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"children":[{"type":"text","value":"time","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"key":"YOCkRkFFPV"}],"key":"ED4bfKCVOb"},{"type":"text","value":" for timing the processes","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"key":"lkrIwSsj4n"}],"key":"VDNt2BWFnn"},{"type":"listItem","spread":true,"position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"children":[{"type":"text","value":"dask.distributed.Client","position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"key":"v6H2OdXLA2"}],"key":"uXTV14E9ZE"},{"type":"text","value":" for making a local Dask cluster","position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"key":"CwwMJUZr5J"}],"key":"lNWCZELlR5"},{"type":"listItem","spread":true,"position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"children":[{"type":"text","value":"numpy","position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"key":"G7vHrcrUMF"}],"key":"PcIWOJGAnu"},{"type":"text","value":" and ","position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"key":"ECrXQbDgd0"},{"type":"emphasis","position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"children":[{"type":"text","value":"scipy.signal","position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"key":"LbZ3HIS8b0"}],"key":"FkotIsJorN"},{"type":"text","value":" for numerical work","position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"key":"LCXlVZqtFR"}],"key":"XrcvKN3eUS"},{"type":"listItem","spread":true,"position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"children":[{"type":"text","value":"psutil","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"key":"oXaJ9yrQuu"}],"key":"its0fERR8W"},{"type":"text","value":" for finding the available processors on your machine","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"key":"tvXCriruWF"}],"key":"kUHSZwV4dm"},{"type":"listItem","spread":true,"position":{"start":{"line":46,"column":1},"end":{"line":47,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":46,"column":1},"end":{"line":46,"column":1}},"children":[{"type":"text","value":"ray","position":{"start":{"line":46,"column":1},"end":{"line":46,"column":1}},"key":"KPrCEf5uPr"}],"key":"K62Gtysh9j"},{"type":"text","value":" for scaling up Python tasks","position":{"start":{"line":46,"column":1},"end":{"line":46,"column":1}},"key":"qoVghvNgEW"}],"key":"VF4t89DCXd"}],"key":"kEa6WgGt0c"}],"key":"eoNmE5kVee"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Uncomment the next line to install dependencies if needed.\n# !pip install dask[distributed] numpy ray scipy","key":"pusCJS9PP8"},{"type":"output","id":"UMP4ASTT4B8WCiIVf8ImH","data":[],"key":"zpMdlW5oAu"}],"key":"lKWnPNa36U"},{"type":"block","children":[],"key":"wrYjf5kTdQ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from multiprocessing import Pool\nimport time\n\nfrom dask.distributed import Client\nimport numpy as np\nimport psutil\nimport scipy.signal\nimport ray","key":"H6o6z9EewC"},{"type":"output","id":"I5cY_R9w8AXHRAzkKcGSn","data":[],"key":"F2k08BuVEC"}],"key":"htazfm7BSo"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":64,"column":1},"end":{"line":64,"column":1}},"children":[{"type":"text","value":"Find the cpus available","position":{"start":{"line":64,"column":1},"end":{"line":64,"column":1}},"key":"wKmT4QPe2j"}],"identifier":"find-the-cpus-available","label":"Find the cpus available","html_id":"find-the-cpus-available","implicit":true,"key":"pw51OYLmby"},{"type":"paragraph","position":{"start":{"line":66,"column":1},"end":{"line":67,"column":1}},"children":[{"type":"text","value":"Find and print the number of cpus\n(taken from ","position":{"start":{"line":66,"column":1},"end":{"line":66,"column":1}},"key":"QyNGYLQLzb"},{"type":"link","url":"https://towardsdatascience.com/10x-faster-parallel-python-without-python-multiprocessing-e5017c93cce1","position":{"start":{"line":66,"column":1},"end":{"line":66,"column":1}},"children":[{"type":"text","value":"https://​towardsdatascience​.com​/10x​-faster​-parallel​-python​-without​-python​-multiprocessing​-e5017c93cce1","position":{"start":{"line":66,"column":1},"end":{"line":66,"column":1}},"key":"bj8mvFyT7W"}],"urlSource":"https://towardsdatascience.com/10x-faster-parallel-python-without-python-multiprocessing-e5017c93cce1","key":"ujFxjiAbq4"},{"type":"text","value":")","position":{"start":{"line":66,"column":1},"end":{"line":66,"column":1}},"key":"anRxE2xiaz"}],"key":"xGOWxNr7TC"}],"key":"mcQeeq11AZ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"num_cpus = psutil.cpu_count(logical=True)\nprint(num_cpus)","key":"XdIf8opg9z"},{"type":"output","id":"luKO_9SrNp2EzmSp5Q9rP","data":[],"key":"w2myfF3chP"}],"key":"njtVdhjim4"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"children":[{"type":"text","value":"Process serially using a conventional loop","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"key":"WGl8h34iCm"}],"identifier":"process-serially-using-a-conventional-loop","label":"Process serially using a conventional loop","html_id":"process-serially-using-a-conventional-loop","implicit":true,"key":"Rbzpmc4jAl"}],"key":"dFS7zC7WjT"},{"type":"block","position":{"start":{"line":76,"column":1},"end":{"line":76,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"children":[{"type":"text","value":"Use ","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"key":"KXMvsCEXlS"},{"type":"inlineCode","value":"scipy.signal","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"key":"h0shY7Fc0N"},{"type":"text","value":" to convolve two 2-dimensional arrays and return a 5x5 downsampled result.","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"key":"SGatNboQIF"}],"key":"x2Thq1troB"}],"key":"XAK6zAsA0h"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def fconv(image, random_filter):\n    return scipy.signal.convolve2d(image, random_filter)[::5, ::5]","key":"f392Ptsast"},{"type":"output","id":"UZOJYcBuHd-hhJYZd38e_","data":[],"key":"OCFQDkMwZR"}],"key":"s2wSHLoEJU"},{"type":"block","children":[],"key":"LoTUaobCLX"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"filters = [np.random.normal(size=(4, 4)) for _ in range(num_cpus)]","key":"y7K5Mjyn7V"},{"type":"output","id":"LIcCQSuO72ZelN0eLOQcv","data":[],"key":"rjmjv9zbO0"}],"key":"O0NmUmSXQy"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":89,"column":1},"end":{"line":89,"column":1}},"children":[{"type":"text","value":"Process 100 iterations serially, then extrapolate to num_cpus*100","position":{"start":{"line":89,"column":1},"end":{"line":89,"column":1}},"key":"LYfrQ7iiQh"}],"key":"DuM34ODGhe"}],"key":"e7rICmzOwB"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"start = time.time()\nnum_iter = 100\nimage = np.zeros((3000, 3000))\nfor i in range(num_iter):\n    result = fconv(image, filters[i % num_cpus])\nduration_conv = time.time() - start\nprint(\"(scaled) conventional duration for {:d} iterations = {:.1f} seconds\"\n      .format(num_cpus*num_iter, duration_conv*num_cpus))","key":"Yr2f8nwNYi"},{"type":"output","id":"EjUSBVKwxLn8aX0xIJJor","data":[],"key":"PLvjyfV7gl"}],"key":"nVz17zzpdE"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":102,"column":1},"end":{"line":102,"column":1}},"children":[{"type":"text","value":"Process in parallel using Ray","position":{"start":{"line":102,"column":1},"end":{"line":102,"column":1}},"key":"TD8oMeqlSK"}],"identifier":"process-in-parallel-using-ray","label":"Process in parallel using Ray","html_id":"process-in-parallel-using-ray","implicit":true,"key":"L3yEa37G1N"}],"key":"v8UrNaKg6Y"},{"type":"block","position":{"start":{"line":104,"column":1},"end":{"line":104,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":106,"column":1},"end":{"line":106,"column":1}},"children":[{"type":"link","url":"https://docs.ray.io/en/latest/","position":{"start":{"line":106,"column":1},"end":{"line":106,"column":1}},"children":[{"type":"text","value":"Documentation for ray","position":{"start":{"line":106,"column":1},"end":{"line":106,"column":1}},"key":"kJVeGZ7LP8"}],"urlSource":"https://docs.ray.io/en/latest/","key":"NrMLHRHIu4"}],"key":"UOco0QA1PP"}],"key":"RFvCufywPf"},{"type":"block","position":{"start":{"line":108,"column":1},"end":{"line":108,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":110,"column":1},"end":{"line":110,"column":1}},"children":[{"type":"text","value":"The warning raised by ","position":{"start":{"line":110,"column":1},"end":{"line":110,"column":1}},"key":"EwStpym9bk"},{"type":"inlineCode","value":"ray.init","position":{"start":{"line":110,"column":1},"end":{"line":110,"column":1}},"key":"qIRUcSNKu4"},{"type":"text","value":" only affects shared object usage, which is not an issue for this tutorial. It may harm performance in other scenarios.","position":{"start":{"line":110,"column":1},"end":{"line":110,"column":1}},"key":"YqWbMVcAlJ"}],"key":"Yt7ZYk3E3Y"}],"key":"LwAiBmt7L5"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ray.init(num_cpus=num_cpus)","key":"OdVyOyJUlB"},{"type":"output","id":"XMPQqZIppQCiOkXI9Rh9H","data":[],"key":"kp2EZLT9ZV"}],"key":"wU01HRia1N"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":116,"column":1},"end":{"line":116,"column":1}},"children":[{"type":"text","value":"Use ","position":{"start":{"line":116,"column":1},"end":{"line":116,"column":1}},"key":"YWf6ogLxD9"},{"type":"inlineCode","value":"scipy.signal","position":{"start":{"line":116,"column":1},"end":{"line":116,"column":1}},"key":"VlUnkjKtaI"},{"type":"text","value":" to convolve two 2-dimensional arrays and return a 5x5 downsampled result. To use Ray, we decorate the function that is doing the work.","position":{"start":{"line":116,"column":1},"end":{"line":116,"column":1}},"key":"RDmolVdypV"}],"key":"ik2WdcS3nt"}],"key":"RfSbvZV3YT"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"@ray.remote\ndef fray(image, random_filter):\n    return scipy.signal.convolve2d(image, random_filter)[::5, ::5]","key":"CqNToRJIMb"},{"type":"output","id":"4VoA6T7uwP-t5SRM57oXa","data":[],"key":"emkoaoXIHh"}],"key":"RZKbMNdCcG"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"children":[{"type":"text","value":"In the following loop, ","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"key":"e2g7ohSH71"},{"type":"inlineCode","value":"ray.put","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"key":"BTQtMXaik6"},{"type":"text","value":" places the image into shared memory. The call to ","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"key":"wRFieDY9Nc"},{"type":"inlineCode","value":"ray.get","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"key":"Z7DjynSir4"},{"type":"text","value":" retrieves the result.","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"key":"M85AmKibi2"}],"key":"hmFaajIneo"}],"key":"ngWjmmwlr0"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"start = time.time()\nimage = np.zeros((3000, 3000))\nfor _ in range(100):\n    image_id = ray.put(image)\n    ray.get([fray.remote(image_id, filters[i]) for i in range(num_cpus)])\nduration_ray = time.time() - start\nprint(\"Ray duration = {:.1f}, speedup = {:.2f}\"\n      .format(duration_ray, duration_conv*num_cpus / duration_ray))","key":"QPzd5aaRLr"},{"type":"output","id":"MVHrJeZByN35Hvn1sZkFL","data":[],"key":"e4NTvR6bxO"}],"key":"CQAvqfNPrs"},{"type":"block","children":[],"key":"hLdLi26ZMV"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ray.shutdown()","key":"RQLXQvdn3k"},{"type":"output","id":"ncy1BRBEFemTJgnSGPCoM","data":[],"key":"DpQ6Y6818m"}],"key":"jS6iqXfGFX"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":141,"column":1},"end":{"line":141,"column":1}},"children":[{"type":"text","value":"Process in parallel using multiprocessing","position":{"start":{"line":141,"column":1},"end":{"line":141,"column":1}},"key":"gMEBntI1Hp"}],"identifier":"process-in-parallel-using-multiprocessing","label":"Process in parallel using multiprocessing","html_id":"process-in-parallel-using-multiprocessing","implicit":true,"key":"VbF11EmIuU"}],"key":"mWy1jHV4Yb"},{"type":"block","position":{"start":{"line":143,"column":1},"end":{"line":143,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":145,"column":1},"end":{"line":145,"column":1}},"children":[{"type":"link","url":"https://docs.python.org/3/library/multiprocessing.html","position":{"start":{"line":145,"column":1},"end":{"line":145,"column":1}},"children":[{"type":"text","value":"Documentation for multiprocessing","position":{"start":{"line":145,"column":1},"end":{"line":145,"column":1}},"key":"KLAhRB8Oop"}],"urlSource":"https://docs.python.org/3/library/multiprocessing.html","key":"OvpamnAEYm"}],"key":"cFLoN9Wh2E"}],"key":"hYge3Ljwq6"},{"type":"block","position":{"start":{"line":147,"column":1},"end":{"line":147,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":149,"column":1},"end":{"line":149,"column":1}},"children":[{"type":"text","value":"Use ","position":{"start":{"line":149,"column":1},"end":{"line":149,"column":1}},"key":"Fe0hAn9Vs3"},{"type":"inlineCode","value":"scipy.signal","position":{"start":{"line":149,"column":1},"end":{"line":149,"column":1}},"key":"ApEpGTEXlU"},{"type":"text","value":" to convolve two 2-dimensional arrays and return a 5x5 downsampled result. The call to the function has a slightly different form than that for the serial loop.","position":{"start":{"line":149,"column":1},"end":{"line":149,"column":1}},"key":"zwox6VsDv3"}],"key":"BTM41B6Wp6"}],"key":"R4SKGjtWht"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Note: Mac and Windows users may need to copy the contents of this cell into a separate '.py' file\n# and then import it in order to use the `fmp` function with `multiprocessing`. This has to do with\n# differences in what does / does not get copied into the child processes in different operating systems.\nimport scipy.signal\n\ndef fmp(args):\n    image, random_filter = args\n    return scipy.signal.convolve2d(image, random_filter)[::5, ::5]","key":"yapoy8EiDv"},{"type":"output","id":"4H5dmjcUrmQAKXj56NL52","data":[],"key":"MDP1CW1SqX"}],"key":"Q2eiucQFQ0"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":162,"column":1},"end":{"line":162,"column":1}},"children":[{"type":"text","value":"Use a multiprocessing pool with the number of cpus we found earlier.","position":{"start":{"line":162,"column":1},"end":{"line":162,"column":1}},"key":"ncXn3Odkwg"}],"key":"RvWJd0BAmk"}],"key":"NaJPqkR9bL"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"pool = Pool(num_cpus)","key":"TNynYwKQaD"},{"type":"output","id":"5iFSCdLkMGLr-ObAfQ6L4","data":[],"key":"TFVjfvHVAs"}],"key":"tsAkS9ZcJG"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":168,"column":1},"end":{"line":168,"column":1}},"children":[{"type":"text","value":"Using ","position":{"start":{"line":168,"column":1},"end":{"line":168,"column":1}},"key":"TdW69Iinto"},{"type":"inlineCode","value":"pool.map","position":{"start":{"line":168,"column":1},"end":{"line":168,"column":1}},"key":"NQYRE3IjSF"},{"type":"text","value":" is the closest analog in multiprocessing to the Ray API.","position":{"start":{"line":168,"column":1},"end":{"line":168,"column":1}},"key":"IfXlMxdQ5w"}],"key":"oB4jAQCgs6"}],"key":"C8sb3VdJ1k"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"start = time.time()\nimage = np.zeros((3000, 3000))\nfor _ in range(100):\n    pool.map(fmp, zip(num_cpus * [image], filters))\nduration_mp = time.time() - start\nprint(\"Multiprocessing duration = {:.1f}, speedup = {:.2f}\"\n      .format(duration_mp, duration_conv*num_cpus / duration_mp))","key":"igzUalflJ2"},{"type":"output","id":"8ESgPHUTd8ovKerkJDekY","data":[],"key":"w0MDa8ilH6"}],"key":"SN6cuc3oeh"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":180,"column":1},"end":{"line":180,"column":1}},"children":[{"type":"text","value":"Process using Dask","position":{"start":{"line":180,"column":1},"end":{"line":180,"column":1}},"key":"oJEmVYHxlA"}],"identifier":"process-using-dask","label":"Process using Dask","html_id":"process-using-dask","implicit":true,"key":"IGKgvMa0mz"}],"key":"KVQmcv6WTe"},{"type":"block","position":{"start":{"line":182,"column":1},"end":{"line":182,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":184,"column":1},"end":{"line":184,"column":1}},"children":[{"type":"link","url":"https://www.dask.org/get-started","position":{"start":{"line":184,"column":1},"end":{"line":184,"column":1}},"children":[{"type":"text","value":"Documentation for Dask","position":{"start":{"line":184,"column":1},"end":{"line":184,"column":1}},"key":"jn6diPXMDP"}],"urlSource":"https://www.dask.org/get-started","key":"MvrLSAkIfc"}],"key":"BITwusLDoc"}],"key":"YPspYxP97Z"},{"type":"block","position":{"start":{"line":186,"column":1},"end":{"line":186,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":188,"column":1},"end":{"line":188,"column":1}},"children":[{"type":"text","value":"Define a Dask distributed client with number of workers set to the number of cpus we found earlier, and with one thread per worker.","position":{"start":{"line":188,"column":1},"end":{"line":188,"column":1}},"key":"LuhIL0bEpf"}],"key":"rCIvWAK8Ky"}],"key":"KjP6mwhO3W"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"client = Client(n_workers=num_cpus, threads_per_worker=1)","key":"a4NF0GOErS"},{"type":"output","id":"nmX2yfIbXBhJcvuI6Mjss","data":[],"key":"HZYrlKJUut"}],"key":"G2uWml3Uxc"},{"type":"block","children":[],"key":"v9dpNP342u"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"print(client)","key":"EV5gaOIDNZ"},{"type":"output","id":"gkstqYRGHbLl8S1eJKSYA","data":[],"key":"bSN5oAZbay"}],"key":"oBZpbkAjHn"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":198,"column":1},"end":{"line":198,"column":1}},"children":[{"type":"text","value":"Dask recommends scattering the large inputs across the workers, though this makes little difference in execution time.","position":{"start":{"line":198,"column":1},"end":{"line":198,"column":1}},"key":"su1lddPwDz"}],"key":"HITMm2jjrY"}],"key":"x1oaHIyX4e"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"start = time.time()\nimage = np.zeros((3000, 3000))\nfor _ in range(100):\n    for j in range(num_cpus):\n        big_future = client.scatter((image, filters[j % num_cpus]))\n        future = client.submit(fmp, big_future)\nduration_dask = time.time() - start\nprint(\"Dask duration = {:.1f}, speedup = {:.2f}\"\n      .format(duration_dask, duration_conv*num_cpus / duration_dask))","key":"dUEobWDSyU"},{"type":"output","id":"oInGYOp8CgIMZ39O8yTlz","data":[],"key":"LJVZeet4DG"}],"key":"Cxi8puE4Ss"},{"type":"block","children":[],"key":"h5o27tc3AY"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"client.close()","key":"wF8tmDu2Li"},{"type":"output","id":"7ts5SMhjKJp4vmchk-urK","data":[],"key":"zfL1GzhlMH"}],"key":"Y8feYJwnDI"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":216,"column":1},"end":{"line":216,"column":1}},"children":[{"type":"text","value":"Conclusions","position":{"start":{"line":216,"column":1},"end":{"line":216,"column":1}},"key":"NbRr63G8CP"}],"identifier":"conclusions","label":"Conclusions","html_id":"conclusions","implicit":true,"key":"WYH7F9S6dA"}],"key":"qzKQHDLbw8"},{"type":"block","position":{"start":{"line":218,"column":1},"end":{"line":218,"column":1}},"children":[{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":220,"column":1},"end":{"line":223,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":220,"column":1},"end":{"line":220,"column":1}},"children":[{"type":"text","value":"Ray is the most effective at speeding up the convolution workload by fully utilizing all available processes","position":{"start":{"line":220,"column":1},"end":{"line":220,"column":1}},"key":"QNcolVBzye"}],"key":"hyE43xYRns"},{"type":"listItem","spread":true,"position":{"start":{"line":221,"column":1},"end":{"line":221,"column":1}},"children":[{"type":"text","value":"Multiprocessing is second in effectiveness","position":{"start":{"line":221,"column":1},"end":{"line":221,"column":1}},"key":"WIZYF8ylVL"}],"key":"tHRnCHFKiu"},{"type":"listItem","spread":true,"position":{"start":{"line":222,"column":1},"end":{"line":223,"column":1}},"children":[{"type":"text","value":"Dask delivers the least speedup; perhaps due to having only six processes on the dask.distributed client","position":{"start":{"line":222,"column":1},"end":{"line":222,"column":1}},"key":"RrXjMHTK89"}],"key":"jlsL2P2VHv"}],"key":"K1AbcoKCP6"}],"key":"UcY7Q9MJYC"},{"type":"block","position":{"start":{"line":224,"column":1},"end":{"line":224,"column":1}},"children":[{"type":"thematicBreak","position":{"start":{"line":225,"column":1},"end":{"line":225,"column":1}},"key":"V28Ce5Zhej"},{"type":"heading","depth":2,"position":{"start":{"line":227,"column":1},"end":{"line":227,"column":1}},"children":[{"type":"text","value":"About this notebook","position":{"start":{"line":227,"column":1},"end":{"line":227,"column":1}},"key":"sFhIXfawIc"}],"identifier":"about-this-notebook","label":"About this notebook","html_id":"about-this-notebook","implicit":true,"key":"BQ8g4Ig2Zc"},{"type":"paragraph","position":{"start":{"line":229,"column":1},"end":{"line":229,"column":1}},"children":[{"type":"strong","position":{"start":{"line":229,"column":1},"end":{"line":229,"column":1}},"children":[{"type":"text","value":"Author:","position":{"start":{"line":229,"column":1},"end":{"line":229,"column":1}},"key":"EDWtg9TW0d"}],"key":"PMY0bVGjGQ"},{"type":"text","value":" David Shupe in conjunction with Jessica Krick and the IRSA Science Platform team at IPAC.","position":{"start":{"line":229,"column":1},"end":{"line":229,"column":1}},"key":"zoQkG2fJ7d"}],"key":"jmjl69BiRX"},{"type":"paragraph","position":{"start":{"line":231,"column":1},"end":{"line":231,"column":1}},"children":[{"type":"strong","position":{"start":{"line":231,"column":1},"end":{"line":231,"column":1}},"children":[{"type":"text","value":"Updated:","position":{"start":{"line":231,"column":1},"end":{"line":231,"column":1}},"key":"OQkDc3a4AH"}],"key":"MIlyS74P2o"},{"type":"text","value":" 2024-09-24","position":{"start":{"line":231,"column":1},"end":{"line":231,"column":1}},"key":"SUSiWqRSv5"}],"key":"zgROVRkrj5"},{"type":"paragraph","position":{"start":{"line":233,"column":1},"end":{"line":233,"column":1}},"children":[{"type":"strong","position":{"start":{"line":233,"column":1},"end":{"line":233,"column":1}},"children":[{"type":"text","value":"Contact:","position":{"start":{"line":233,"column":1},"end":{"line":233,"column":1}},"key":"QyWEUzinhh"}],"key":"SBSkRO2LCM"},{"type":"text","value":" ","position":{"start":{"line":233,"column":1},"end":{"line":233,"column":1}},"key":"wlrNoEjuAf"},{"type":"link","url":"https://irsa.ipac.caltech.edu/docs/help_desk.html","position":{"start":{"line":233,"column":1},"end":{"line":233,"column":1}},"children":[{"type":"text","value":"the IRSA Helpdesk","position":{"start":{"line":233,"column":1},"end":{"line":233,"column":1}},"key":"iGygApJJHi"}],"urlSource":"https://irsa.ipac.caltech.edu/docs/help_desk.html","key":"A33sqHmpax"},{"type":"text","value":" with questions or reporting problems.","position":{"start":{"line":233,"column":1},"end":{"line":233,"column":1}},"key":"TiiBHAdiH8"}],"key":"GVlkCyMqsn"},{"type":"heading","depth":2,"position":{"start":{"line":235,"column":1},"end":{"line":235,"column":1}},"children":[{"type":"text","value":"Citations","position":{"start":{"line":235,"column":1},"end":{"line":235,"column":1}},"key":"B6I6H4Itc0"}],"identifier":"citations","label":"Citations","html_id":"citations","implicit":true,"key":"wOTX1p0EAr"},{"type":"paragraph","position":{"start":{"line":237,"column":1},"end":{"line":237,"column":1}},"children":[{"type":"text","value":"If you use these software packages in your work, please use the following citations:","position":{"start":{"line":237,"column":1},"end":{"line":237,"column":1}},"key":"J6pehbb2mB"}],"key":"gWdcyva11z"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":239,"column":1},"end":{"line":241,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":239,"column":1},"end":{"line":239,"column":1}},"children":[{"type":"text","value":"Dask: Dask Development Team (2016). Dask: Library for dynamic task scheduling. URL ","position":{"start":{"line":239,"column":1},"end":{"line":239,"column":1}},"key":"U1MomnbGP1"},{"type":"link","url":"https://dask.org","position":{"start":{"line":239,"column":1},"end":{"line":239,"column":1}},"children":[{"type":"text","value":"https://dask.org","position":{"start":{"line":239,"column":1},"end":{"line":239,"column":1}},"key":"J1DM7dqEo0"}],"urlSource":"https://dask.org","key":"n6PLqRuvxH"}],"key":"HPIgVBOGfQ"},{"type":"listItem","spread":true,"position":{"start":{"line":240,"column":1},"end":{"line":241,"column":1}},"children":[{"type":"text","value":"Ray: The Ray Development Team. URL ","position":{"start":{"line":240,"column":1},"end":{"line":240,"column":1}},"key":"OOLeCSIw1x"},{"type":"link","url":"https://docs.ray.io","position":{"start":{"line":240,"column":1},"end":{"line":240,"column":1}},"children":[{"type":"text","value":"https://docs.ray.io","position":{"start":{"line":240,"column":1},"end":{"line":240,"column":1}},"key":"rpCfsX2jXi"}],"urlSource":"https://docs.ray.io","key":"xmZ5nzJd2E"}],"key":"zQuFWIyTYz"}],"key":"TjsLGCtM2o"}],"key":"TXgIyNtHWu"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"","key":"ryhgDhw95L"},{"type":"output","id":"4yuZqqHKRxpg2egw01fRZ","data":[],"key":"WghNYJL8MZ"}],"key":"vCua0AWSB1"}],"key":"pHBSXnO0MT"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Using Firefly visualization tools in Python to vet SEDs","url":"/seds-in-firefly","group":"Special Topics"}}},"domain":"http://localhost:3000"}