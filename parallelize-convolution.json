{"version":2,"kind":"Notebook","sha256":"68ed43783b40185a1d4ef25d932e183e199dbd7cced5bf15a0f3832b8de94912","slug":"parallelize-convolution","location":"/tutorials/parallelize/Parallelize_Convolution.md","dependencies":[],"frontmatter":{"title":"Parallelizing image convolution","kernelspec":{"name":"python3","display_name":"Python [conda env:clonenv]","language":"python"},"jupytext":{"text_representation":{"extension":".md","format_name":"myst","format_version":"0.13","jupytext_version":"1.16.2"}},"skip_execution":true,"content_includes_title":false,"authors":[{"id":"IRSA Scientists and Developers","name":"IRSA Scientists and Developers"}],"github":"https://github.com/Caltech-IPAC/irsa-tutorials/","subject":"IRSA Tutorials","keywords":["astronomy"],"settings":{"output_matplotlib_strings":"remove"},"numbering":{"title":{"offset":1}},"edit_url":"https://github.com/Caltech-IPAC/irsa-tutorials//blob/main/tutorials/parallelize/Parallelize_Convolution.md","exports":[{"format":"md","filename":"Parallelize_Convolution.md","url":"/irsa-tutorials/build/Parallelize_Convolut-f2862f86172347c89a71ea20e2d32a1c.md"}]},"mdast":{"type":"root","children":[{"type":"block","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"heading","depth":2,"position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"text","value":"Learning Goals","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"reGWpwKK63"}],"identifier":"learning-goals","label":"Learning Goals","html_id":"learning-goals","implicit":true,"key":"xQZ5MbXiGW"},{"type":"paragraph","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"children":[{"type":"text","value":"By the end of this tutorial, you will be able to:","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"key":"F1gdsmA1Ic"}],"key":"xHAGXCmsqM"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":23,"column":1},"end":{"line":26,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"children":[{"type":"text","value":"Employ three parallelization libraries to speed up a serial process.","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"key":"lFLxOgL47r"}],"key":"NS3aVgk7sF"},{"type":"listItem","spread":true,"position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"children":[{"type":"text","value":"Calculate the speedup of the different approaches shown.","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"key":"nd4YKwBq1E"}],"key":"evQa8YWayv"},{"type":"listItem","spread":true,"position":{"start":{"line":25,"column":1},"end":{"line":26,"column":1}},"children":[{"type":"text","value":"Evaluate which library is suited to your task.","position":{"start":{"line":25,"column":1},"end":{"line":25,"column":1}},"key":"me04JibTfg"}],"key":"OyEOI8dLfk"}],"key":"moj3RF5J9r"}],"key":"WotLYsu9nU"},{"type":"block","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"children":[{"type":"heading","depth":2,"position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"children":[{"type":"text","value":"Introduction","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"fdGeTUtmPN"}],"identifier":"introduction","label":"Introduction","html_id":"introduction","implicit":true,"key":"N2N7n3DnZL"},{"type":"paragraph","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"children":[{"type":"text","value":"This notebook shows how to speed up an image convolution task using these three libraries:","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"key":"oefemnOg4D"}],"key":"xJTdGZ0YOD"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":33,"column":1},"end":{"line":36,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"children":[{"type":"text","value":"Ray: an open-source unified compute framework that makes it easy to scale AI and Python workloads.","position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"key":"GPHEnYb0FB"}],"key":"YIkTwaTOV2"},{"type":"listItem","spread":true,"position":{"start":{"line":34,"column":1},"end":{"line":34,"column":1}},"children":[{"type":"text","value":"Multiprocessing: part of the standard library; supports spawning processes using an API similar to the threading module; offers both local and remote concurrency, effectively side-stepping the Global Interpreter Lock by using subprocesses instead of threads.","position":{"start":{"line":34,"column":1},"end":{"line":34,"column":1}},"key":"PsnEdBnjuK"}],"key":"aHXwPSh8GZ"},{"type":"listItem","spread":true,"position":{"start":{"line":35,"column":1},"end":{"line":36,"column":1}},"children":[{"type":"text","value":"Dask: developed to natively scale computational packages like numpy, pandas and scikit-learn, and the surrounding ecosystem, to multi-core machines and distributed clusters when datasets exceed memory.","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"tRqq6Nu4Tt"}],"key":"rKcWc0gl9P"}],"key":"lpJik40e8k"}],"key":"c6dNLhBATD"},{"type":"block","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"children":[{"type":"heading","depth":2,"position":{"start":{"line":39,"column":1},"end":{"line":39,"column":1}},"children":[{"type":"text","value":"Imports","position":{"start":{"line":39,"column":1},"end":{"line":39,"column":1}},"key":"QCYQJcq61Z"}],"identifier":"imports","label":"Imports","html_id":"imports","implicit":true,"key":"HX58EPdlHK"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":41,"column":1},"end":{"line":47,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"children":[{"type":"text","value":"multiprocessing.Pool","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"key":"Mb7wrYnIDg"}],"key":"TGgcxqov9C"},{"type":"text","value":" for multiprocessing using the standard library","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"key":"Lx5zmiCqFk"}],"key":"qf7kyPLxJQ"},{"type":"listItem","spread":true,"position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"children":[{"type":"text","value":"time","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"key":"HuhOeFlARA"}],"key":"BR8nr6QbKW"},{"type":"text","value":" for timing the processes","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"key":"YK68tQEUxg"}],"key":"kfib7SNjvK"},{"type":"listItem","spread":true,"position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"children":[{"type":"text","value":"dask.distributed.Client","position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"key":"awescCvAmb"}],"key":"W0cDNiKw3U"},{"type":"text","value":" for making a local Dask cluster","position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"key":"U0xix20MxJ"}],"key":"LvtcvOzc0D"},{"type":"listItem","spread":true,"position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"children":[{"type":"text","value":"numpy","position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"key":"zqOrZ9y6FU"}],"key":"VU0KPxvL7A"},{"type":"text","value":" and ","position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"key":"oDTA4tQcLM"},{"type":"emphasis","position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"children":[{"type":"text","value":"scipy.signal","position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"key":"yzdbEJZTBs"}],"key":"wmgAEIWis4"},{"type":"text","value":" for numerical work","position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"key":"LdeByXGXyt"}],"key":"in1PwBZr6H"},{"type":"listItem","spread":true,"position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"children":[{"type":"text","value":"psutil","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"key":"CCwqTRkUGM"}],"key":"q0U30UKkPS"},{"type":"text","value":" for finding the available processors on your machine","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"key":"P7sGnZdGrB"}],"key":"v78qOn1mny"},{"type":"listItem","spread":true,"position":{"start":{"line":46,"column":1},"end":{"line":47,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":46,"column":1},"end":{"line":46,"column":1}},"children":[{"type":"text","value":"ray","position":{"start":{"line":46,"column":1},"end":{"line":46,"column":1}},"key":"pkF3FSHVfX"}],"key":"qX9pt55xGd"},{"type":"text","value":" for scaling up Python tasks","position":{"start":{"line":46,"column":1},"end":{"line":46,"column":1}},"key":"w5OmvFxwiv"}],"key":"ST2f2GG3Kw"}],"key":"FXqS1v3Jor"}],"key":"Qy4BxMhyP2"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Uncomment the next line to install dependencies if needed.\n# !pip install dask[distributed] numpy ray scipy","key":"W5DCk75Clv"},{"type":"output","id":"ZxCvAsq-IV3OGyJwCcwF4","data":[],"key":"CI3tD1BHZb"}],"key":"tCZ6hxr7y2"},{"type":"block","children":[],"key":"RXiRWNfuNL"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from multiprocessing import Pool\nimport time\n\nfrom dask.distributed import Client\nimport numpy as np\nimport psutil\nimport scipy.signal\nimport ray","key":"mNnsqGOImA"},{"type":"output","id":"VkfIogyTTB6kbJSzAU_8m","data":[],"key":"Z5zvGNRUVQ"}],"key":"lBM4I6XcSa"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":64,"column":1},"end":{"line":64,"column":1}},"children":[{"type":"text","value":"Find the cpus available","position":{"start":{"line":64,"column":1},"end":{"line":64,"column":1}},"key":"uE2gIdtuBU"}],"identifier":"find-the-cpus-available","label":"Find the cpus available","html_id":"find-the-cpus-available","implicit":true,"key":"Ta8L9TaCKM"},{"type":"paragraph","position":{"start":{"line":66,"column":1},"end":{"line":67,"column":1}},"children":[{"type":"text","value":"Find and print the number of cpus\n(taken from ","position":{"start":{"line":66,"column":1},"end":{"line":66,"column":1}},"key":"fD0XvEpbIj"},{"type":"link","url":"https://towardsdatascience.com/10x-faster-parallel-python-without-python-multiprocessing-e5017c93cce1","position":{"start":{"line":66,"column":1},"end":{"line":66,"column":1}},"children":[{"type":"text","value":"https://​towardsdatascience​.com​/10x​-faster​-parallel​-python​-without​-python​-multiprocessing​-e5017c93cce1","position":{"start":{"line":66,"column":1},"end":{"line":66,"column":1}},"key":"NLNAZPoe1k"}],"urlSource":"https://towardsdatascience.com/10x-faster-parallel-python-without-python-multiprocessing-e5017c93cce1","key":"c8BdZdRuCo"},{"type":"text","value":")","position":{"start":{"line":66,"column":1},"end":{"line":66,"column":1}},"key":"MhUkVkVVvL"}],"key":"hw8cosmfdv"}],"key":"BpnAeyEjtW"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"num_cpus = psutil.cpu_count(logical=True)\nprint(num_cpus)","key":"jUdLQ7d5cM"},{"type":"output","id":"zhj2MMvcKVF5xo_-woRd2","data":[],"key":"tnOS21WUI3"}],"key":"vsRm7otxVl"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"children":[{"type":"text","value":"Process serially using a conventional loop","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"key":"Aef8nGrlY3"}],"identifier":"process-serially-using-a-conventional-loop","label":"Process serially using a conventional loop","html_id":"process-serially-using-a-conventional-loop","implicit":true,"key":"uN2pkMTwrB"}],"key":"yRj9wesLIU"},{"type":"block","position":{"start":{"line":76,"column":1},"end":{"line":76,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"children":[{"type":"text","value":"Use ","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"key":"SyPMH3v34b"},{"type":"inlineCode","value":"scipy.signal","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"key":"heFhy6SwfC"},{"type":"text","value":" to convolve two 2-dimensional arrays and return a 5x5 downsampled result.","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"key":"BCHTPrvF2H"}],"key":"v9c6x8RBBA"}],"key":"qybcaxXNgc"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def fconv(image, random_filter):\n    return scipy.signal.convolve2d(image, random_filter)[::5, ::5]","key":"E7jeCFaA7F"},{"type":"output","id":"fySrY0qZFSuLRKLPRfC_J","data":[],"key":"sWSk7Un2s3"}],"key":"cj1vS5PxnI"},{"type":"block","children":[],"key":"XG6x1QCQdh"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"filters = [np.random.normal(size=(4, 4)) for _ in range(num_cpus)]","key":"rtzTl5Fx9K"},{"type":"output","id":"3kEdyGcTH0wZ1fpqJrPoE","data":[],"key":"oQW8cakNHM"}],"key":"wgXz9Vq1Pw"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":89,"column":1},"end":{"line":89,"column":1}},"children":[{"type":"text","value":"Process 100 iterations serially, then extrapolate to num_cpus*100","position":{"start":{"line":89,"column":1},"end":{"line":89,"column":1}},"key":"vo8ELSXdpj"}],"key":"TTkI9eEwSJ"}],"key":"jkxJ9pKlX4"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"start = time.time()\nnum_iter = 100\nimage = np.zeros((3000, 3000))\nfor i in range(num_iter):\n    result = fconv(image, filters[i % num_cpus])\nduration_conv = time.time() - start\nprint(\"(scaled) conventional duration for {:d} iterations = {:.1f} seconds\"\n      .format(num_cpus*num_iter, duration_conv*num_cpus))","key":"vG2CLmGR9B"},{"type":"output","id":"zjY6FMUiY_ZGy7LL08SIO","data":[],"key":"rI9F3xo2wE"}],"key":"DKXD8ouh5X"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":102,"column":1},"end":{"line":102,"column":1}},"children":[{"type":"text","value":"Process in parallel using Ray","position":{"start":{"line":102,"column":1},"end":{"line":102,"column":1}},"key":"zcnJgy5LU8"}],"identifier":"process-in-parallel-using-ray","label":"Process in parallel using Ray","html_id":"process-in-parallel-using-ray","implicit":true,"key":"JLgJopvjHY"}],"key":"PoJHpiftUe"},{"type":"block","position":{"start":{"line":104,"column":1},"end":{"line":104,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":106,"column":1},"end":{"line":106,"column":1}},"children":[{"type":"link","url":"https://docs.ray.io/en/latest/","position":{"start":{"line":106,"column":1},"end":{"line":106,"column":1}},"children":[{"type":"text","value":"Documentation for ray","position":{"start":{"line":106,"column":1},"end":{"line":106,"column":1}},"key":"ASvQlmqxmt"}],"urlSource":"https://docs.ray.io/en/latest/","key":"ORbvmfNBT6"}],"key":"NZI0F6wrTJ"}],"key":"lVmOiizyGo"},{"type":"block","position":{"start":{"line":108,"column":1},"end":{"line":108,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":110,"column":1},"end":{"line":110,"column":1}},"children":[{"type":"text","value":"The warning raised by ","position":{"start":{"line":110,"column":1},"end":{"line":110,"column":1}},"key":"B5Aodp3465"},{"type":"inlineCode","value":"ray.init","position":{"start":{"line":110,"column":1},"end":{"line":110,"column":1}},"key":"Wpd7pvrH2c"},{"type":"text","value":" only affects shared object usage, which is not an issue for this tutorial. It may harm performance in other scenarios.","position":{"start":{"line":110,"column":1},"end":{"line":110,"column":1}},"key":"p9JK0Dxf1N"}],"key":"mRB12D9kgp"}],"key":"AGsmGtsKel"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ray.init(num_cpus=num_cpus)","key":"mUZzPw4NFd"},{"type":"output","id":"o-oeLKmD9DBvWNsburswv","data":[],"key":"O3s7IEaO7a"}],"key":"zFQBmbVpPm"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":116,"column":1},"end":{"line":116,"column":1}},"children":[{"type":"text","value":"Use ","position":{"start":{"line":116,"column":1},"end":{"line":116,"column":1}},"key":"WhFvsgRI64"},{"type":"inlineCode","value":"scipy.signal","position":{"start":{"line":116,"column":1},"end":{"line":116,"column":1}},"key":"nPaYUrfJHl"},{"type":"text","value":" to convolve two 2-dimensional arrays and return a 5x5 downsampled result. To use Ray, we decorate the function that is doing the work.","position":{"start":{"line":116,"column":1},"end":{"line":116,"column":1}},"key":"akzu9cQUTx"}],"key":"xsB3Pk7aO7"}],"key":"jDo0qmd0TH"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"@ray.remote\ndef fray(image, random_filter):\n    return scipy.signal.convolve2d(image, random_filter)[::5, ::5]","key":"bf5U0s1cqV"},{"type":"output","id":"QPQOLZLdQfB8f5-LVTPZw","data":[],"key":"x4LDc8fDPo"}],"key":"qCvQ23itFx"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"children":[{"type":"text","value":"In the following loop, ","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"key":"WoPGERNkZw"},{"type":"inlineCode","value":"ray.put","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"key":"SkNAjcH2xt"},{"type":"text","value":" places the image into shared memory. The call to ","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"key":"hZFOQ5hRYQ"},{"type":"inlineCode","value":"ray.get","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"key":"h84Q96Hkoj"},{"type":"text","value":" retrieves the result.","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"key":"iLcg96TAnA"}],"key":"qMbijRyhOe"}],"key":"n4ZK21aGm1"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"start = time.time()\nimage = np.zeros((3000, 3000))\nfor _ in range(100):\n    image_id = ray.put(image)\n    ray.get([fray.remote(image_id, filters[i]) for i in range(num_cpus)])\nduration_ray = time.time() - start\nprint(\"Ray duration = {:.1f}, speedup = {:.2f}\"\n      .format(duration_ray, duration_conv*num_cpus / duration_ray))","key":"herbzciYsO"},{"type":"output","id":"0UIuOfJ-E4s3gdW3zU63L","data":[],"key":"tlGfjwzJM1"}],"key":"fdO9cevA6A"},{"type":"block","children":[],"key":"tKEWmlkPnL"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ray.shutdown()","key":"RJeiHA7RVf"},{"type":"output","id":"NVHyoa3lTsx6Cq6aMv0Hd","data":[],"key":"Lw7cyWlj1M"}],"key":"stBbopdbGj"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":141,"column":1},"end":{"line":141,"column":1}},"children":[{"type":"text","value":"Process in parallel using multiprocessing","position":{"start":{"line":141,"column":1},"end":{"line":141,"column":1}},"key":"Blnn8oMX6f"}],"identifier":"process-in-parallel-using-multiprocessing","label":"Process in parallel using multiprocessing","html_id":"process-in-parallel-using-multiprocessing","implicit":true,"key":"wEb1OV1BgR"}],"key":"y6stvDEqI3"},{"type":"block","position":{"start":{"line":143,"column":1},"end":{"line":143,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":145,"column":1},"end":{"line":145,"column":1}},"children":[{"type":"link","url":"https://docs.python.org/3/library/multiprocessing.html","position":{"start":{"line":145,"column":1},"end":{"line":145,"column":1}},"children":[{"type":"text","value":"Documentation for multiprocessing","position":{"start":{"line":145,"column":1},"end":{"line":145,"column":1}},"key":"aWEuzhjDai"}],"urlSource":"https://docs.python.org/3/library/multiprocessing.html","key":"ye2DjufwN1"}],"key":"rbj1Fz1pRi"}],"key":"WCUq1ja0wU"},{"type":"block","position":{"start":{"line":147,"column":1},"end":{"line":147,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":149,"column":1},"end":{"line":149,"column":1}},"children":[{"type":"text","value":"Use ","position":{"start":{"line":149,"column":1},"end":{"line":149,"column":1}},"key":"IjJVz9ix4Z"},{"type":"inlineCode","value":"scipy.signal","position":{"start":{"line":149,"column":1},"end":{"line":149,"column":1}},"key":"GbHj3pEOEq"},{"type":"text","value":" to convolve two 2-dimensional arrays and return a 5x5 downsampled result. The call to the function has a slightly different form than that for the serial loop.","position":{"start":{"line":149,"column":1},"end":{"line":149,"column":1}},"key":"EGSPHpwhTp"}],"key":"V2mC41fK9C"}],"key":"Pgeqsz3MBX"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Note: Mac and Windows users may need to copy the contents of this cell into a separate '.py' file\n# and then import it in order to use the `fmp` function with `multiprocessing`. This has to do with\n# differences in what does / does not get copied into the child processes in different operating systems.\nimport scipy.signal\n\ndef fmp(args):\n    image, random_filter = args\n    return scipy.signal.convolve2d(image, random_filter)[::5, ::5]","key":"eQ7lbriBZZ"},{"type":"output","id":"WrWwhyf7zM17smVNNBAei","data":[],"key":"mGey8jisul"}],"key":"LlrHEMFY0D"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":162,"column":1},"end":{"line":162,"column":1}},"children":[{"type":"text","value":"Use a multiprocessing pool with the number of cpus we found earlier.","position":{"start":{"line":162,"column":1},"end":{"line":162,"column":1}},"key":"uYCPpdQtei"}],"key":"oxyaekhj6B"}],"key":"cKqX1cEqC1"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"pool = Pool(num_cpus)","key":"HHx16MebXY"},{"type":"output","id":"anJ2VgJKiIaIb-F8oSbyK","data":[],"key":"AHnJA3svju"}],"key":"z9xPY7aSE1"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":168,"column":1},"end":{"line":168,"column":1}},"children":[{"type":"text","value":"Using ","position":{"start":{"line":168,"column":1},"end":{"line":168,"column":1}},"key":"ZZTRFJ8HOX"},{"type":"inlineCode","value":"pool.map","position":{"start":{"line":168,"column":1},"end":{"line":168,"column":1}},"key":"qGB9MmoHSa"},{"type":"text","value":" is the closest analog in multiprocessing to the Ray API.","position":{"start":{"line":168,"column":1},"end":{"line":168,"column":1}},"key":"mFV34WmGUZ"}],"key":"FfBmz3qraQ"}],"key":"n1X7rjhBIC"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"start = time.time()\nimage = np.zeros((3000, 3000))\nfor _ in range(100):\n    pool.map(fmp, zip(num_cpus * [image], filters))\nduration_mp = time.time() - start\nprint(\"Multiprocessing duration = {:.1f}, speedup = {:.2f}\"\n      .format(duration_mp, duration_conv*num_cpus / duration_mp))","key":"UsELvj7tv9"},{"type":"output","id":"F6XF5kvr6JBpFwTdVlJm7","data":[],"key":"CW0JrgS3kH"}],"key":"Vwh3DGAkfd"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":180,"column":1},"end":{"line":180,"column":1}},"children":[{"type":"text","value":"Process using Dask","position":{"start":{"line":180,"column":1},"end":{"line":180,"column":1}},"key":"t8yFE771P5"}],"identifier":"process-using-dask","label":"Process using Dask","html_id":"process-using-dask","implicit":true,"key":"DtQiWxDCcc"}],"key":"SSdywFnI2U"},{"type":"block","position":{"start":{"line":182,"column":1},"end":{"line":182,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":184,"column":1},"end":{"line":184,"column":1}},"children":[{"type":"link","url":"https://www.dask.org/get-started","position":{"start":{"line":184,"column":1},"end":{"line":184,"column":1}},"children":[{"type":"text","value":"Documentation for Dask","position":{"start":{"line":184,"column":1},"end":{"line":184,"column":1}},"key":"Eux9AvD6V7"}],"urlSource":"https://www.dask.org/get-started","key":"LUdaR5Z1kO"}],"key":"RrthvQhdFP"}],"key":"q7ZTqdTdFp"},{"type":"block","position":{"start":{"line":186,"column":1},"end":{"line":186,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":188,"column":1},"end":{"line":188,"column":1}},"children":[{"type":"text","value":"Define a Dask distributed client with number of workers set to the number of cpus we found earlier, and with one thread per worker.","position":{"start":{"line":188,"column":1},"end":{"line":188,"column":1}},"key":"S7PN9DqgnD"}],"key":"DAkE4j7qjp"}],"key":"r4TPQ8P7uV"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"client = Client(n_workers=num_cpus, threads_per_worker=1)","key":"aBx0CWko0l"},{"type":"output","id":"GWa8mN6_2kRUMz9XRBddo","data":[],"key":"k3MYRmCqQR"}],"key":"KXKbSYmxPF"},{"type":"block","children":[],"key":"x3WvIbETlY"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"print(client)","key":"J7TxyxHOTs"},{"type":"output","id":"Hs6sSW5iErDWjEH5WzMXR","data":[],"key":"GaRw2CwwGy"}],"key":"rbynF4mek2"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":198,"column":1},"end":{"line":198,"column":1}},"children":[{"type":"text","value":"Dask recommends scattering the large inputs across the workers, though this makes little difference in execution time.","position":{"start":{"line":198,"column":1},"end":{"line":198,"column":1}},"key":"ScZoGqGSc2"}],"key":"Z1RORSJzAo"}],"key":"IIaDOdbiJP"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"start = time.time()\nimage = np.zeros((3000, 3000))\nfor _ in range(100):\n    for j in range(num_cpus):\n        big_future = client.scatter((image, filters[j % num_cpus]))\n        future = client.submit(fmp, big_future)\nduration_dask = time.time() - start\nprint(\"Dask duration = {:.1f}, speedup = {:.2f}\"\n      .format(duration_dask, duration_conv*num_cpus / duration_dask))","key":"HQ1qbhtH2u"},{"type":"output","id":"H2LZ6GPIDXeeq1UC3UcZB","data":[],"key":"yg3KJy2jmu"}],"key":"ritPVw0e6M"},{"type":"block","children":[],"key":"p7nGoiO1WU"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"client.close()","key":"DxNNZNghTZ"},{"type":"output","id":"g9BBeTM7-N2mHJYmRW_o5","data":[],"key":"y8StWqjGqL"}],"key":"uemTUbpL8g"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":216,"column":1},"end":{"line":216,"column":1}},"children":[{"type":"text","value":"Conclusions","position":{"start":{"line":216,"column":1},"end":{"line":216,"column":1}},"key":"XEl65RyaPz"}],"identifier":"conclusions","label":"Conclusions","html_id":"conclusions","implicit":true,"key":"chgYSIGJrJ"}],"key":"HMB1J21N6H"},{"type":"block","position":{"start":{"line":218,"column":1},"end":{"line":218,"column":1}},"children":[{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":220,"column":1},"end":{"line":223,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":220,"column":1},"end":{"line":220,"column":1}},"children":[{"type":"text","value":"Ray is the most effective at speeding up the convolution workload by fully utilizing all available processes","position":{"start":{"line":220,"column":1},"end":{"line":220,"column":1}},"key":"tT5LfJmn6v"}],"key":"BF3Z02AwFc"},{"type":"listItem","spread":true,"position":{"start":{"line":221,"column":1},"end":{"line":221,"column":1}},"children":[{"type":"text","value":"Multiprocessing is second in effectiveness","position":{"start":{"line":221,"column":1},"end":{"line":221,"column":1}},"key":"Nrf5sQ7SPD"}],"key":"jg62qbFkoD"},{"type":"listItem","spread":true,"position":{"start":{"line":222,"column":1},"end":{"line":223,"column":1}},"children":[{"type":"text","value":"Dask delivers the least speedup; perhaps due to having only six processes on the dask.distributed client","position":{"start":{"line":222,"column":1},"end":{"line":222,"column":1}},"key":"lpp6ZHJ15Z"}],"key":"RbkwgvNLEr"}],"key":"xYoVIMlqZS"}],"key":"LykRhFMAiF"},{"type":"block","position":{"start":{"line":224,"column":1},"end":{"line":224,"column":1}},"children":[{"type":"thematicBreak","position":{"start":{"line":225,"column":1},"end":{"line":225,"column":1}},"key":"KCJlutnWpK"},{"type":"heading","depth":2,"position":{"start":{"line":227,"column":1},"end":{"line":227,"column":1}},"children":[{"type":"text","value":"About this notebook","position":{"start":{"line":227,"column":1},"end":{"line":227,"column":1}},"key":"b596hHDbq2"}],"identifier":"about-this-notebook","label":"About this notebook","html_id":"about-this-notebook","implicit":true,"key":"xXMb8Wzrwv"},{"type":"paragraph","position":{"start":{"line":229,"column":1},"end":{"line":229,"column":1}},"children":[{"type":"strong","position":{"start":{"line":229,"column":1},"end":{"line":229,"column":1}},"children":[{"type":"text","value":"Author:","position":{"start":{"line":229,"column":1},"end":{"line":229,"column":1}},"key":"susChBBnhY"}],"key":"KFRifSaXcP"},{"type":"text","value":" David Shupe in conjunction with Jessica Krick and the IRSA Science Platform team at IPAC.","position":{"start":{"line":229,"column":1},"end":{"line":229,"column":1}},"key":"QlzPFsaJhk"}],"key":"m9hHDcXwM3"},{"type":"paragraph","position":{"start":{"line":231,"column":1},"end":{"line":231,"column":1}},"children":[{"type":"strong","position":{"start":{"line":231,"column":1},"end":{"line":231,"column":1}},"children":[{"type":"text","value":"Updated:","position":{"start":{"line":231,"column":1},"end":{"line":231,"column":1}},"key":"WSeYbuShJU"}],"key":"hddIqW1baG"},{"type":"text","value":" 2024-09-24","position":{"start":{"line":231,"column":1},"end":{"line":231,"column":1}},"key":"osFL2vcxBB"}],"key":"CNDpyxzDps"},{"type":"paragraph","position":{"start":{"line":233,"column":1},"end":{"line":233,"column":1}},"children":[{"type":"strong","position":{"start":{"line":233,"column":1},"end":{"line":233,"column":1}},"children":[{"type":"text","value":"Contact:","position":{"start":{"line":233,"column":1},"end":{"line":233,"column":1}},"key":"KjFfHeAgo4"}],"key":"DMLBTXMs1p"},{"type":"text","value":" ","position":{"start":{"line":233,"column":1},"end":{"line":233,"column":1}},"key":"KcIF2AkL0i"},{"type":"link","url":"https://irsa.ipac.caltech.edu/docs/help_desk.html","position":{"start":{"line":233,"column":1},"end":{"line":233,"column":1}},"children":[{"type":"text","value":"the IRSA Helpdesk","position":{"start":{"line":233,"column":1},"end":{"line":233,"column":1}},"key":"j4PTkgPMzs"}],"urlSource":"https://irsa.ipac.caltech.edu/docs/help_desk.html","key":"SnN7e0jXM3"},{"type":"text","value":" with questions or reporting problems.","position":{"start":{"line":233,"column":1},"end":{"line":233,"column":1}},"key":"JCtNiC4Z8f"}],"key":"D6wPj7lYze"},{"type":"heading","depth":2,"position":{"start":{"line":235,"column":1},"end":{"line":235,"column":1}},"children":[{"type":"text","value":"Citations","position":{"start":{"line":235,"column":1},"end":{"line":235,"column":1}},"key":"qnUUsofNmc"}],"identifier":"citations","label":"Citations","html_id":"citations","implicit":true,"key":"YjK5ZrN1sI"},{"type":"paragraph","position":{"start":{"line":237,"column":1},"end":{"line":237,"column":1}},"children":[{"type":"text","value":"If you use these software packages in your work, please use the following citations:","position":{"start":{"line":237,"column":1},"end":{"line":237,"column":1}},"key":"yHqYFbOjYC"}],"key":"GLivTPrr8J"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":239,"column":1},"end":{"line":241,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":239,"column":1},"end":{"line":239,"column":1}},"children":[{"type":"text","value":"Dask: Dask Development Team (2016). Dask: Library for dynamic task scheduling. URL ","position":{"start":{"line":239,"column":1},"end":{"line":239,"column":1}},"key":"hTi91M2ZsC"},{"type":"link","url":"https://dask.org","position":{"start":{"line":239,"column":1},"end":{"line":239,"column":1}},"children":[{"type":"text","value":"https://dask.org","position":{"start":{"line":239,"column":1},"end":{"line":239,"column":1}},"key":"W4C45KBX41"}],"urlSource":"https://dask.org","key":"BoPxWLi19l"}],"key":"icxwbzCQZy"},{"type":"listItem","spread":true,"position":{"start":{"line":240,"column":1},"end":{"line":241,"column":1}},"children":[{"type":"text","value":"Ray: The Ray Development Team. URL ","position":{"start":{"line":240,"column":1},"end":{"line":240,"column":1}},"key":"MVWGSM1w7N"},{"type":"link","url":"https://docs.ray.io","position":{"start":{"line":240,"column":1},"end":{"line":240,"column":1}},"children":[{"type":"text","value":"https://docs.ray.io","position":{"start":{"line":240,"column":1},"end":{"line":240,"column":1}},"key":"RKfeAGse4G"}],"urlSource":"https://docs.ray.io","key":"toxQbYLZFp"}],"key":"TYcmeT5Cin"}],"key":"PtlulNGiUS"}],"key":"M8w0dcuCG7"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"","key":"t8gBbN7IC4"},{"type":"output","id":"MFuCo9_g8od5fUjtGqCjr","data":[],"key":"CZ7vgGRHLj"}],"key":"iPd60pWhgh"}],"key":"zUXIxoIYj2"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Using Firefly visualization tools in Python to vet SEDs","url":"/seds-in-firefly","group":"Special Topics"}}},"domain":"http://localhost:3000"}