{"version":2,"kind":"Notebook","sha256":"68ed43783b40185a1d4ef25d932e183e199dbd7cced5bf15a0f3832b8de94912","slug":"parallelize-convolution","location":"/tutorials/parallelize/Parallelize_Convolution.md","dependencies":[],"frontmatter":{"title":"Parallelizing image convolution","kernelspec":{"name":"python3","display_name":"Python [conda env:clonenv]","language":"python"},"jupytext":{"text_representation":{"extension":".md","format_name":"myst","format_version":"0.13","jupytext_version":"1.16.2"}},"skip_execution":true,"content_includes_title":false,"authors":[{"id":"IRSA Scientists and Developers","name":"IRSA Scientists and Developers"}],"github":"https://github.com/Caltech-IPAC/irsa-tutorials/","subject":"IRSA Tutorials","keywords":["astronomy"],"settings":{"output_matplotlib_strings":"remove"},"numbering":{"title":{"offset":1}},"edit_url":"https://github.com/Caltech-IPAC/irsa-tutorials//blob/main/tutorials/parallelize/Parallelize_Convolution.md","exports":[{"format":"md","filename":"Parallelize_Convolution.md","url":"/irsa-tutorials/build/Parallelize_Convolut-d630d76e719994cf09943fae387624b2.md"}]},"mdast":{"type":"root","children":[{"type":"block","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"heading","depth":2,"position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"text","value":"Learning Goals","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"ix7xf3X04N"}],"identifier":"learning-goals","label":"Learning Goals","html_id":"learning-goals","implicit":true,"key":"ve5Z7OwQr1"},{"type":"paragraph","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"children":[{"type":"text","value":"By the end of this tutorial, you will be able to:","position":{"start":{"line":21,"column":1},"end":{"line":21,"column":1}},"key":"Fshwk6TJFL"}],"key":"NAeYGLrTeo"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":23,"column":1},"end":{"line":26,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"children":[{"type":"text","value":"Employ three parallelization libraries to speed up a serial process.","position":{"start":{"line":23,"column":1},"end":{"line":23,"column":1}},"key":"pHRxfoVgQ1"}],"key":"YDGWnogRF2"},{"type":"listItem","spread":true,"position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"children":[{"type":"text","value":"Calculate the speedup of the different approaches shown.","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"key":"JvCno4gTQQ"}],"key":"sflijWfpIy"},{"type":"listItem","spread":true,"position":{"start":{"line":25,"column":1},"end":{"line":26,"column":1}},"children":[{"type":"text","value":"Evaluate which library is suited to your task.","position":{"start":{"line":25,"column":1},"end":{"line":25,"column":1}},"key":"y09Vyypxj4"}],"key":"ATGMjQnAM1"}],"key":"FPsStSQShc"}],"key":"iOkGayEnLN"},{"type":"block","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"children":[{"type":"heading","depth":2,"position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"children":[{"type":"text","value":"Introduction","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"Y0fqe3R0xy"}],"identifier":"introduction","label":"Introduction","html_id":"introduction","implicit":true,"key":"QLJe3jYWNT"},{"type":"paragraph","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"children":[{"type":"text","value":"This notebook shows how to speed up an image convolution task using these three libraries:","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"key":"ibJfFztCd4"}],"key":"oA6VucFuT4"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":33,"column":1},"end":{"line":36,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"children":[{"type":"text","value":"Ray: an open-source unified compute framework that makes it easy to scale AI and Python workloads.","position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"key":"GjbhwviTzz"}],"key":"MOQeOXon7o"},{"type":"listItem","spread":true,"position":{"start":{"line":34,"column":1},"end":{"line":34,"column":1}},"children":[{"type":"text","value":"Multiprocessing: part of the standard library; supports spawning processes using an API similar to the threading module; offers both local and remote concurrency, effectively side-stepping the Global Interpreter Lock by using subprocesses instead of threads.","position":{"start":{"line":34,"column":1},"end":{"line":34,"column":1}},"key":"eqc4o7oDzS"}],"key":"Bk57oJuSkz"},{"type":"listItem","spread":true,"position":{"start":{"line":35,"column":1},"end":{"line":36,"column":1}},"children":[{"type":"text","value":"Dask: developed to natively scale computational packages like numpy, pandas and scikit-learn, and the surrounding ecosystem, to multi-core machines and distributed clusters when datasets exceed memory.","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"zqfs3qBoUJ"}],"key":"bN5KqZPNmK"}],"key":"oTP8UqYndG"}],"key":"eLY6XCuupP"},{"type":"block","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"children":[{"type":"heading","depth":2,"position":{"start":{"line":39,"column":1},"end":{"line":39,"column":1}},"children":[{"type":"text","value":"Imports","position":{"start":{"line":39,"column":1},"end":{"line":39,"column":1}},"key":"h0bOvp7FSS"}],"identifier":"imports","label":"Imports","html_id":"imports","implicit":true,"key":"Jd4mIkg54B"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":41,"column":1},"end":{"line":47,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"children":[{"type":"text","value":"multiprocessing.Pool","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"key":"MWyX1lIZAj"}],"key":"hYM2uELvN2"},{"type":"text","value":" for multiprocessing using the standard library","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"key":"W1CEGYo2qX"}],"key":"sHmunzQ4Fv"},{"type":"listItem","spread":true,"position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"children":[{"type":"text","value":"time","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"key":"WpBbrCfUCs"}],"key":"jcxLW8urWL"},{"type":"text","value":" for timing the processes","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"key":"wwmVMErcGg"}],"key":"IcH4eR3fP2"},{"type":"listItem","spread":true,"position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"children":[{"type":"text","value":"dask.distributed.Client","position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"key":"yqdDpswkJS"}],"key":"WhHOH4vkPp"},{"type":"text","value":" for making a local Dask cluster","position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"key":"FfeecvB6ZT"}],"key":"nheVkN6Soe"},{"type":"listItem","spread":true,"position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"children":[{"type":"text","value":"numpy","position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"key":"sN9HeNTroz"}],"key":"OvzXRVQwGM"},{"type":"text","value":" and ","position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"key":"vieywmVzlp"},{"type":"emphasis","position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"children":[{"type":"text","value":"scipy.signal","position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"key":"qssZAGCV5E"}],"key":"zLml4JEZAx"},{"type":"text","value":" for numerical work","position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"key":"kyO241ELhu"}],"key":"tpUKCXSLRG"},{"type":"listItem","spread":true,"position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"children":[{"type":"text","value":"psutil","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"key":"U57bQdSCZG"}],"key":"yPGoO279gj"},{"type":"text","value":" for finding the available processors on your machine","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"key":"tDV1QZKdE2"}],"key":"x6q1RsAB3J"},{"type":"listItem","spread":true,"position":{"start":{"line":46,"column":1},"end":{"line":47,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":46,"column":1},"end":{"line":46,"column":1}},"children":[{"type":"text","value":"ray","position":{"start":{"line":46,"column":1},"end":{"line":46,"column":1}},"key":"DjXf2D55hF"}],"key":"oJSPWm0WQ9"},{"type":"text","value":" for scaling up Python tasks","position":{"start":{"line":46,"column":1},"end":{"line":46,"column":1}},"key":"p3k1y1n9x9"}],"key":"zpeas7lMGE"}],"key":"OI4uvLISiU"}],"key":"wXGK1YTqme"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Uncomment the next line to install dependencies if needed.\n# !pip install dask[distributed] numpy ray scipy","key":"yvfl1l0GGk"},{"type":"output","id":"AYWm4UNeR-ie7T3deiy7P","data":[],"key":"zVkEUoEGaw"}],"key":"ZjKTTH0wvJ"},{"type":"block","children":[],"key":"UQCVswqsXp"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from multiprocessing import Pool\nimport time\n\nfrom dask.distributed import Client\nimport numpy as np\nimport psutil\nimport scipy.signal\nimport ray","key":"b7ozCjDC0l"},{"type":"output","id":"UkA3P1srRQV2KQJt59xS8","data":[],"key":"xsE8xWV6cE"}],"key":"HRJgHv3kZC"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":64,"column":1},"end":{"line":64,"column":1}},"children":[{"type":"text","value":"Find the cpus available","position":{"start":{"line":64,"column":1},"end":{"line":64,"column":1}},"key":"fJxKiflMwB"}],"identifier":"find-the-cpus-available","label":"Find the cpus available","html_id":"find-the-cpus-available","implicit":true,"key":"a40MfGOF1a"},{"type":"paragraph","position":{"start":{"line":66,"column":1},"end":{"line":67,"column":1}},"children":[{"type":"text","value":"Find and print the number of cpus\n(taken from ","position":{"start":{"line":66,"column":1},"end":{"line":66,"column":1}},"key":"Ih0ynwIeJF"},{"type":"link","url":"https://towardsdatascience.com/10x-faster-parallel-python-without-python-multiprocessing-e5017c93cce1","position":{"start":{"line":66,"column":1},"end":{"line":66,"column":1}},"children":[{"type":"text","value":"https://​towardsdatascience​.com​/10x​-faster​-parallel​-python​-without​-python​-multiprocessing​-e5017c93cce1","position":{"start":{"line":66,"column":1},"end":{"line":66,"column":1}},"key":"vup8eZ1ZKs"}],"urlSource":"https://towardsdatascience.com/10x-faster-parallel-python-without-python-multiprocessing-e5017c93cce1","key":"h9V10HYk3c"},{"type":"text","value":")","position":{"start":{"line":66,"column":1},"end":{"line":66,"column":1}},"key":"j1a7MY1Gg3"}],"key":"a18Jt9BhQ4"}],"key":"gedIYCXSSc"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"num_cpus = psutil.cpu_count(logical=True)\nprint(num_cpus)","key":"Xls3XhqS98"},{"type":"output","id":"Mr0i-RP3rNSXB6V4OYQpW","data":[],"key":"dtMQmQu75Q"}],"key":"ddtz4sZD20"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"children":[{"type":"text","value":"Process serially using a conventional loop","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"key":"gz2h25FtwT"}],"identifier":"process-serially-using-a-conventional-loop","label":"Process serially using a conventional loop","html_id":"process-serially-using-a-conventional-loop","implicit":true,"key":"uIY9AvqnRI"}],"key":"aXHW24hEZ9"},{"type":"block","position":{"start":{"line":76,"column":1},"end":{"line":76,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"children":[{"type":"text","value":"Use ","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"key":"avPlHzBMLX"},{"type":"inlineCode","value":"scipy.signal","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"key":"NS3ydjuscp"},{"type":"text","value":" to convolve two 2-dimensional arrays and return a 5x5 downsampled result.","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"key":"lMvcQbHufl"}],"key":"dV4xrExFiI"}],"key":"KUuOBTBREp"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def fconv(image, random_filter):\n    return scipy.signal.convolve2d(image, random_filter)[::5, ::5]","key":"SvL8C4hYrm"},{"type":"output","id":"crK8PDB5Enk3DYxncxWzz","data":[],"key":"ngVX85vqFS"}],"key":"hmAThmw4wk"},{"type":"block","children":[],"key":"AEZxQ2mj3b"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"filters = [np.random.normal(size=(4, 4)) for _ in range(num_cpus)]","key":"j4I3YcCOhJ"},{"type":"output","id":"ETOzmujs3dm4TjcmZ7sc7","data":[],"key":"LK382Erin2"}],"key":"ORIh0I54v9"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":89,"column":1},"end":{"line":89,"column":1}},"children":[{"type":"text","value":"Process 100 iterations serially, then extrapolate to num_cpus*100","position":{"start":{"line":89,"column":1},"end":{"line":89,"column":1}},"key":"oAk1h2OASC"}],"key":"rRI4J3Ek8V"}],"key":"Jyo3PkzzaD"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"start = time.time()\nnum_iter = 100\nimage = np.zeros((3000, 3000))\nfor i in range(num_iter):\n    result = fconv(image, filters[i % num_cpus])\nduration_conv = time.time() - start\nprint(\"(scaled) conventional duration for {:d} iterations = {:.1f} seconds\"\n      .format(num_cpus*num_iter, duration_conv*num_cpus))","key":"liUt0hyr34"},{"type":"output","id":"Ya35w3Xk0UCNzI4uD7zbJ","data":[],"key":"Tnrlu6V7gS"}],"key":"IQAHfBy9zW"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":102,"column":1},"end":{"line":102,"column":1}},"children":[{"type":"text","value":"Process in parallel using Ray","position":{"start":{"line":102,"column":1},"end":{"line":102,"column":1}},"key":"yDwaTpbtDt"}],"identifier":"process-in-parallel-using-ray","label":"Process in parallel using Ray","html_id":"process-in-parallel-using-ray","implicit":true,"key":"WgE8JM1vaF"}],"key":"FL7ZizK9SV"},{"type":"block","position":{"start":{"line":104,"column":1},"end":{"line":104,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":106,"column":1},"end":{"line":106,"column":1}},"children":[{"type":"link","url":"https://docs.ray.io/en/latest/","position":{"start":{"line":106,"column":1},"end":{"line":106,"column":1}},"children":[{"type":"text","value":"Documentation for ray","position":{"start":{"line":106,"column":1},"end":{"line":106,"column":1}},"key":"PUaZ1n4Ct2"}],"urlSource":"https://docs.ray.io/en/latest/","key":"s8pCQHyNvU"}],"key":"gyN0dJLLQV"}],"key":"je9cKe3R75"},{"type":"block","position":{"start":{"line":108,"column":1},"end":{"line":108,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":110,"column":1},"end":{"line":110,"column":1}},"children":[{"type":"text","value":"The warning raised by ","position":{"start":{"line":110,"column":1},"end":{"line":110,"column":1}},"key":"wxJ52TXiF0"},{"type":"inlineCode","value":"ray.init","position":{"start":{"line":110,"column":1},"end":{"line":110,"column":1}},"key":"aUZkk3Bc71"},{"type":"text","value":" only affects shared object usage, which is not an issue for this tutorial. It may harm performance in other scenarios.","position":{"start":{"line":110,"column":1},"end":{"line":110,"column":1}},"key":"fh5QCXUmQP"}],"key":"saXvI6HddP"}],"key":"vXNfVfswgi"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ray.init(num_cpus=num_cpus)","key":"QilzEJp65E"},{"type":"output","id":"T-l5lKOy3v5z9VPoLHu0m","data":[],"key":"deQj8P3Zh7"}],"key":"TMdwRvNJAW"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":116,"column":1},"end":{"line":116,"column":1}},"children":[{"type":"text","value":"Use ","position":{"start":{"line":116,"column":1},"end":{"line":116,"column":1}},"key":"ie34Vq1NyU"},{"type":"inlineCode","value":"scipy.signal","position":{"start":{"line":116,"column":1},"end":{"line":116,"column":1}},"key":"OCIxgdkixo"},{"type":"text","value":" to convolve two 2-dimensional arrays and return a 5x5 downsampled result. To use Ray, we decorate the function that is doing the work.","position":{"start":{"line":116,"column":1},"end":{"line":116,"column":1}},"key":"ANKE9imEpa"}],"key":"IKcM8vff47"}],"key":"CGPPBVsUEd"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"@ray.remote\ndef fray(image, random_filter):\n    return scipy.signal.convolve2d(image, random_filter)[::5, ::5]","key":"kMhoeRhEBT"},{"type":"output","id":"zzdQAW62BaNuXquDmvWBS","data":[],"key":"fcuu0NNMhe"}],"key":"nNYSPH1j3m"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"children":[{"type":"text","value":"In the following loop, ","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"key":"jdVKV75iyg"},{"type":"inlineCode","value":"ray.put","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"key":"T0czd8g7p3"},{"type":"text","value":" places the image into shared memory. The call to ","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"key":"Atqnga1KyF"},{"type":"inlineCode","value":"ray.get","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"key":"DSG9ArvEjI"},{"type":"text","value":" retrieves the result.","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"key":"KCzltTJFqD"}],"key":"G6ZfRVqGad"}],"key":"gvT0udQI13"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"start = time.time()\nimage = np.zeros((3000, 3000))\nfor _ in range(100):\n    image_id = ray.put(image)\n    ray.get([fray.remote(image_id, filters[i]) for i in range(num_cpus)])\nduration_ray = time.time() - start\nprint(\"Ray duration = {:.1f}, speedup = {:.2f}\"\n      .format(duration_ray, duration_conv*num_cpus / duration_ray))","key":"Ngn2W0eb9r"},{"type":"output","id":"UGmLgs2JKzMw_zcasRuOO","data":[],"key":"u9mdw0KQJb"}],"key":"jWYu32JUt4"},{"type":"block","children":[],"key":"VjABjWIpwD"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ray.shutdown()","key":"QrHH3E6thB"},{"type":"output","id":"ZpQNEKbiK2oCMcV4JYSGo","data":[],"key":"w6N3e2IbzN"}],"key":"EqOA15nvvc"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":141,"column":1},"end":{"line":141,"column":1}},"children":[{"type":"text","value":"Process in parallel using multiprocessing","position":{"start":{"line":141,"column":1},"end":{"line":141,"column":1}},"key":"qjjKT4ohsF"}],"identifier":"process-in-parallel-using-multiprocessing","label":"Process in parallel using multiprocessing","html_id":"process-in-parallel-using-multiprocessing","implicit":true,"key":"p9Z5ClMvkK"}],"key":"S2ON6oCrEo"},{"type":"block","position":{"start":{"line":143,"column":1},"end":{"line":143,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":145,"column":1},"end":{"line":145,"column":1}},"children":[{"type":"link","url":"https://docs.python.org/3/library/multiprocessing.html","position":{"start":{"line":145,"column":1},"end":{"line":145,"column":1}},"children":[{"type":"text","value":"Documentation for multiprocessing","position":{"start":{"line":145,"column":1},"end":{"line":145,"column":1}},"key":"TquoRnJ13Y"}],"urlSource":"https://docs.python.org/3/library/multiprocessing.html","key":"UcPPD4EHBe"}],"key":"VNLg2TUu1G"}],"key":"GSoOhyiAAI"},{"type":"block","position":{"start":{"line":147,"column":1},"end":{"line":147,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":149,"column":1},"end":{"line":149,"column":1}},"children":[{"type":"text","value":"Use ","position":{"start":{"line":149,"column":1},"end":{"line":149,"column":1}},"key":"kfDBuW3lFZ"},{"type":"inlineCode","value":"scipy.signal","position":{"start":{"line":149,"column":1},"end":{"line":149,"column":1}},"key":"uFAHAckE8x"},{"type":"text","value":" to convolve two 2-dimensional arrays and return a 5x5 downsampled result. The call to the function has a slightly different form than that for the serial loop.","position":{"start":{"line":149,"column":1},"end":{"line":149,"column":1}},"key":"PDNW2xo1Fu"}],"key":"bOjH98jLFD"}],"key":"MapA4T7xBz"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Note: Mac and Windows users may need to copy the contents of this cell into a separate '.py' file\n# and then import it in order to use the `fmp` function with `multiprocessing`. This has to do with\n# differences in what does / does not get copied into the child processes in different operating systems.\nimport scipy.signal\n\ndef fmp(args):\n    image, random_filter = args\n    return scipy.signal.convolve2d(image, random_filter)[::5, ::5]","key":"sh9A3R9V2Z"},{"type":"output","id":"TU67xz8XNl9BeUshV8B_b","data":[],"key":"s9Qhv5EyzE"}],"key":"IYovg8mojC"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":162,"column":1},"end":{"line":162,"column":1}},"children":[{"type":"text","value":"Use a multiprocessing pool with the number of cpus we found earlier.","position":{"start":{"line":162,"column":1},"end":{"line":162,"column":1}},"key":"hLwkaX7Xr5"}],"key":"eWlhXt1TgV"}],"key":"RQ0GWhpNKq"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"pool = Pool(num_cpus)","key":"Kpxk930Zkd"},{"type":"output","id":"_IZSD04rVdCpJ_xgk8MiA","data":[],"key":"GpLm2a0JdT"}],"key":"NpHrem76ad"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":168,"column":1},"end":{"line":168,"column":1}},"children":[{"type":"text","value":"Using ","position":{"start":{"line":168,"column":1},"end":{"line":168,"column":1}},"key":"tszXzzeVMG"},{"type":"inlineCode","value":"pool.map","position":{"start":{"line":168,"column":1},"end":{"line":168,"column":1}},"key":"f8fAGOVd7F"},{"type":"text","value":" is the closest analog in multiprocessing to the Ray API.","position":{"start":{"line":168,"column":1},"end":{"line":168,"column":1}},"key":"dLztVyt0SN"}],"key":"tH2taqPHFG"}],"key":"pmD1zkefIX"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"start = time.time()\nimage = np.zeros((3000, 3000))\nfor _ in range(100):\n    pool.map(fmp, zip(num_cpus * [image], filters))\nduration_mp = time.time() - start\nprint(\"Multiprocessing duration = {:.1f}, speedup = {:.2f}\"\n      .format(duration_mp, duration_conv*num_cpus / duration_mp))","key":"cXLkQ1y9jo"},{"type":"output","id":"x5omjJKqxvh3pdh8szWu_","data":[],"key":"RliJYyMfMd"}],"key":"MdpcFg61XA"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":180,"column":1},"end":{"line":180,"column":1}},"children":[{"type":"text","value":"Process using Dask","position":{"start":{"line":180,"column":1},"end":{"line":180,"column":1}},"key":"btR8LwuhBu"}],"identifier":"process-using-dask","label":"Process using Dask","html_id":"process-using-dask","implicit":true,"key":"fR4tAXPOWN"}],"key":"d1POw2SxAh"},{"type":"block","position":{"start":{"line":182,"column":1},"end":{"line":182,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":184,"column":1},"end":{"line":184,"column":1}},"children":[{"type":"link","url":"https://www.dask.org/get-started","position":{"start":{"line":184,"column":1},"end":{"line":184,"column":1}},"children":[{"type":"text","value":"Documentation for Dask","position":{"start":{"line":184,"column":1},"end":{"line":184,"column":1}},"key":"kWlxhZSxmm"}],"urlSource":"https://www.dask.org/get-started","key":"wyf366Knyg"}],"key":"aP1ECgj2jj"}],"key":"jOdEatpxoj"},{"type":"block","position":{"start":{"line":186,"column":1},"end":{"line":186,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":188,"column":1},"end":{"line":188,"column":1}},"children":[{"type":"text","value":"Define a Dask distributed client with number of workers set to the number of cpus we found earlier, and with one thread per worker.","position":{"start":{"line":188,"column":1},"end":{"line":188,"column":1}},"key":"q85gZMs0Sy"}],"key":"vgchK8QCjA"}],"key":"nwDahlpR4o"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"client = Client(n_workers=num_cpus, threads_per_worker=1)","key":"m34uNLt1Ll"},{"type":"output","id":"ZGStWhpltPmndj8mhJuf8","data":[],"key":"AKth3dfDxb"}],"key":"acCzTINYF7"},{"type":"block","children":[],"key":"nLzO6B5Sa6"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"print(client)","key":"md7xQj9DRk"},{"type":"output","id":"XKWXdJgvAkK1bldO3poPw","data":[],"key":"Q3LrkTQ7fb"}],"key":"YvlWcwBVLH"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":198,"column":1},"end":{"line":198,"column":1}},"children":[{"type":"text","value":"Dask recommends scattering the large inputs across the workers, though this makes little difference in execution time.","position":{"start":{"line":198,"column":1},"end":{"line":198,"column":1}},"key":"PjpEfY3pR0"}],"key":"sA69tOkgaG"}],"key":"YIaPAXXCyn"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"start = time.time()\nimage = np.zeros((3000, 3000))\nfor _ in range(100):\n    for j in range(num_cpus):\n        big_future = client.scatter((image, filters[j % num_cpus]))\n        future = client.submit(fmp, big_future)\nduration_dask = time.time() - start\nprint(\"Dask duration = {:.1f}, speedup = {:.2f}\"\n      .format(duration_dask, duration_conv*num_cpus / duration_dask))","key":"WhZdVYAYDv"},{"type":"output","id":"juLV68djYzvrWHFwaLavN","data":[],"key":"GZd5AMZuXX"}],"key":"U2iGene18m"},{"type":"block","children":[],"key":"gauUhtL5Is"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"client.close()","key":"Z2L79sII2A"},{"type":"output","id":"6sIA8QFJMzoYSZ1oR8M-N","data":[],"key":"JTqM5masGe"}],"key":"wVJDK6FM8D"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":216,"column":1},"end":{"line":216,"column":1}},"children":[{"type":"text","value":"Conclusions","position":{"start":{"line":216,"column":1},"end":{"line":216,"column":1}},"key":"TEULTY4sHa"}],"identifier":"conclusions","label":"Conclusions","html_id":"conclusions","implicit":true,"key":"vbjdURtoEX"}],"key":"NDC2T0dILf"},{"type":"block","position":{"start":{"line":218,"column":1},"end":{"line":218,"column":1}},"children":[{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":220,"column":1},"end":{"line":223,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":220,"column":1},"end":{"line":220,"column":1}},"children":[{"type":"text","value":"Ray is the most effective at speeding up the convolution workload by fully utilizing all available processes","position":{"start":{"line":220,"column":1},"end":{"line":220,"column":1}},"key":"h5FYqiORob"}],"key":"jGqEuaJbt6"},{"type":"listItem","spread":true,"position":{"start":{"line":221,"column":1},"end":{"line":221,"column":1}},"children":[{"type":"text","value":"Multiprocessing is second in effectiveness","position":{"start":{"line":221,"column":1},"end":{"line":221,"column":1}},"key":"aV8kpZhHoJ"}],"key":"k3JZQXHOac"},{"type":"listItem","spread":true,"position":{"start":{"line":222,"column":1},"end":{"line":223,"column":1}},"children":[{"type":"text","value":"Dask delivers the least speedup; perhaps due to having only six processes on the dask.distributed client","position":{"start":{"line":222,"column":1},"end":{"line":222,"column":1}},"key":"SsfBC2gubx"}],"key":"EBrzeIXFI6"}],"key":"nMk5C4fMop"}],"key":"ELKupxjknL"},{"type":"block","position":{"start":{"line":224,"column":1},"end":{"line":224,"column":1}},"children":[{"type":"thematicBreak","position":{"start":{"line":225,"column":1},"end":{"line":225,"column":1}},"key":"hLBaCaUOCy"},{"type":"heading","depth":2,"position":{"start":{"line":227,"column":1},"end":{"line":227,"column":1}},"children":[{"type":"text","value":"About this notebook","position":{"start":{"line":227,"column":1},"end":{"line":227,"column":1}},"key":"ZOdPLOoOJI"}],"identifier":"about-this-notebook","label":"About this notebook","html_id":"about-this-notebook","implicit":true,"key":"mLIl1s95VU"},{"type":"paragraph","position":{"start":{"line":229,"column":1},"end":{"line":229,"column":1}},"children":[{"type":"strong","position":{"start":{"line":229,"column":1},"end":{"line":229,"column":1}},"children":[{"type":"text","value":"Author:","position":{"start":{"line":229,"column":1},"end":{"line":229,"column":1}},"key":"koax7v845X"}],"key":"KEeTDR94Wj"},{"type":"text","value":" David Shupe in conjunction with Jessica Krick and the IRSA Science Platform team at IPAC.","position":{"start":{"line":229,"column":1},"end":{"line":229,"column":1}},"key":"YZmKIVSJ3G"}],"key":"H6QzysEbXB"},{"type":"paragraph","position":{"start":{"line":231,"column":1},"end":{"line":231,"column":1}},"children":[{"type":"strong","position":{"start":{"line":231,"column":1},"end":{"line":231,"column":1}},"children":[{"type":"text","value":"Updated:","position":{"start":{"line":231,"column":1},"end":{"line":231,"column":1}},"key":"s3uCrv3QbI"}],"key":"cTDZdUZjmN"},{"type":"text","value":" 2024-09-24","position":{"start":{"line":231,"column":1},"end":{"line":231,"column":1}},"key":"OCR6ygtgFO"}],"key":"MDpEudV7UA"},{"type":"paragraph","position":{"start":{"line":233,"column":1},"end":{"line":233,"column":1}},"children":[{"type":"strong","position":{"start":{"line":233,"column":1},"end":{"line":233,"column":1}},"children":[{"type":"text","value":"Contact:","position":{"start":{"line":233,"column":1},"end":{"line":233,"column":1}},"key":"TMiq2D0c6M"}],"key":"O8hMQgDBMz"},{"type":"text","value":" ","position":{"start":{"line":233,"column":1},"end":{"line":233,"column":1}},"key":"xc1i1sBc5l"},{"type":"link","url":"https://irsa.ipac.caltech.edu/docs/help_desk.html","position":{"start":{"line":233,"column":1},"end":{"line":233,"column":1}},"children":[{"type":"text","value":"the IRSA Helpdesk","position":{"start":{"line":233,"column":1},"end":{"line":233,"column":1}},"key":"odjjuqhmQd"}],"urlSource":"https://irsa.ipac.caltech.edu/docs/help_desk.html","key":"tU8AtT9Jsk"},{"type":"text","value":" with questions or reporting problems.","position":{"start":{"line":233,"column":1},"end":{"line":233,"column":1}},"key":"Y8XISQAtfc"}],"key":"abjmM8Dxq3"},{"type":"heading","depth":2,"position":{"start":{"line":235,"column":1},"end":{"line":235,"column":1}},"children":[{"type":"text","value":"Citations","position":{"start":{"line":235,"column":1},"end":{"line":235,"column":1}},"key":"WTAO34nGhA"}],"identifier":"citations","label":"Citations","html_id":"citations","implicit":true,"key":"W2eiKsrltg"},{"type":"paragraph","position":{"start":{"line":237,"column":1},"end":{"line":237,"column":1}},"children":[{"type":"text","value":"If you use these software packages in your work, please use the following citations:","position":{"start":{"line":237,"column":1},"end":{"line":237,"column":1}},"key":"QIAjVA9IxI"}],"key":"wvcjfL2oYL"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":239,"column":1},"end":{"line":241,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":239,"column":1},"end":{"line":239,"column":1}},"children":[{"type":"text","value":"Dask: Dask Development Team (2016). Dask: Library for dynamic task scheduling. URL ","position":{"start":{"line":239,"column":1},"end":{"line":239,"column":1}},"key":"HGqyAClepY"},{"type":"link","url":"https://dask.org","position":{"start":{"line":239,"column":1},"end":{"line":239,"column":1}},"children":[{"type":"text","value":"https://dask.org","position":{"start":{"line":239,"column":1},"end":{"line":239,"column":1}},"key":"S7ZkV5H7ie"}],"urlSource":"https://dask.org","key":"WyIE5Rctkd"}],"key":"mHqowZWeqi"},{"type":"listItem","spread":true,"position":{"start":{"line":240,"column":1},"end":{"line":241,"column":1}},"children":[{"type":"text","value":"Ray: The Ray Development Team. URL ","position":{"start":{"line":240,"column":1},"end":{"line":240,"column":1}},"key":"RHOxY7sYRa"},{"type":"link","url":"https://docs.ray.io","position":{"start":{"line":240,"column":1},"end":{"line":240,"column":1}},"children":[{"type":"text","value":"https://docs.ray.io","position":{"start":{"line":240,"column":1},"end":{"line":240,"column":1}},"key":"Agx4c4pNQq"}],"urlSource":"https://docs.ray.io","key":"BvqzmTRq4R"}],"key":"zkAUMTiSX9"}],"key":"G32828H3kr"}],"key":"Xm8G9tyIqE"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"","key":"wmRJvoO4vP"},{"type":"output","id":"2D3Eo1QpzHOg9GUg2MFBq","data":[],"key":"OVos8GTOE1"}],"key":"gpeEj3fKeP"}],"key":"QYQcXZroRt"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Using Firefly visualization tools in Python to vet SEDs","url":"/seds-in-firefly","group":"Special Topics"}}},"domain":"http://localhost:3000"}