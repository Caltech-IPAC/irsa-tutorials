{"version":2,"kind":"Notebook","sha256":"9eb5e0f9a1cf957e88b7d75e8b76d989086e90fa159939ba1662727d01fc0743","slug":"wise-allwise-catalog-demo","location":"/tutorials/parquet-catalog-demos/wise-allwise-catalog-demo.md","dependencies":[],"frontmatter":{"title":"Analyzing cloud-hosted AllWISE Source Catalog in Parquet format","kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"jupytext":{"text_representation":{"extension":".md","format_name":"myst","format_version":"0.13","jupytext_version":"1.16.7"}},"content_includes_title":false,"authors":[{"id":"IRSA Scientists and Developers","name":"IRSA Scientists and Developers"}],"github":"https://github.com/Caltech-IPAC/irsa-tutorials/","subject":"IRSA Tutorials","keywords":["astronomy"],"settings":{"output_matplotlib_strings":"remove"},"numbering":{"title":{"offset":2}},"edit_url":"https://github.com/Caltech-IPAC/irsa-tutorials//blob/main/tutorials/parquet-catalog-demos/wise-allwise-catalog-demo.md","exports":[{"format":"md","filename":"wise-allwise-catalog-demo.md","url":"/irsa-tutorials/build/wise-allwise-catalog-d443dc603a0f366ca6cf5da33113e92a.md"}]},"mdast":{"type":"root","children":[{"type":"block","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"heading","depth":2,"position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"Learning Goals","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"NiyvvWI3ci"}],"identifier":"learning-goals","label":"Learning Goals","html_id":"learning-goals","implicit":true,"key":"fdUKVAiOKj"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":20,"column":1},"end":{"line":27,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":20,"column":1},"end":{"line":21,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"text","value":"Learn how to load data from the AllWISE parquet catalog that is partitioned by HEALPix pixel index at order 5.","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"dIXCR6YhLt"}],"key":"ArAHkF7kyP"}],"key":"FXH0XirhPh"},{"type":"listItem","spread":true,"position":{"start":{"line":22,"column":1},"end":{"line":27,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"children":[{"type":"text","value":"Learn efficient methods for performing common types of searches. This includes:","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"key":"l7WBv98vnm"}],"key":"UPwPlMgFNa"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":24,"column":1},"end":{"line":27,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"children":[{"type":"text","value":"query/load using pandas, applying basic filters","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"key":"UhXrduaWeY"}],"key":"kZK4OMXNhJ"},{"type":"listItem","spread":true,"position":{"start":{"line":25,"column":1},"end":{"line":25,"column":1}},"children":[{"type":"text","value":"query/load using pyarrow, applying advanced filters that combine and/or compare columns","position":{"start":{"line":25,"column":1},"end":{"line":25,"column":1}},"key":"vXG4IkLaTw"}],"key":"ID13FopoHE"},{"type":"listItem","spread":true,"position":{"start":{"line":26,"column":1},"end":{"line":27,"column":1}},"children":[{"type":"text","value":"perform nearest neighbor searches using pyarrow and astropy","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"hloWKvlQkb"}],"key":"T5sp72nSdv"}],"key":"wQjqBBkasC"}],"key":"auiolmMcBH"}],"key":"SBCMqTglhb"}],"key":"jPauCJ2x2W"},{"type":"block","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"children":[{"type":"heading","depth":2,"position":{"start":{"line":30,"column":1},"end":{"line":30,"column":1}},"children":[{"type":"text","value":"Introduction","position":{"start":{"line":30,"column":1},"end":{"line":30,"column":1}},"key":"Q4eutnSCAr"}],"identifier":"introduction","label":"Introduction","html_id":"introduction","implicit":true,"key":"lsSsXRfhX6"},{"type":"paragraph","position":{"start":{"line":32,"column":1},"end":{"line":33,"column":1}},"children":[{"type":"text","value":"This notebook demonstrates access to the ","position":{"start":{"line":32,"column":1},"end":{"line":32,"column":1}},"key":"u56dOMjh0E"},{"type":"link","url":"https://ui.adsabs.harvard.edu/abs/2005ApJ...622..759G/abstract","position":{"start":{"line":32,"column":1},"end":{"line":32,"column":1}},"children":[{"type":"text","value":"HEALPix","position":{"start":{"line":32,"column":1},"end":{"line":32,"column":1}},"key":"bp8oOccZPN"}],"urlSource":"https://ui.adsabs.harvard.edu/abs/2005ApJ...622..759G/abstract","key":"CgqEsm82Fb"},{"type":"text","value":"-partitioned (order 5), ","position":{"start":{"line":32,"column":1},"end":{"line":32,"column":1}},"key":"SIdxNQrShD"},{"type":"link","url":"https://parquet.apache.org/","position":{"start":{"line":32,"column":1},"end":{"line":32,"column":1}},"children":[{"type":"text","value":"Apache Parquet","position":{"start":{"line":32,"column":1},"end":{"line":32,"column":1}},"key":"xlAamgm7lX"}],"urlSource":"https://parquet.apache.org/","key":"KoZ6vWx9ma"},{"type":"text","value":" version of the ","position":{"start":{"line":32,"column":1},"end":{"line":32,"column":1}},"key":"yKaSmJ5VEC"},{"type":"link","url":"https://wise2.ipc.caltech.edu/docs/release/allwise/expsup/sec1_3.html#src_cat","position":{"start":{"line":32,"column":1},"end":{"line":32,"column":1}},"children":[{"type":"text","value":"AllWISE Source Catalog","position":{"start":{"line":32,"column":1},"end":{"line":32,"column":1}},"key":"AhkFSH2fgS"}],"urlSource":"https://wise2.ipc.caltech.edu/docs/release/allwise/expsup/sec1_3.html#src_cat","key":"LOAjh2Rq6N"},{"type":"text","value":".\nThe catalog is available through the ","position":{"start":{"line":32,"column":1},"end":{"line":32,"column":1}},"key":"X7WEh6u4Zv"},{"type":"link","url":"https://aws.amazon.com/opendata","position":{"start":{"line":32,"column":1},"end":{"line":32,"column":1}},"children":[{"type":"text","value":"AWS Open Data","position":{"start":{"line":32,"column":1},"end":{"line":32,"column":1}},"key":"h6SeVZ67RW"}],"urlSource":"https://aws.amazon.com/opendata","key":"M0f0chb6DR"},{"type":"text","value":" program, as part of the ","position":{"start":{"line":32,"column":1},"end":{"line":32,"column":1}},"key":"cZ6jBkBXia"},{"type":"link","url":"https://science.nasa.gov/open-science-overview","position":{"start":{"line":32,"column":1},"end":{"line":32,"column":1}},"children":[{"type":"text","value":"NASA Open-Source Science Initiative","position":{"start":{"line":32,"column":1},"end":{"line":32,"column":1}},"key":"mucaXm2Ol5"}],"urlSource":"https://science.nasa.gov/open-science-overview","key":"Rvxula4RgH"},{"type":"text","value":".","position":{"start":{"line":32,"column":1},"end":{"line":32,"column":1}},"key":"ILp9tpBJoc"}],"key":"lAKgWXm6Yt"},{"type":"paragraph","position":{"start":{"line":35,"column":1},"end":{"line":38,"column":1}},"children":[{"type":"text","value":"Parquet is convenient for large astronomical catalogs in part because the storage format supports efficient database-style queries on the files themselves, without having to load the catalog into a database (or into memory) first.\nThe AllWISE catalog is fairly large at 340 GB.\nThe examples below demonstrate different methods that can be used to query the catalog, filtering the data and loading only the results.\nEach method accesses the parquet files a bit differently and is useful for different types of queries.","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"QkWC8hWsrO"}],"key":"bpAkOUKLHv"}],"key":"f3vijmbsVg"},{"type":"block","position":{"start":{"line":40,"column":1},"end":{"line":40,"column":1}},"children":[{"type":"heading","depth":2,"position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"children":[{"type":"text","value":"Imports","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"key":"uMUUR2Lk1H"}],"identifier":"imports","label":"Imports","html_id":"imports","implicit":true,"key":"HToWbkjQ4I"}],"key":"MiPSPu591p"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Uncomment the next line to install dependencies if needed.\n# !pip install 'pandas>=1.5.2' 'pyarrow>=10.0.1' matplotlib hpgeom astropy","key":"I7RGFvbv2N"},{"type":"output","id":"BWjeEVkm__Meulnq95XNQ","data":[],"key":"fQwNYkHWP4"}],"key":"N5JuwmDD3U"},{"type":"block","children":[],"key":"nBcDTf5qKL"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import sys\n\nimport hpgeom as hp\nimport pandas as pd\nimport pyarrow.compute as pc\nimport pyarrow.dataset as ds\nfrom astropy import units as u\nfrom astropy.coordinates import SkyCoord\nfrom matplotlib import colors\nfrom matplotlib import pyplot as plt\nfrom pyarrow.fs import S3FileSystem","key":"J8baSyYVPO"},{"type":"output","id":"gnrfVL_rMt0a2mpJAX559","data":[],"key":"zBdbiuyJfJ"}],"key":"kRl7AFmBJ0"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":63,"column":1},"end":{"line":63,"column":1}},"children":[{"type":"text","value":"Setup catalog paths and query filters","position":{"start":{"line":63,"column":1},"end":{"line":63,"column":1}},"key":"Y6INURosAS"}],"identifier":"setup-catalog-paths-and-query-filters","label":"Setup catalog paths and query filters","html_id":"setup-catalog-paths-and-query-filters","implicit":true,"key":"Tiboli4hK5"}],"key":"nDUQMHwVXq"},{"type":"block","position":{"start":{"line":65,"column":1},"end":{"line":65,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":67,"column":1},"end":{"line":73,"column":1}},"children":[{"type":"text","value":"This AllWISE catalog is stored in an ","position":{"start":{"line":67,"column":1},"end":{"line":67,"column":1}},"key":"eJF30Hg5cb"},{"type":"link","url":"https://aws.amazon.com/s3/","position":{"start":{"line":67,"column":1},"end":{"line":67,"column":1}},"children":[{"type":"text","value":"AWS S3","position":{"start":{"line":67,"column":1},"end":{"line":67,"column":1}},"key":"kJi1geyjyL"}],"urlSource":"https://aws.amazon.com/s3/","key":"xhClTp12sQ"},{"type":"text","value":" bucket.\nTo connect to an S3 bucket we just need to point the reader at S3 instead of the local filesystem, and pass in AWS credentials.\n(Here, a “reader” is a python library that reads parquet files.)\nWe’ll use ","position":{"start":{"line":67,"column":1},"end":{"line":67,"column":1}},"key":"JbucNy62jI"},{"type":"link","url":"https://arrow.apache.org/docs/python/generated/pyarrow.fs.S3FileSystem.html","position":{"start":{"line":67,"column":1},"end":{"line":67,"column":1}},"children":[{"type":"text","value":"pyarrow​.fs​.S3FileSystem","position":{"start":{"line":67,"column":1},"end":{"line":67,"column":1}},"key":"tPnxU8OqZi"}],"urlSource":"https://arrow.apache.org/docs/python/generated/pyarrow.fs.S3FileSystem.html","key":"MbPQe7emgK"},{"type":"text","value":" for this because it is recognized by every reader in examples below, and we’re already using pyarrow.\n","position":{"start":{"line":67,"column":1},"end":{"line":67,"column":1}},"key":"AsKTfxOWHh"},{"type":"link","url":"https://s3fs.readthedocs.io/en/latest/index.html","position":{"start":{"line":67,"column":1},"end":{"line":67,"column":1}},"children":[{"type":"text","value":"s3fs","position":{"start":{"line":67,"column":1},"end":{"line":67,"column":1}},"key":"VHISnksY57"}],"urlSource":"https://s3fs.readthedocs.io/en/latest/index.html","key":"oR6RpyTDKN"},{"type":"text","value":" is another common option.\nThe call to ","position":{"start":{"line":67,"column":1},"end":{"line":67,"column":1}},"key":"L2ypwOd64r"},{"type":"inlineCode","value":"S3FileSystem","position":{"start":{"line":67,"column":1},"end":{"line":67,"column":1}},"key":"cPMyvQOA2T"},{"type":"text","value":" will look for AWS credentials in environment variables and/or the file ~/.aws/credentials.\nCredentials can also be passed as keyword arguments.","position":{"start":{"line":67,"column":1},"end":{"line":67,"column":1}},"key":"Dq2lndgVSI"}],"key":"MH5AJwunZd"}],"key":"gCPFNKTeCQ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"bucket = \"nasa-irsa-wise\"\nfolder = \"wise/allwise/catalogs/p3as_psd/healpix_k5\"\nparquet_root = f\"{bucket}/{folder}/wise-allwise.parquet\"\n\nfs = S3FileSystem(region=\"us-west-2\", anonymous=True)  # the bucket is in region us-west-2","key":"ocgtbbFtYS"},{"type":"output","id":"EwtzLQKuerc_BDqbEzlzq","data":[],"key":"V1Bc8YdRMv"}],"key":"Vzt7IivaZo"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":83,"column":1},"end":{"line":84,"column":1}},"children":[{"type":"text","value":"These limits will be used to query the catalog using specific filters created in examples below.\nThe Schema Access section (below) shows how to access column names and other schema information.","position":{"start":{"line":83,"column":1},"end":{"line":83,"column":1}},"key":"ThCrhjKr2S"}],"key":"wxtmC2W4zB"}],"key":"l2n8VpSN5v"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"w1mpro_min = 10.0\nra_min, ra_max = 15, 25  # deg\ndec_min, dec_max = 62, 72  # deg\npolygon_corners = [(ra_min, dec_min), (ra_min, dec_max), (ra_max, dec_max), (ra_max, dec_min)]\nradius = 5 * u.arcmin.to(u.deg)","key":"C5G7FCtMmn"},{"type":"output","id":"AM1Nkm4gxOV6k05hc1nww","data":[],"key":"xr9xc0YfVz"}],"key":"iNUAZHPMoI"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":94,"column":1},"end":{"line":97,"column":1}},"children":[{"type":"text","value":"The catalog is partitioned by HEALPix pixel index at order 5.\nQueries can be most efficient when a filter on the partition column is included, since the reader can skip those partitions entirely.\nThus, for queries that include ra/dec constraints, we can usually speed up load times significantly by including a constraint on the HEALPix order 5 pixel index.\nThe required pixel indexes can be calculated using ","position":{"start":{"line":94,"column":1},"end":{"line":94,"column":1}},"key":"Jh8d361lqj"},{"type":"link","url":"https://hpgeom.readthedocs.io/en/latest/index.html","position":{"start":{"line":94,"column":1},"end":{"line":94,"column":1}},"children":[{"type":"text","value":"hpgeom","position":{"start":{"line":94,"column":1},"end":{"line":94,"column":1}},"key":"xLvOky1Ko1"}],"urlSource":"https://hpgeom.readthedocs.io/en/latest/index.html","key":"okfcJ6Ecln"},{"type":"text","value":", as demonstrated here.","position":{"start":{"line":94,"column":1},"end":{"line":94,"column":1}},"key":"nKX0LzFlkB"}],"key":"HlyCOoH76l"}],"key":"nP1op8DW1j"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"order = 5  # the catalog is partitioned by HEALPix pixel index at order 5\nnside = hp.order_to_nside(order)  # number of order 5 pixels along one side of a base pixel","key":"F0QJE0rBge"},{"type":"output","id":"ALclIZmgzB_bsvW35O2hw","data":[],"key":"erOrBhI5V6"}],"key":"JPb1v52HbX"},{"type":"block","children":[],"key":"aIH94fChaT"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# polygon search: get the set of pixel indexes that overlap the ra/dec polygon\npolygon_pixels = hp.query_polygon(\n    nside=nside,\n    a=[corner[0] for corner in polygon_corners],  # ra values\n    b=[corner[1] for corner in polygon_corners],  # dec values\n    nest=True,  # catalog uses nested ordering scheme for pixel index\n    inclusive=True,  # return all pixels that overlap with the polygon, and maybe a few more\n)\n\nprint(f\"polygon_pixels contains {len(polygon_pixels)} of a possible {hp.nside_to_npixel(nside)} pixels\")","key":"ziK5k2igIW"},{"type":"output","id":"xcDPgRv7n9KkJaWwCk7No","data":[{"output_type":"stream","name":"stdout","text":"polygon_pixels contains 25 of a possible 12288 pixels\n"}],"key":"Tt7iPo2c7V"}],"key":"mdGt1tRVE1"},{"type":"block","children":[],"key":"myXZkzCCCX"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# cone search: get the set of pixel indexes that overlap a 5' circle around the ra/dec min\ncone_pixels = hp.query_circle(\n    nside=nside,\n    a=ra_min,\n    b=dec_min,\n    radius=radius,\n    nest=True,  # catalog uses nested ordering scheme for pixel index\n    inclusive=True,  # return all pixels that overlap with the disk, and maybe a few more\n)\n\n# this can reduce the number of partitions the reader needs to look at from 12288 down to 2\nprint(f\"cone_pixels contains {len(cone_pixels)} of a possible {hp.nside_to_npixel(nside)} pixels\")","key":"R0tJGQYlnr"},{"type":"output","id":"F-BK7D-5OTXXeR1T4Tir7","data":[{"output_type":"stream","name":"stdout","text":"cone_pixels contains 2 of a possible 12288 pixels\n"}],"key":"P0E4mhSJv1"}],"key":"fEXlvm0tn2"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"children":[{"type":"text","value":"Example 1:  Pandas with basic filters (magnitude limit and ra/dec polygon)","position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"key":"lcm8LzqitV"}],"identifier":"example-1-pandas-with-basic-filters-magnitude-limit-and-ra-dec-polygon","label":"Example 1:  Pandas with basic filters (magnitude limit and ra/dec polygon)","html_id":"example-1-pandas-with-basic-filters-magnitude-limit-and-ra-dec-polygon","implicit":true,"key":"SjClTrOVjw"}],"key":"ebO5QKY3TQ"},{"type":"block","position":{"start":{"line":134,"column":1},"end":{"line":134,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":136,"column":1},"end":{"line":137,"column":1}},"children":[{"type":"text","value":"Load using ","position":{"start":{"line":136,"column":1},"end":{"line":136,"column":1}},"key":"DgApLbBfSg"},{"type":"link","url":"https://pandas.pydata.org/docs/reference/api/pandas.read_parquet.html","position":{"start":{"line":136,"column":1},"end":{"line":136,"column":1}},"children":[{"type":"text","value":"pandas.read_parquet","position":{"start":{"line":136,"column":1},"end":{"line":136,"column":1}},"key":"ezv8QajuVS"}],"urlSource":"https://pandas.pydata.org/docs/reference/api/pandas.read_parquet.html","key":"JH2JaYst6M"},{"type":"text","value":".\nFilter for magnitudes above our w1mpro limit and a sky-area limited to the ra/dec polygon.","position":{"start":{"line":136,"column":1},"end":{"line":136,"column":1}},"key":"g0LrsFywv0"}],"key":"SibvkEkb8d"},{"type":"paragraph","position":{"start":{"line":139,"column":1},"end":{"line":141,"column":1}},"children":[{"type":"text","value":"Pandas actually uses either pyarrow or fastparquet to interact with parquet files.\nWe’ll choose pyarrow (the default).\nFor filter options, see the ","position":{"start":{"line":139,"column":1},"end":{"line":139,"column":1}},"key":"WsYrtmFKaD"},{"type":"inlineCode","value":"filters","position":{"start":{"line":139,"column":1},"end":{"line":139,"column":1}},"key":"xXek3mbIQU"},{"type":"text","value":" arg description in ","position":{"start":{"line":139,"column":1},"end":{"line":139,"column":1}},"key":"NDTGXZxKIb"},{"type":"link","url":"https://arrow.apache.org/docs/python/generated/pyarrow.parquet.ParquetDataset.html#pyarrow.parquet.ParquetDataset","position":{"start":{"line":139,"column":1},"end":{"line":139,"column":1}},"children":[{"type":"text","value":"ParquetDataset","position":{"start":{"line":139,"column":1},"end":{"line":139,"column":1}},"key":"atRJP5k8mA"}],"urlSource":"https://arrow.apache.org/docs/python/generated/pyarrow.parquet.ParquetDataset.html#pyarrow.parquet.ParquetDataset","key":"LlQhcFZU7J"},{"type":"text","value":".","position":{"start":{"line":139,"column":1},"end":{"line":139,"column":1}},"key":"mJwf7EUNx9"}],"key":"mogN5tyX6t"}],"key":"tZLg7DRu9B"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"%%time\n# expect this to take 40-90 seconds\npandas_df = pd.read_parquet(\n    parquet_root,\n    filesystem=fs,\n    # columns to be returned. similar to a SQL SELECT clause.\n    columns=[\"designation\", \"ra\", \"dec\", \"w1mpro\", \"healpix_k5\"],\n    # row filters. similar to a SQL WHERE clause.\n    # tuple conditions are joined by AND (for OR, use a list of lists)\n    # supported operators: ==, !=, <, >, <=, >=, in, not in\n    filters=[\n        (\"w1mpro\", \">\", w1mpro_min),\n        (\"ra\", \">\", ra_min),\n        (\"ra\", \"<\", ra_max),\n        (\"dec\", \">\", dec_min),\n        (\"dec\", \"<\", dec_max),\n        # include filter on partition column for most efficient loading\n        (\"healpix_k5\", \"in\", polygon_pixels),\n    ],\n)\n\npandas_df.describe()","key":"byW1UwpYQu"},{"type":"output","id":"6EvHNnXoSKQgOwxzsFFqD","data":[{"output_type":"stream","name":"stdout","text":"CPU times: user 9.76 s, sys: 2.72 s, total: 12.5 s\nWall time: 29.7 s\n"},{"output_type":"execute_result","execution_count":8,"metadata":{},"data":{"text/plain":{"content":"                  ra            dec         w1mpro\ncount  870641.000000  870641.000000  870641.000000\nmean       20.014620      66.582893      14.788122\nstd         2.900022       2.835385       1.441931\nmin        15.000000      62.000001      10.001000\n25%        17.489370      64.121702      14.003000\n50%        20.038686      66.416329      14.992000\n75%        22.525137      68.928682      15.792000\nmax        25.000000      71.999960      19.079000","content_type":"text/plain"},"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ra</th>\n      <th>dec</th>\n      <th>w1mpro</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>870641.000000</td>\n      <td>870641.000000</td>\n      <td>870641.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>20.014620</td>\n      <td>66.582893</td>\n      <td>14.788122</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>2.900022</td>\n      <td>2.835385</td>\n      <td>1.441931</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>15.000000</td>\n      <td>62.000001</td>\n      <td>10.001000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>17.489370</td>\n      <td>64.121702</td>\n      <td>14.003000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>20.038686</td>\n      <td>66.416329</td>\n      <td>14.992000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>22.525137</td>\n      <td>68.928682</td>\n      <td>15.792000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>25.000000</td>\n      <td>71.999960</td>\n      <td>19.079000</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"}}}],"key":"P9jYULejZ2"}],"key":"HLC3XilWc8"},{"type":"block","children":[],"key":"Ft2uexDFFm"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Delete pandas_df to save memory. This is useful when running on a machine with a small amount of RAM.\ndel pandas_df","key":"Y2Dtdii8B4"},{"type":"output","id":"rEx_fvqrDjdqpfgc0mbf-","data":[],"key":"Ta3QnhOqAE"}],"key":"MpSaIkUSEN"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":173,"column":1},"end":{"line":173,"column":1}},"children":[{"type":"text","value":"Example 2:  Pyarrow with advanced filters (color-color cuts for AGN)","position":{"start":{"line":173,"column":1},"end":{"line":173,"column":1}},"key":"qBL6IENJDS"}],"identifier":"example-2-pyarrow-with-advanced-filters-color-color-cuts-for-agn","label":"Example 2:  Pyarrow with advanced filters (color-color cuts for AGN)","html_id":"example-2-pyarrow-with-advanced-filters-color-color-cuts-for-agn","implicit":true,"key":"Aw0NP6AMXu"}],"key":"Yu3eIao7aM"},{"type":"block","position":{"start":{"line":175,"column":1},"end":{"line":175,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":177,"column":1},"end":{"line":178,"column":1}},"children":[{"type":"text","value":"Load using ","position":{"start":{"line":177,"column":1},"end":{"line":177,"column":1}},"key":"Lwh6NalGLE"},{"type":"link","url":"https://arrow.apache.org/docs/python/generated/pyarrow.dataset.parquet_dataset.html","position":{"start":{"line":177,"column":1},"end":{"line":177,"column":1}},"children":[{"type":"text","value":"pyarrow​.dataset​.parquet​_dataset","position":{"start":{"line":177,"column":1},"end":{"line":177,"column":1}},"key":"jNAnlSYpe3"}],"urlSource":"https://arrow.apache.org/docs/python/generated/pyarrow.dataset.parquet_dataset.html","key":"o8bXpnPDzF"},{"type":"text","value":" and convert to pandas.\nUseful for:","position":{"start":{"line":177,"column":1},"end":{"line":177,"column":1}},"key":"NMkSMaPZ1s"}],"key":"mjQLEtgRLY"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":180,"column":1},"end":{"line":182,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":180,"column":1},"end":{"line":180,"column":1}},"children":[{"type":"text","value":"advanced filters that combine, compare, and/or create new columns. (this example)","position":{"start":{"line":180,"column":1},"end":{"line":180,"column":1}},"key":"ICPKajZk4E"}],"key":"QpbmteBQQi"},{"type":"listItem","spread":true,"position":{"start":{"line":181,"column":1},"end":{"line":182,"column":1}},"children":[{"type":"text","value":"speed. This method is more efficient at “discovering” the dataset than pandas. It also provides a persistent dataset object that can be reused for future queries, where pandas must re-discover the dataset every time. (this example and Example 3)","position":{"start":{"line":181,"column":1},"end":{"line":181,"column":1}},"key":"a7ALtQ6SBl"}],"key":"Crd8OQS6no"}],"key":"vTBjFxNswi"},{"type":"paragraph","position":{"start":{"line":183,"column":1},"end":{"line":184,"column":1}},"children":[{"type":"text","value":"This example filters the catalog for AGN by making cuts in color-color space using the selection limits from ","position":{"start":{"line":183,"column":1},"end":{"line":183,"column":1}},"key":"KGbgXO36Qh"},{"type":"link","url":"https://arxiv.org/pdf/1208.2530.pdf","position":{"start":{"line":183,"column":1},"end":{"line":183,"column":1}},"children":[{"type":"text","value":"Mateos et al. (2012)","position":{"start":{"line":183,"column":1},"end":{"line":183,"column":1}},"key":"XUNzucKg8Y"}],"urlSource":"https://arxiv.org/pdf/1208.2530.pdf","key":"rmHcmsdCS5"},{"type":"text","value":".\nThis is a more complicated filter than in Example 1 (it requires both constructing new columns and comparing values between columns) but this load is generally faster, demonstrating the efficiency of this method.","position":{"start":{"line":183,"column":1},"end":{"line":183,"column":1}},"key":"IiiQe6PR8M"}],"key":"X6GlAarclo"},{"type":"paragraph","position":{"start":{"line":186,"column":1},"end":{"line":190,"column":1}},"children":[{"type":"text","value":"For basic info about the ","position":{"start":{"line":186,"column":1},"end":{"line":186,"column":1}},"key":"CLDhUwaGXi"},{"type":"inlineCode","value":"columns","position":{"start":{"line":186,"column":1},"end":{"line":186,"column":1}},"key":"EjYu27M3dz"},{"type":"text","value":" and ","position":{"start":{"line":186,"column":1},"end":{"line":186,"column":1}},"key":"KQPOvrwRh1"},{"type":"inlineCode","value":"filter","position":{"start":{"line":186,"column":1},"end":{"line":186,"column":1}},"key":"UG6IaTgZ9O"},{"type":"text","value":" arguments, see ","position":{"start":{"line":186,"column":1},"end":{"line":186,"column":1}},"key":"YblodmYEwh"},{"type":"link","url":"https://arrow.apache.org/docs/python/generated/pyarrow.dataset.Scanner.html#pyarrow.dataset.Scanner.from_dataset","position":{"start":{"line":186,"column":1},"end":{"line":186,"column":1}},"children":[{"type":"text","value":"Scanner","position":{"start":{"line":186,"column":1},"end":{"line":186,"column":1}},"key":"MQT3pZL2d6"}],"urlSource":"https://arrow.apache.org/docs/python/generated/pyarrow.dataset.Scanner.html#pyarrow.dataset.Scanner.from_dataset","key":"QO2XbU9Saq"},{"type":"text","value":".\nThe construction of columns/filters is more involved than before because they must be passed as ","position":{"start":{"line":186,"column":1},"end":{"line":186,"column":1}},"key":"TeU85OVTom"},{"type":"link","url":"https://arrow.apache.org/docs/python/generated/pyarrow.dataset.Expression.html#pyarrow.dataset.Expression","position":{"start":{"line":186,"column":1},"end":{"line":186,"column":1}},"children":[{"type":"text","value":"Expressions","position":{"start":{"line":186,"column":1},"end":{"line":186,"column":1}},"key":"WnXs4R5398"}],"urlSource":"https://arrow.apache.org/docs/python/generated/pyarrow.dataset.Expression.html#pyarrow.dataset.Expression","key":"Hq7FUdO3zv"},{"type":"text","value":", and all operations must be done using pyarrow.compute ","position":{"start":{"line":186,"column":1},"end":{"line":186,"column":1}},"key":"edk7vwdRPJ"},{"type":"link","url":"https://arrow.apache.org/docs/python/api/compute.html","position":{"start":{"line":186,"column":1},"end":{"line":186,"column":1}},"children":[{"type":"text","value":"functions","position":{"start":{"line":186,"column":1},"end":{"line":186,"column":1}},"key":"X08xuyswWg"}],"urlSource":"https://arrow.apache.org/docs/python/api/compute.html","key":"LmpQxuDmzi"},{"type":"text","value":" and ","position":{"start":{"line":186,"column":1},"end":{"line":186,"column":1}},"key":"lcoL6g0up8"},{"type":"inlineCode","value":"field","position":{"start":{"line":186,"column":1},"end":{"line":186,"column":1}},"key":"PeJ7rvUVwK"},{"type":"text","value":"s.\nThis is demonstrated below.\nNote that the catalog uses a file naming scheme called “hive”, which the reader uses to identify partitions.\nIn other examples this is recognized automatically, but here we must pass it explicitly.","position":{"start":{"line":186,"column":1},"end":{"line":186,"column":1}},"key":"tFZTYbOI1G"}],"key":"xcCy6wF7Hz"}],"key":"ShWpbV9S06"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# define new columns for colors W1-W2 and W3-W4\nw1w2 = pc.subtract(pc.field(\"w1mpro\"), pc.field(\"w2mpro\"))\nw3w4 = pc.subtract(pc.field(\"w3mpro\"), pc.field(\"w4mpro\"))\n\n# define the AGN locus, as in Mateos et al., 2012\nlocus = pc.multiply(pc.scalar(0.5), w3w4)","key":"UCL7Zxt8kr"},{"type":"output","id":"S7QKX6sJ6m9EGB--IVv-X","data":[],"key":"v7d8VGRGQ6"}],"key":"kW6OlImm2M"},{"type":"block","children":[],"key":"fq0sfz0FUO"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"%%time\n# expect this to take 20-60 seconds.\n# notice this is generally faster than example 1 using pandas even though\n# this filter is much more complicated, highlighting the efficiency of this method.\n\n# load catalog metadata as a pyarrow dataset\npyarrow_ds = ds.parquet_dataset(f\"{parquet_root}/_metadata\", filesystem=fs, partitioning=\"hive\")\n\n# query for AGN using selection limits from Mateos et al., 2012\npyarrow_df = pyarrow_ds.to_table(\n    # column filter. similar to a SQL SELECT clause.\n    columns={\n        \"w1w2\": w1w2,\n        \"w3w4\": w3w4,\n        \"cntr\": pc.field(\"cntr\"),\n        \"ra\": pc.field(\"ra\"),\n        \"dec\": pc.field(\"dec\"),\n        \"healpix_k5\": pc.field(\"healpix_k5\"),\n    },\n    # row filter. similar to a SQL WHERE clause.\n    filter=(\n        # color-color cuts\n        (w1w2 < pc.add(locus, pc.scalar(0.979)))\n        & (w1w2 > pc.subtract(locus, pc.scalar(0.405)))\n        & (w3w4 > pc.scalar(1.76))\n        # to do an all-sky search, comment out the rest of the filter. expect it to take 30-60 min\n        # same ra/dec polygon as before\n        & (pc.field(\"ra\") > ra_min)\n        & (pc.field(\"ra\") < ra_max)\n        & (pc.field(\"dec\") > dec_min)\n        & (pc.field(\"dec\") < dec_max)\n        # same partition-column filter as before\n        & (pc.field(\"healpix_k5\").isin(polygon_pixels))\n    ),\n).to_pandas()","key":"Q5iM5nDY3w"},{"type":"output","id":"hMylpVL5gREjybHv0wmBl","data":[{"output_type":"stream","name":"stdout","text":"CPU times: user 8.19 s, sys: 5.49 s, total: 13.7 s\nWall time: 33 s\n"}],"key":"QOlg2QssoB"}],"key":"sq8qTpyhUt"},{"type":"block","children":[],"key":"hbAEJPOcHC"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"len(pyarrow_df.index)","key":"SUcRbAS5wU"},{"type":"output","id":"JGlFYLe7lGD-DGvXoA6V1","data":[{"output_type":"execute_result","execution_count":12,"metadata":{},"data":{"text/plain":{"content":"3750","content_type":"text/plain"}}}],"key":"J4U2wlqe6s"}],"key":"XPSpjozoOQ"},{"type":"block","children":[],"key":"QqiEXDVFe4"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"colorbar_norm = colors.LogNorm(vmin=1, vmax=10)  # for an all-sky search, use vmax=100_000\npyarrow_df.plot.hexbin(\"w3w4\", \"w1w2\", norm=colorbar_norm)","key":"TSu4687g0B"},{"type":"output","id":"HcILZGOvNvliIebgVacs7","data":[{"output_type":"execute_result","execution_count":13,"metadata":{},"data":{"text/plain":{"content":"<Axes: xlabel='w3w4', ylabel='w1w2'>","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 640x480 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"b348b34bb36d35eb4f57b30cdc290a23","path":"/irsa-tutorials/build/b348b34bb36d35eb4f57b30cdc290a23.png"}}}],"key":"vZUNuJvw9R"}],"key":"t0bZ9fK1N2"},{"type":"block","children":[],"key":"BZMyNzYv8h"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Delete variables to save memory. This is useful when running on a machine with a small amount of RAM.\ndel pyarrow_ds\ndel pyarrow_df","key":"UiJ4qlVHX5"},{"type":"output","id":"bp1JSPc31c9OgtoJyDo1f","data":[],"key":"ZRNr8ie68n"}],"key":"npJMhiY417"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":254,"column":1},"end":{"line":254,"column":1}},"children":[{"type":"text","value":"Example 3:  Nearest-neighbor search (using pyarrow and astropy)","position":{"start":{"line":254,"column":1},"end":{"line":254,"column":1}},"key":"nSn0SAWxIn"}],"identifier":"example-3-nearest-neighbor-search-using-pyarrow-and-astropy","label":"Example 3:  Nearest-neighbor search (using pyarrow and astropy)","html_id":"example-3-nearest-neighbor-search-using-pyarrow-and-astropy","implicit":true,"key":"J83b77iLgk"}],"key":"I31hQ7Shd8"},{"type":"block","position":{"start":{"line":256,"column":1},"end":{"line":256,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":258,"column":1},"end":{"line":260,"column":1}},"children":[{"type":"text","value":"Nearest-neighbor searches and cone searches generally use the on-sky separation distance to determine the matches.\nIt would be cumbersome to construct the new column and filter on it using the methods shown above because the separation distance is a fairly complicated function of ra and dec.\nHowever, we can get pretty fast results by filtering down to the HEALPix pixels that cover the region, loading all the data in those partitions, and then using astropy to compute the separations and find the matches.","position":{"start":{"line":258,"column":1},"end":{"line":258,"column":1}},"key":"bRnyHbVcmi"}],"key":"oVEpZDQkIG"},{"type":"paragraph","position":{"start":{"line":262,"column":1},"end":{"line":265,"column":1}},"children":[{"type":"text","value":"Here, we’ll search for the 3 nearest neighbors to each of the 4 corners of our ra/dec polygon.\nWe’ll load the data with pyarrow because because it makes this query significantly faster than with pandas (see explanation in Example 2).\n(Note that astropy can also read parquet, but it can only read a single file at a time and so is less convenient.)\nWe’ll use ","position":{"start":{"line":262,"column":1},"end":{"line":262,"column":1}},"key":"r5kelOsruL"},{"type":"link","url":"https://docs.astropy.org/en/stable/api/astropy.coordinates.SkyCoord.html#astropy.coordinates.SkyCoord.match_to_catalog_sky","position":{"start":{"line":262,"column":1},"end":{"line":262,"column":1}},"children":[{"type":"text","value":"astropy​.coordinates​.SkyCoord​.match​_to​_catalog​_sky","position":{"start":{"line":262,"column":1},"end":{"line":262,"column":1}},"key":"fGd2iOFETl"}],"urlSource":"https://docs.astropy.org/en/stable/api/astropy.coordinates.SkyCoord.html#astropy.coordinates.SkyCoord.match_to_catalog_sky","key":"vCCNHE9jKp"},{"type":"text","value":" to do the actual nearest neighbor search.","position":{"start":{"line":262,"column":1},"end":{"line":262,"column":1}},"key":"Mlk3ZHr3Pz"}],"key":"H0LgZ313TA"}],"key":"X432UIBo5j"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# construct dictionary of pixels covering a cone around each polygon corner\n# we did this once before but now we want all 4 corners\ncorner_cone_pixels = {\n    (ra, dec): hp.query_circle(nside=nside, a=ra, b=dec, radius=radius, nest=True, inclusive=True)\n    for (ra, dec) in polygon_corners\n}\ncorner_cone_pixels","key":"f1DiUnbcIK"},{"type":"output","id":"QFUbfywNGZneJx5si734U","data":[{"output_type":"execute_result","execution_count":15,"metadata":{},"data":{"text/plain":{"content":"{(15, 62): array([757, 928]),\n (15, 72): array([947, 950, 953]),\n (25, 72): array([948, 949]),\n (25, 62): array([908])}","content_type":"text/plain"}}}],"key":"gFVYZFVVQR"}],"key":"DwbyUVIEYr"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":277,"column":1},"end":{"line":277,"column":1}},"children":[{"type":"text","value":"Find the 3 nearest neighbors of each corner:","position":{"start":{"line":277,"column":1},"end":{"line":277,"column":1}},"key":"cwz79mfLu5"}],"key":"Gi7tLg53ud"}],"key":"dUm2sjfBXs"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"%%time\n# expect this to take 30-60 seconds\nidcol = \"cntr\"\nneighbor_ids = []  # store the allwise source id (cntr) of each neighbor\ncorner_neighbors = {}  # record neighbor info for each corner (for reference. not actually used)\n\n# use same pyarrow dataset as before, but get it again to include the load time in this cell\npyarrow_ds = ds.parquet_dataset(f\"{parquet_root}/_metadata\", filesystem=fs, partitioning=\"hive\")\n\nfor (ra, dec), cone_pixels in corner_cone_pixels.items():\n\n    # load data from all pixels/partitions/files covering this corner\n    src_tbl = pyarrow_ds.to_table(\n        columns=[idcol, \"ra\", \"dec\"], filter=(pc.field(\"healpix_k5\").isin(cone_pixels))\n    )\n\n    # get list of 3 nearest neighbors to this corner\n    corner = SkyCoord(ra=ra * u.degree, dec=dec * u.degree)\n    allwise_sources = SkyCoord(ra=src_tbl[\"ra\"] * u.degree, dec=src_tbl[\"dec\"] * u.degree)\n    neighbors = [corner.match_to_catalog_sky(allwise_sources, nthneighbor=i) for i in range(1, 4)]\n\n    # get the allwise source ids. record/report some info\n    corner_neighbors[(ra, dec)] = []\n    for n, (idx, sep, _) in enumerate(neighbors):\n        srcid = src_tbl[idcol][idx.item()].as_py()\n        neighbor_ids.append(srcid)\n        corner_neighbors[(ra, dec)].append((srcid, sep))\n        print(f\"neighbor {n+1}, corner ({ra}, {dec}): {srcid} at on-sky dist {sep.to('arcsec')}\")\n\nneighbor_ids","key":"WVaF7NctYq"},{"type":"output","id":"zUkp3mitCDwLQNneM-QJd","data":[{"output_type":"stream","name":"stdout","text":"neighbor 1, corner (15, 62): 157162001351035963 at on-sky dist [7.90224006] arcsec\nneighbor 2, corner (15, 62): 157162001351036469 at on-sky dist [8.50715008] arcsec\nneighbor 3, corner (15, 62): 157162001351035211 at on-sky dist [10.86567525] arcsec\n"},{"output_type":"stream","name":"stdout","text":"neighbor 1, corner (15, 72): 145172601351006308 at on-sky dist [10.93439298] arcsec\nneighbor 2, corner (15, 72): 145172601351005598 at on-sky dist [25.54305849] arcsec\nneighbor 3, corner (15, 72): 145172601351004924 at on-sky dist [28.06138449] arcsec\n"},{"output_type":"stream","name":"stdout","text":"neighbor 1, corner (25, 72): 243172601351002865 at on-sky dist [12.86477229] arcsec\nneighbor 2, corner (25, 72): 243172601351004919 at on-sky dist [22.84314776] arcsec\nneighbor 3, corner (25, 72): 243172601351003808 at on-sky dist [22.86047987] arcsec\n"},{"output_type":"stream","name":"stdout","text":"neighbor 1, corner (25, 62): 252162001351031532 at on-sky dist [7.458129] arcsec\nneighbor 2, corner (25, 62): 252162001351031550 at on-sky dist [14.2719862] arcsec\nneighbor 3, corner (25, 62): 252162001351031549 at on-sky dist [18.96407889] arcsec\nCPU times: user 8.38 s, sys: 2.31 s, total: 10.7 s\nWall time: 34.2 s\n"},{"output_type":"execute_result","execution_count":16,"metadata":{},"data":{"text/plain":{"content":"[157162001351035963,\n 157162001351036469,\n 157162001351035211,\n 145172601351006308,\n 145172601351005598,\n 145172601351004924,\n 243172601351002865,\n 243172601351004919,\n 243172601351003808,\n 252162001351031532,\n 252162001351031550,\n 252162001351031549]","content_type":"text/plain"}}}],"key":"DRwb3ab46Q"}],"key":"A1mO21Usf7"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":312,"column":1},"end":{"line":312,"column":1}},"children":[{"type":"text","value":"Load all the data (all columns) for all nearest neighbors:","position":{"start":{"line":312,"column":1},"end":{"line":312,"column":1}},"key":"I86iQPMgpm"}],"key":"kYstBmGDZ7"}],"key":"qu6Xh9L3dT"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"%%time\n# expect this to take 15-25 seconds\ncone_pixels = [pixel for cone_pixels in corner_cone_pixels.values() for pixel in cone_pixels]\nneighbors_df = pyarrow_ds.to_table(\n    filter=((pc.field(idcol).isin(neighbor_ids)) & (pc.field(\"healpix_k5\").isin(cone_pixels)))\n).to_pandas()\n\nneighbors_df","key":"qNiwemkl9Z"},{"type":"output","id":"MV4COOVZZMOupfHAV6_B1","data":[{"output_type":"stream","name":"stdout","text":"CPU times: user 2.07 s, sys: 1.84 s, total: 3.91 s\nWall time: 6.46 s\n"},{"output_type":"execute_result","execution_count":17,"metadata":{},"data":{"text/plain":{"content":"            designation         ra        dec   sigra  sigdec  sigradec  \\\n0   J013958.40+620015.2  24.993333  62.004237  0.0398  0.0489   -0.0058   \n1   J013958.51+620009.7  24.993832  62.002708  0.1038  0.1627   -0.0660   \n2   J014000.56+615953.6  25.002354  61.998248  0.0398  0.0379    0.0094   \n3   J005959.07+615955.5  14.996146  61.998757  0.0868  0.0854   -0.0219   \n4   J005959.19+620006.3  14.996627  62.001754  0.1677  0.1633   -0.0432   \n5   J010001.07+620007.7  15.004480  62.002165  0.0534  0.0510    0.0053   \n6   J005956.32+720019.0  14.984687  72.005287  0.0997  0.0960   -0.0153   \n7   J010001.48+715951.5  15.006188  71.997640  0.2109  0.2034   -0.0539   \n8   J010002.55+720025.4  15.010649  72.007066  0.0514  0.0498    0.0083   \n9   J013956.82+720017.4  24.986791  72.004858  0.5317  0.5261   -0.1661   \n10  J013958.03+715950.9  24.991821  71.997474  0.0579  0.0571   -0.0024   \n11  J013959.48+715937.2  24.997836  71.993685  0.1479  0.1445   -0.0417   \n\n          glon      glat       elon       elat  ...  h_msig_2mass  k_m_2mass  \\\n0   128.594461 -0.332646  51.412734  46.989544  ...         0.040     11.843   \n1   128.594977 -0.334105  51.411840  46.988121  ...         0.054     13.759   \n2   128.599742 -0.337737  51.413364  46.982221  ...         0.032     11.662   \n3   123.934996 -0.856265  45.573400  49.619268  ...         0.162     15.280   \n4   123.935122 -0.853262  45.576424  49.621547  ...           NaN        NaN   \n5   123.938794 -0.852729  45.581382  49.619691  ...         0.055     13.940   \n6   123.596773  9.144601  56.543000  57.227891  ...         0.125     15.182   \n7   123.603758  9.137181  56.541620  57.217789  ...           NaN     15.436   \n8   123.604831  9.146649  56.555769  57.223452  ...         0.038     13.571   \n9   126.704895  9.489459  60.653660  55.154163  ...           NaN        NaN   \n10  126.707862  9.482503  60.647616  55.147453  ...         0.057     14.207   \n11  126.710442  9.479135  60.645958  55.143341  ...         0.284     15.672   \n\n    k_msig_2mass         x         y         z    spt_ind           htm20  \\\n0          0.030  0.425450  0.198330  0.882982  231130002  16887982685832   \n1          0.054  0.425469  0.198344  0.882970  231130002  16887982683755   \n2          0.019  0.425502  0.198436  0.882933  231130002  16887983158948   \n3          0.162  0.453501  0.121483  0.882937  231122233  16882422834846   \n4            NaN  0.453456  0.121474  0.882962  231122233  16882422833160   \n5          0.059  0.453433  0.121535  0.882965  231122233  16882422783986   \n6          0.143  0.298424  0.079877  0.951085  231010101  16785925865144   \n7          0.165  0.298517  0.080022  0.951044  231010101  16785926933871   \n8          0.043  0.298359  0.080005  0.951095  231010101  16785925808192   \n9            NaN  0.280022  0.130498  0.951083  231322133  17018750630425   \n10         0.064  0.280121  0.130574  0.951043  231322133  17018750602154   \n11         0.239  0.280164  0.130630  0.951022  231322133  17018750518198   \n\n    healpix_k0  healpix_k5  \n0            0         908  \n1            0         908  \n2            0         908  \n3            0         928  \n4            0         928  \n5            0         928  \n6            0         947  \n7            0         947  \n8            0         947  \n9            0         949  \n10           0         949  \n11           0         949  \n\n[12 rows x 300 columns]","content_type":"text/plain"},"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>designation</th>\n      <th>ra</th>\n      <th>dec</th>\n      <th>sigra</th>\n      <th>sigdec</th>\n      <th>sigradec</th>\n      <th>glon</th>\n      <th>glat</th>\n      <th>elon</th>\n      <th>elat</th>\n      <th>...</th>\n      <th>h_msig_2mass</th>\n      <th>k_m_2mass</th>\n      <th>k_msig_2mass</th>\n      <th>x</th>\n      <th>y</th>\n      <th>z</th>\n      <th>spt_ind</th>\n      <th>htm20</th>\n      <th>healpix_k0</th>\n      <th>healpix_k5</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>J013958.40+620015.2</td>\n      <td>24.993333</td>\n      <td>62.004237</td>\n      <td>0.0398</td>\n      <td>0.0489</td>\n      <td>-0.0058</td>\n      <td>128.594461</td>\n      <td>-0.332646</td>\n      <td>51.412734</td>\n      <td>46.989544</td>\n      <td>...</td>\n      <td>0.040</td>\n      <td>11.843</td>\n      <td>0.030</td>\n      <td>0.425450</td>\n      <td>0.198330</td>\n      <td>0.882982</td>\n      <td>231130002</td>\n      <td>16887982685832</td>\n      <td>0</td>\n      <td>908</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>J013958.51+620009.7</td>\n      <td>24.993832</td>\n      <td>62.002708</td>\n      <td>0.1038</td>\n      <td>0.1627</td>\n      <td>-0.0660</td>\n      <td>128.594977</td>\n      <td>-0.334105</td>\n      <td>51.411840</td>\n      <td>46.988121</td>\n      <td>...</td>\n      <td>0.054</td>\n      <td>13.759</td>\n      <td>0.054</td>\n      <td>0.425469</td>\n      <td>0.198344</td>\n      <td>0.882970</td>\n      <td>231130002</td>\n      <td>16887982683755</td>\n      <td>0</td>\n      <td>908</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>J014000.56+615953.6</td>\n      <td>25.002354</td>\n      <td>61.998248</td>\n      <td>0.0398</td>\n      <td>0.0379</td>\n      <td>0.0094</td>\n      <td>128.599742</td>\n      <td>-0.337737</td>\n      <td>51.413364</td>\n      <td>46.982221</td>\n      <td>...</td>\n      <td>0.032</td>\n      <td>11.662</td>\n      <td>0.019</td>\n      <td>0.425502</td>\n      <td>0.198436</td>\n      <td>0.882933</td>\n      <td>231130002</td>\n      <td>16887983158948</td>\n      <td>0</td>\n      <td>908</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>J005959.07+615955.5</td>\n      <td>14.996146</td>\n      <td>61.998757</td>\n      <td>0.0868</td>\n      <td>0.0854</td>\n      <td>-0.0219</td>\n      <td>123.934996</td>\n      <td>-0.856265</td>\n      <td>45.573400</td>\n      <td>49.619268</td>\n      <td>...</td>\n      <td>0.162</td>\n      <td>15.280</td>\n      <td>0.162</td>\n      <td>0.453501</td>\n      <td>0.121483</td>\n      <td>0.882937</td>\n      <td>231122233</td>\n      <td>16882422834846</td>\n      <td>0</td>\n      <td>928</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>J005959.19+620006.3</td>\n      <td>14.996627</td>\n      <td>62.001754</td>\n      <td>0.1677</td>\n      <td>0.1633</td>\n      <td>-0.0432</td>\n      <td>123.935122</td>\n      <td>-0.853262</td>\n      <td>45.576424</td>\n      <td>49.621547</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.453456</td>\n      <td>0.121474</td>\n      <td>0.882962</td>\n      <td>231122233</td>\n      <td>16882422833160</td>\n      <td>0</td>\n      <td>928</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>J010001.07+620007.7</td>\n      <td>15.004480</td>\n      <td>62.002165</td>\n      <td>0.0534</td>\n      <td>0.0510</td>\n      <td>0.0053</td>\n      <td>123.938794</td>\n      <td>-0.852729</td>\n      <td>45.581382</td>\n      <td>49.619691</td>\n      <td>...</td>\n      <td>0.055</td>\n      <td>13.940</td>\n      <td>0.059</td>\n      <td>0.453433</td>\n      <td>0.121535</td>\n      <td>0.882965</td>\n      <td>231122233</td>\n      <td>16882422783986</td>\n      <td>0</td>\n      <td>928</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>J005956.32+720019.0</td>\n      <td>14.984687</td>\n      <td>72.005287</td>\n      <td>0.0997</td>\n      <td>0.0960</td>\n      <td>-0.0153</td>\n      <td>123.596773</td>\n      <td>9.144601</td>\n      <td>56.543000</td>\n      <td>57.227891</td>\n      <td>...</td>\n      <td>0.125</td>\n      <td>15.182</td>\n      <td>0.143</td>\n      <td>0.298424</td>\n      <td>0.079877</td>\n      <td>0.951085</td>\n      <td>231010101</td>\n      <td>16785925865144</td>\n      <td>0</td>\n      <td>947</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>J010001.48+715951.5</td>\n      <td>15.006188</td>\n      <td>71.997640</td>\n      <td>0.2109</td>\n      <td>0.2034</td>\n      <td>-0.0539</td>\n      <td>123.603758</td>\n      <td>9.137181</td>\n      <td>56.541620</td>\n      <td>57.217789</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>15.436</td>\n      <td>0.165</td>\n      <td>0.298517</td>\n      <td>0.080022</td>\n      <td>0.951044</td>\n      <td>231010101</td>\n      <td>16785926933871</td>\n      <td>0</td>\n      <td>947</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>J010002.55+720025.4</td>\n      <td>15.010649</td>\n      <td>72.007066</td>\n      <td>0.0514</td>\n      <td>0.0498</td>\n      <td>0.0083</td>\n      <td>123.604831</td>\n      <td>9.146649</td>\n      <td>56.555769</td>\n      <td>57.223452</td>\n      <td>...</td>\n      <td>0.038</td>\n      <td>13.571</td>\n      <td>0.043</td>\n      <td>0.298359</td>\n      <td>0.080005</td>\n      <td>0.951095</td>\n      <td>231010101</td>\n      <td>16785925808192</td>\n      <td>0</td>\n      <td>947</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>J013956.82+720017.4</td>\n      <td>24.986791</td>\n      <td>72.004858</td>\n      <td>0.5317</td>\n      <td>0.5261</td>\n      <td>-0.1661</td>\n      <td>126.704895</td>\n      <td>9.489459</td>\n      <td>60.653660</td>\n      <td>55.154163</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.280022</td>\n      <td>0.130498</td>\n      <td>0.951083</td>\n      <td>231322133</td>\n      <td>17018750630425</td>\n      <td>0</td>\n      <td>949</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>J013958.03+715950.9</td>\n      <td>24.991821</td>\n      <td>71.997474</td>\n      <td>0.0579</td>\n      <td>0.0571</td>\n      <td>-0.0024</td>\n      <td>126.707862</td>\n      <td>9.482503</td>\n      <td>60.647616</td>\n      <td>55.147453</td>\n      <td>...</td>\n      <td>0.057</td>\n      <td>14.207</td>\n      <td>0.064</td>\n      <td>0.280121</td>\n      <td>0.130574</td>\n      <td>0.951043</td>\n      <td>231322133</td>\n      <td>17018750602154</td>\n      <td>0</td>\n      <td>949</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>J013959.48+715937.2</td>\n      <td>24.997836</td>\n      <td>71.993685</td>\n      <td>0.1479</td>\n      <td>0.1445</td>\n      <td>-0.0417</td>\n      <td>126.710442</td>\n      <td>9.479135</td>\n      <td>60.645958</td>\n      <td>55.143341</td>\n      <td>...</td>\n      <td>0.284</td>\n      <td>15.672</td>\n      <td>0.239</td>\n      <td>0.280164</td>\n      <td>0.130630</td>\n      <td>0.951022</td>\n      <td>231322133</td>\n      <td>17018750518198</td>\n      <td>0</td>\n      <td>949</td>\n    </tr>\n  </tbody>\n</table>\n<p>12 rows × 300 columns</p>\n</div>","content_type":"text/html"}}}],"key":"a12eO5uPGy"}],"key":"EVVuICjisM"},{"type":"block","children":[],"key":"aGwLZfw2Ip"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Delete variables to save memory. This is useful when running on a machine with a small amount of RAM.\ndel pyarrow_ds\ndel neighbors_df","key":"iGh1k6TiD9"},{"type":"output","id":"IjHHl_fKELtpRqMW8ADQp","data":[],"key":"j3ibwnS1zI"}],"key":"LZ9lmksIMI"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":331,"column":1},"end":{"line":331,"column":1}},"children":[{"type":"text","value":"Schema Access","position":{"start":{"line":331,"column":1},"end":{"line":331,"column":1}},"key":"ueEcbVHhMR"}],"identifier":"schema-access","label":"Schema Access","html_id":"schema-access","implicit":true,"key":"XwCZgT2Mqp"}],"key":"s3NwWlMSoz"},{"type":"block","position":{"start":{"line":333,"column":1},"end":{"line":333,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":335,"column":1},"end":{"line":338,"column":1}},"children":[{"type":"text","value":"The schema can be viewed ","position":{"start":{"line":335,"column":1},"end":{"line":335,"column":1}},"key":"uQ97kNxbwv"},{"type":"link","url":"http://wise2.ipac.caltech.edu/docs/release/allwise/expsup/sec2_1a.html","position":{"start":{"line":335,"column":1},"end":{"line":335,"column":1}},"children":[{"type":"text","value":"online","position":{"start":{"line":335,"column":1},"end":{"line":335,"column":1}},"key":"zpnNHmEkJM"}],"urlSource":"http://wise2.ipac.caltech.edu/docs/release/allwise/expsup/sec2_1a.html","key":"pdXI4xPggV"},{"type":"text","value":" and also accessed from the parquet catalog itself.\nThe example below loads it using the ","position":{"start":{"line":335,"column":1},"end":{"line":335,"column":1}},"key":"CALSqGKG5m"},{"type":"inlineCode","value":"_common_metadata","position":{"start":{"line":335,"column":1},"end":{"line":335,"column":1}},"key":"qaJ5QklkwS"},{"type":"text","value":" file and ","position":{"start":{"line":335,"column":1},"end":{"line":335,"column":1}},"key":"bx3Nj2hUhu"},{"type":"link","url":"https://arrow.apache.org/docs/python/generated/pyarrow.dataset.parquet_dataset.html","position":{"start":{"line":335,"column":1},"end":{"line":335,"column":1}},"children":[{"type":"text","value":"pyarrow​.dataset​.parquet​_dataset","position":{"start":{"line":335,"column":1},"end":{"line":335,"column":1}},"key":"UPnXgldGbO"}],"urlSource":"https://arrow.apache.org/docs/python/generated/pyarrow.dataset.parquet_dataset.html","key":"awD2RnzQz8"},{"type":"text","value":".\nNote that the schema can also be accessed from the metadata in the footer of each Parquet file and from the ","position":{"start":{"line":335,"column":1},"end":{"line":335,"column":1}},"key":"aRepnJUvz3"},{"type":"inlineCode","value":"_metadata","position":{"start":{"line":335,"column":1},"end":{"line":335,"column":1}},"key":"vOJGfvLICF"},{"type":"text","value":" file, but the method used here is generally faster and easier.\nIn addition, this ","position":{"start":{"line":335,"column":1},"end":{"line":335,"column":1}},"key":"RqtTyHjmo0"},{"type":"inlineCode","value":"_common_metadata","position":{"start":{"line":335,"column":1},"end":{"line":335,"column":1}},"key":"Vyd04xIgS0"},{"type":"text","value":" file has extra information (units and descriptions) stored in the custom metadata of each column.","position":{"start":{"line":335,"column":1},"end":{"line":335,"column":1}},"key":"X4X884VcET"}],"key":"EujADtO9Xi"}],"key":"BpdsoLtPEp"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"schema = ds.parquet_dataset(f\"{parquet_root}/_common_metadata\", filesystem=fs).schema","key":"c5mqKMKM0E"},{"type":"output","id":"9RU0qJJSmtCRZeLFc0N5B","data":[],"key":"AP19glYehg"}],"key":"kS4keWT9jJ"},{"type":"block","children":[],"key":"ycK1fgov3K"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# access individual columns by name or index\nfld = schema.field(1)  # equivalently: fld = schema.field(\"ra\")\n\n# basic column information\nprint(fld.name)\nprint(fld.type)\nprint(fld.nullable)\n\n# units and descriptions are in the `metadata` attribute, always as bytestrings\nprint(fld.metadata)\nprint(fld.metadata[b\"units\"].decode())  # use decode to get a regular string\nprint(fld.metadata[b\"description\"].decode())","key":"ZJgh9SbzkH"},{"type":"output","id":"c-1SusNuxJpTfNVr31Gee","data":[{"output_type":"stream","name":"stdout","text":"ra\ndouble\nFalse\n{b'units': b'deg', b'description': b'J2000 right ascension with respect to the 2MASS PSC reference frame from the non-moving source extraction.'}\ndeg\nJ2000 right ascension with respect to the 2MASS PSC reference frame from the non-moving source extraction.\n"}],"key":"vNiV7Qjf5Z"}],"key":"txSiCUdWF0"},{"type":"block","children":[],"key":"M9FoPXxNKj"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# full list of column names\nschema.names","key":"bToPnV4ed5"},{"type":"output","id":"8n-52TcE3rCLmYZm-nRvN","data":[{"output_type":"execute_result","execution_count":21,"metadata":{},"data":{"text/plain":{"content":"['designation',\n 'ra',\n 'dec',\n 'sigra',\n 'sigdec',\n 'sigradec',\n 'glon',\n 'glat',\n 'elon',\n 'elat',\n 'wx',\n 'wy',\n 'cntr',\n 'source_id',\n 'coadd_id',\n 'src',\n 'w1mpro',\n 'w1sigmpro',\n 'w1snr',\n 'w1rchi2',\n 'w2mpro',\n 'w2sigmpro',\n 'w2snr',\n 'w2rchi2',\n 'w3mpro',\n 'w3sigmpro',\n 'w3snr',\n 'w3rchi2',\n 'w4mpro',\n 'w4sigmpro',\n 'w4snr',\n 'w4rchi2',\n 'rchi2',\n 'nb',\n 'na',\n 'w1sat',\n 'w2sat',\n 'w3sat',\n 'w4sat',\n 'satnum',\n 'ra_pm',\n 'dec_pm',\n 'sigra_pm',\n 'sigdec_pm',\n 'sigradec_pm',\n 'pmra',\n 'sigpmra',\n 'pmdec',\n 'sigpmdec',\n 'w1rchi2_pm',\n 'w2rchi2_pm',\n 'w3rchi2_pm',\n 'w4rchi2_pm',\n 'rchi2_pm',\n 'pmcode',\n 'cc_flags',\n 'rel',\n 'ext_flg',\n 'var_flg',\n 'ph_qual',\n 'det_bit',\n 'moon_lev',\n 'w1nm',\n 'w1m',\n 'w2nm',\n 'w2m',\n 'w3nm',\n 'w3m',\n 'w4nm',\n 'w4m',\n 'w1cov',\n 'w2cov',\n 'w3cov',\n 'w4cov',\n 'w1cc_map',\n 'w1cc_map_str',\n 'w2cc_map',\n 'w2cc_map_str',\n 'w3cc_map',\n 'w3cc_map_str',\n 'w4cc_map',\n 'w4cc_map_str',\n 'best_use_cntr',\n 'ngrp',\n 'w1flux',\n 'w1sigflux',\n 'w1sky',\n 'w1sigsk',\n 'w1conf',\n 'w2flux',\n 'w2sigflux',\n 'w2sky',\n 'w2sigsk',\n 'w2conf',\n 'w3flux',\n 'w3sigflux',\n 'w3sky',\n 'w3sigsk',\n 'w3conf',\n 'w4flux',\n 'w4sigflux',\n 'w4sky',\n 'w4sigsk',\n 'w4conf',\n 'w1mag',\n 'w1sigm',\n 'w1flg',\n 'w1mcor',\n 'w2mag',\n 'w2sigm',\n 'w2flg',\n 'w2mcor',\n 'w3mag',\n 'w3sigm',\n 'w3flg',\n 'w3mcor',\n 'w4mag',\n 'w4sigm',\n 'w4flg',\n 'w4mcor',\n 'w1mag_1',\n 'w1sigm_1',\n 'w1flg_1',\n 'w2mag_1',\n 'w2sigm_1',\n 'w2flg_1',\n 'w3mag_1',\n 'w3sigm_1',\n 'w3flg_1',\n 'w4mag_1',\n 'w4sigm_1',\n 'w4flg_1',\n 'w1mag_2',\n 'w1sigm_2',\n 'w1flg_2',\n 'w2mag_2',\n 'w2sigm_2',\n 'w2flg_2',\n 'w3mag_2',\n 'w3sigm_2',\n 'w3flg_2',\n 'w4mag_2',\n 'w4sigm_2',\n 'w4flg_2',\n 'w1mag_3',\n 'w1sigm_3',\n 'w1flg_3',\n 'w2mag_3',\n 'w2sigm_3',\n 'w2flg_3',\n 'w3mag_3',\n 'w3sigm_3',\n 'w3flg_3',\n 'w4mag_3',\n 'w4sigm_3',\n 'w4flg_3',\n 'w1mag_4',\n 'w1sigm_4',\n 'w1flg_4',\n 'w2mag_4',\n 'w2sigm_4',\n 'w2flg_4',\n 'w3mag_4',\n 'w3sigm_4',\n 'w3flg_4',\n 'w4mag_4',\n 'w4sigm_4',\n 'w4flg_4',\n 'w1mag_5',\n 'w1sigm_5',\n 'w1flg_5',\n 'w2mag_5',\n 'w2sigm_5',\n 'w2flg_5',\n 'w3mag_5',\n 'w3sigm_5',\n 'w3flg_5',\n 'w4mag_5',\n 'w4sigm_5',\n 'w4flg_5',\n 'w1mag_6',\n 'w1sigm_6',\n 'w1flg_6',\n 'w2mag_6',\n 'w2sigm_6',\n 'w2flg_6',\n 'w3mag_6',\n 'w3sigm_6',\n 'w3flg_6',\n 'w4mag_6',\n 'w4sigm_6',\n 'w4flg_6',\n 'w1mag_7',\n 'w1sigm_7',\n 'w1flg_7',\n 'w2mag_7',\n 'w2sigm_7',\n 'w2flg_7',\n 'w3mag_7',\n 'w3sigm_7',\n 'w3flg_7',\n 'w4mag_7',\n 'w4sigm_7',\n 'w4flg_7',\n 'w1mag_8',\n 'w1sigm_8',\n 'w1flg_8',\n 'w2mag_8',\n 'w2sigm_8',\n 'w2flg_8',\n 'w3mag_8',\n 'w3sigm_8',\n 'w3flg_8',\n 'w4mag_8',\n 'w4sigm_8',\n 'w4flg_8',\n 'w1magp',\n 'w1sigp1',\n 'w1sigp2',\n 'w1k',\n 'w1ndf',\n 'w1mlq',\n 'w1mjdmin',\n 'w1mjdmax',\n 'w1mjdmean',\n 'w2magp',\n 'w2sigp1',\n 'w2sigp2',\n 'w2k',\n 'w2ndf',\n 'w2mlq',\n 'w2mjdmin',\n 'w2mjdmax',\n 'w2mjdmean',\n 'w3magp',\n 'w3sigp1',\n 'w3sigp2',\n 'w3k',\n 'w3ndf',\n 'w3mlq',\n 'w3mjdmin',\n 'w3mjdmax',\n 'w3mjdmean',\n 'w4magp',\n 'w4sigp1',\n 'w4sigp2',\n 'w4k',\n 'w4ndf',\n 'w4mlq',\n 'w4mjdmin',\n 'w4mjdmax',\n 'w4mjdmean',\n 'rho12',\n 'rho23',\n 'rho34',\n 'q12',\n 'q23',\n 'q34',\n 'xscprox',\n 'w1rsemi',\n 'w1ba',\n 'w1pa',\n 'w1gmag',\n 'w1gerr',\n 'w1gflg',\n 'w2rsemi',\n 'w2ba',\n 'w2pa',\n 'w2gmag',\n 'w2gerr',\n 'w2gflg',\n 'w3rsemi',\n 'w3ba',\n 'w3pa',\n 'w3gmag',\n 'w3gerr',\n 'w3gflg',\n 'w4rsemi',\n 'w4ba',\n 'w4pa',\n 'w4gmag',\n 'w4gerr',\n 'w4gflg',\n 'tmass_key',\n 'r_2mass',\n 'pa_2mass',\n 'n_2mass',\n 'j_m_2mass',\n 'j_msig_2mass',\n 'h_m_2mass',\n 'h_msig_2mass',\n 'k_m_2mass',\n 'k_msig_2mass',\n 'x',\n 'y',\n 'z',\n 'spt_ind',\n 'htm20',\n 'healpix_k0',\n 'healpix_k5']","content_type":"text/plain"}}}],"key":"MsVF32Xxij"}],"key":"CRYSFFB6Bm"},{"type":"block","children":[{"type":"thematicBreak","position":{"start":{"line":364,"column":1},"end":{"line":364,"column":1}},"key":"bPbxDE3Dtt"},{"type":"heading","depth":2,"position":{"start":{"line":366,"column":1},"end":{"line":366,"column":1}},"children":[{"type":"text","value":"About this notebook","position":{"start":{"line":366,"column":1},"end":{"line":366,"column":1}},"key":"uKDqn9paaV"}],"identifier":"about-this-notebook","label":"About this notebook","html_id":"about-this-notebook","implicit":true,"key":"xP8CWUOt7O"},{"type":"paragraph","position":{"start":{"line":368,"column":1},"end":{"line":368,"column":1}},"children":[{"type":"strong","position":{"start":{"line":368,"column":1},"end":{"line":368,"column":1}},"children":[{"type":"text","value":"Author:","position":{"start":{"line":368,"column":1},"end":{"line":368,"column":1}},"key":"uWevwTGniu"}],"key":"BnZ7FV8acH"},{"type":"text","value":" Troy Raen (IRSA Developer) in conjunction with David Shupe, Jessica Krick and the IPAC Science Platform team","position":{"start":{"line":368,"column":1},"end":{"line":368,"column":1}},"key":"Pwtxee7VgQ"}],"key":"to8dmMjTqi"},{"type":"paragraph","position":{"start":{"line":370,"column":1},"end":{"line":370,"column":1}},"children":[{"type":"strong","position":{"start":{"line":370,"column":1},"end":{"line":370,"column":1}},"children":[{"type":"text","value":"Updated:","position":{"start":{"line":370,"column":1},"end":{"line":370,"column":1}},"key":"rTrpLo4Npy"}],"key":"vSIuWK7C9c"},{"type":"text","value":" 2023-07-27","position":{"start":{"line":370,"column":1},"end":{"line":370,"column":1}},"key":"kdJ4y8GmuP"}],"key":"flwuHVuUiM"},{"type":"paragraph","position":{"start":{"line":372,"column":1},"end":{"line":372,"column":1}},"children":[{"type":"strong","position":{"start":{"line":372,"column":1},"end":{"line":372,"column":1}},"children":[{"type":"text","value":"Contact:","position":{"start":{"line":372,"column":1},"end":{"line":372,"column":1}},"key":"ZGf6UkhctH"}],"key":"TSK3u2maQ4"},{"type":"text","value":" ","position":{"start":{"line":372,"column":1},"end":{"line":372,"column":1}},"key":"PC58x9kuBh"},{"type":"link","url":"https://irsa.ipac.caltech.edu/docs/help_desk.html","position":{"start":{"line":372,"column":1},"end":{"line":372,"column":1}},"children":[{"type":"text","value":"the IRSA Helpdesk","position":{"start":{"line":372,"column":1},"end":{"line":372,"column":1}},"key":"JCNeYOwk2A"}],"urlSource":"https://irsa.ipac.caltech.edu/docs/help_desk.html","key":"NYmjToUyim"},{"type":"text","value":" with questions or reporting problems.","position":{"start":{"line":372,"column":1},"end":{"line":372,"column":1}},"key":"YzwKZNWqdO"}],"key":"gcKjYQFexy"}],"key":"XTWHGNpF2P"}],"key":"QVYIRv0zLL"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Searching for AllWISE Atlas Images","url":"/sia-allwise-atlas","group":"AllWISE"},"next":{"title":"Using Firefly visualization tools to understand the light curves of Solar System objects","url":"/neowise-light-curve-demo","group":"NEOWISE"}}},"domain":"http://localhost:3000"}