{"version":2,"kind":"Notebook","sha256":"8c7b2bb5a044642fbe1a41c614c727094c5ab7e1e4abb8e32afcd657825ef8c8","slug":"neowise-source-table-lightcurves","location":"/tutorials/parquet-catalog-demos/neowise-source-table-lightcurves.md","dependencies":[],"frontmatter":{"title":"Make Light Curves from NEOWISE Single-exposure Source Table","kernelspec":{"name":"python3","display_name":"science_demo","language":"python"},"jupytext":{"text_representation":{"extension":".md","format_name":"myst","format_version":"0.13","jupytext_version":"1.16.1"}},"skip_execution":true,"content_includes_title":false,"authors":[{"id":"IRSA Scientists and Developers","name":"IRSA Scientists and Developers"}],"github":"https://github.com/Caltech-IPAC/irsa-tutorials/","subject":"IRSA Tutorials","keywords":["astronomy"],"settings":{"output_matplotlib_strings":"remove"},"numbering":{"title":{"offset":2}},"edit_url":"https://github.com/Caltech-IPAC/irsa-tutorials//blob/main/tutorials/parquet-catalog-demos/neowise-source-table-lightcurves.md","exports":[{"format":"md","filename":"neowise-source-table-lightcurves.md","url":"/irsa-tutorials/build/neowise-source-table-3967fdbc1c1a9545dcbeaa0bbced20ec.md"}]},"mdast":{"type":"root","children":[{"type":"block","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":19,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"text","value":"An executed version of this notebook can be seen on\n","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"RQTWh78y1f"},{"type":"link","url":"https://irsa.ipac.caltech.edu/docs/notebooks/neowise-source-table-lightcurves.html","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"text","value":"IRSA’s website","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"Dk4lPtUU5q"}],"urlSource":"https://irsa.ipac.caltech.edu/docs/notebooks/neowise-source-table-lightcurves.html","key":"O5l9fBsJPh"},{"type":"text","value":".","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"Pynspp6MqU"}],"key":"qae3X2dytY"}],"key":"w4KT67GQlq"},{"type":"block","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"children":[{"type":"text","value":"Learning Goals:","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"key":"PeyxG3vtsT"}],"key":"e7AGll1Z5l"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":26,"column":1},"end":{"line":32,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":26,"column":1},"end":{"line":30,"column":1}},"children":[{"type":"text","value":"Search the NEOWISE Single-exposure Source Table (Parquet version) for the light curves of a\nset of targets with RA/Dec coordinates.","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"aTlAL2JEJs"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":28,"column":1},"end":{"line":30,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"children":[{"type":"text","value":"Write a pyarrow dataset filter and use it to load the NEOWISE detections near each target (rough cut).","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"OuSwm8UpdS"}],"key":"l3T7UsjXDy"},{"type":"listItem","spread":true,"position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"children":[{"type":"text","value":"Match targets to detections using an astropy cone search (precise cut).","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"fEfW4kudGu"}],"key":"zTCfVQco0Y"},{"type":"listItem","spread":true,"position":{"start":{"line":30,"column":1},"end":{"line":30,"column":1}},"children":[{"type":"text","value":"Parallelize this.","position":{"start":{"line":30,"column":1},"end":{"line":30,"column":1}},"key":"NEgHIbgsQm"}],"key":"qXmrg8DOlP"}],"key":"KvSdVAh9Db"}],"key":"vYJTAS5gZM"},{"type":"listItem","spread":true,"position":{"start":{"line":31,"column":1},"end":{"line":32,"column":1}},"children":[{"type":"text","value":"Plot the light curves.","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"key":"gnZARFFkxE"}],"key":"U4I1r9APod"}],"key":"nKtAshGp2l"}],"key":"BloOnpOpHP"},{"type":"block","position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"children":[{"type":"heading","depth":2,"position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"children":[{"type":"text","value":"1. Introduction","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"OjKiHyvkbH"}],"identifier":"id-1-introduction","label":"1. Introduction","html_id":"id-1-introduction","implicit":true,"key":"tHTZgX7PEj"},{"type":"paragraph","position":{"start":{"line":37,"column":1},"end":{"line":47,"column":1}},"children":[{"type":"text","value":"This notebook loads light curves from the\n","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"oT9cYbIScn"},{"type":"link","url":"https://irsa.ipac.caltech.edu/Missions/wise.html","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"children":[{"type":"text","value":"NEOWISE","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"o6UDoeaYsz"}],"urlSource":"https://irsa.ipac.caltech.edu/Missions/wise.html","key":"zC88oGeP0S"},{"type":"text","value":" Single-exposure Source Table\nfor a sample of about 2000 cataclysmic variables from ","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"Dg2cj0j1Kg"},{"type":"cite","url":"https://doi.org/10.1086/320802","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"children":[{"type":"text","value":"Downes et al. (2001)","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"DFW76JFzo2"}],"kind":"narrative","label":"Downes_2001","identifier":"https://doi.org/10.1086/320802","enumerator":"1","key":"pX6mHWgHuX"},{"type":"text","value":".\nThe NEOWISE Single-exposure Source Table is a very large catalog -- 11 years and 42 terabytes in total\nwith 145 columns and 200 billion rows.\nWhen searching this catalog, it is important to consider the requirements of your use case and\nthe format of this dataset.\nThis notebook applies the techniques developed in\n","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"edrAcUNbZj"},{"type":"link","url":"https://irsa.ipac.caltech.edu/docs/notebooks/neowise-source-table-strategies.html","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"children":[{"type":"text","value":"Strategies to Efficiently Work with NEOWISE Single-exposure Source Table in Parquet","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"bOJK8VdnCq"}],"urlSource":"https://irsa.ipac.caltech.edu/docs/notebooks/neowise-source-table-strategies.html","key":"V7egG8ZYy9"},{"type":"text","value":".\nThis is a fully-worked example that demonstrates the important steps, but note that this is a\nrelatively small use case for the Parquet version of the dataset.","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"DpVvYgcD0E"}],"key":"JqA1i3MLaz"},{"type":"paragraph","position":{"start":{"line":49,"column":1},"end":{"line":49,"column":1}},"children":[{"type":"text","value":"The specific strategy we employ is:","position":{"start":{"line":49,"column":1},"end":{"line":49,"column":1}},"key":"bUTfC7bQIh"}],"key":"GmzH1OH3BQ"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":51,"column":1},"end":{"line":63,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":51,"column":1},"end":{"line":52,"column":1}},"children":[{"type":"text","value":"Choose a cone search radius that determines which NEOWISE source detections to associate\nwith each target.","position":{"start":{"line":51,"column":1},"end":{"line":51,"column":1}},"key":"hOZhv0C3HV"}],"key":"KelzFHDWfS"},{"type":"listItem","spread":true,"position":{"start":{"line":53,"column":1},"end":{"line":53,"column":1}},"children":[{"type":"text","value":"Load the sample of CV targets.","position":{"start":{"line":53,"column":1},"end":{"line":53,"column":1}},"key":"MdjWRwQuib"}],"key":"jcAILHJUv1"},{"type":"listItem","spread":true,"position":{"start":{"line":54,"column":1},"end":{"line":55,"column":1}},"children":[{"type":"text","value":"Calculate the indexes of all HEALPix order k=5 pixels within the radius of each target.\nThese are the dataset partitions that need to be searched.","position":{"start":{"line":54,"column":1},"end":{"line":54,"column":1}},"key":"dedMhVdp3H"}],"key":"uhpPAIHqyn"},{"type":"listItem","spread":true,"position":{"start":{"line":56,"column":1},"end":{"line":61,"column":1}},"children":[{"type":"text","value":"Parallelize over the partitions using ","position":{"start":{"line":56,"column":1},"end":{"line":56,"column":1}},"key":"QLS60OxbZ5"},{"type":"inlineCode","value":"multiprocessing.Pool","position":{"start":{"line":56,"column":1},"end":{"line":56,"column":1}},"key":"xjsxOrXEbw"},{"type":"text","value":".\nFor each pixel:","position":{"start":{"line":56,"column":1},"end":{"line":56,"column":1}},"key":"Ei1DQIPLMK"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":58,"column":1},"end":{"line":61,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":58,"column":1},"end":{"line":58,"column":1}},"children":[{"type":"text","value":"Construct a dataset filter for NEOWISE sources in the vicinity of the targets in the partition.","position":{"start":{"line":58,"column":1},"end":{"line":58,"column":1}},"key":"LYbwG2JG8u"}],"key":"j8xwUTNgz2"},{"type":"listItem","spread":true,"position":{"start":{"line":59,"column":1},"end":{"line":59,"column":1}},"children":[{"type":"text","value":"Load data, applying the filter. In our case, the number of rows loaded will be fairly small.","position":{"start":{"line":59,"column":1},"end":{"line":59,"column":1}},"key":"oMxdTRWKKv"}],"key":"u1GK2uJ6yU"},{"type":"listItem","spread":true,"position":{"start":{"line":60,"column":1},"end":{"line":60,"column":1}},"children":[{"type":"text","value":"Do a cone search to match sources with targets in the partition.","position":{"start":{"line":60,"column":1},"end":{"line":60,"column":1}},"key":"GofM9Lw63U"}],"key":"fBQIPCfINi"},{"type":"listItem","spread":true,"position":{"start":{"line":61,"column":1},"end":{"line":61,"column":1}},"children":[{"type":"text","value":"Return the results.","position":{"start":{"line":61,"column":1},"end":{"line":61,"column":1}},"key":"l7IP4ZKRBd"}],"key":"ORLayR76hu"}],"key":"ZAkl3fnm7g"}],"key":"apZAKwd9F0"},{"type":"listItem","spread":true,"position":{"start":{"line":62,"column":1},"end":{"line":63,"column":1}},"children":[{"type":"text","value":"Concatenate the cone search results, groupby target ID, and sort by time to construct the light curves.","position":{"start":{"line":62,"column":1},"end":{"line":62,"column":1}},"key":"Mby07VUuwx"}],"key":"gCTuUnAJUQ"}],"key":"nbyrdsGsXi"},{"type":"paragraph","position":{"start":{"line":64,"column":1},"end":{"line":72,"column":1}},"children":[{"type":"text","value":"The efficiency of this method will increase with the number of rows needed from each partition.\nFor example, a cone search radius of 1 arcsec will require about 10 CPUs, 65G RAM, and\n50 minutes to load the data from all 11 NEOWISE years.\nIncreasing the radius to 10 arcsec will return about 2.5x more rows using roughly the same resources.\nIncreasing the target sample size can result in similar efficiency gains.\nTo try out this notebook with fewer resources, use a subset of NEOWISE years.\nUsing one year is expected to require about 5 CPUs, 20G RAM, and 10 minutes.\nThese estimates are based on testing in science platform environments.\nYour numbers will vary based on many factors including compute power, bandwidth, and physical distance from the data.","position":{"start":{"line":64,"column":1},"end":{"line":64,"column":1}},"key":"snLeSyGkH8"}],"key":"xnClN30bCh"}],"key":"XzWcv7DWx1"},{"type":"block","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"children":[{"type":"heading","depth":2,"position":{"start":{"line":76,"column":1},"end":{"line":76,"column":1}},"children":[{"type":"text","value":"2. Imports","position":{"start":{"line":76,"column":1},"end":{"line":76,"column":1}},"key":"wd8yY5iHOO"}],"identifier":"id-2-imports","label":"2. Imports","html_id":"id-2-imports","implicit":true,"key":"C3Pc2YfOqz"}],"key":"gOYgXoChjl"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Uncomment the next line to install dependencies if needed.\n# !pip install astropy astroquery hpgeom matplotlib pandas pyarrow pyvo","key":"CgQhWY63eW"},{"type":"output","id":"F4vQSl0W5CfZkQK0AYCm_","data":[],"key":"EswhO5eXm5"}],"key":"Wk13GJ3FkY"},{"type":"block","children":[],"key":"tkKoz9d791"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import multiprocessing  # parallelization\n\nimport astroquery.vizier  # fetch the sample of CV targets\nimport hpgeom  # HEALPix math\nimport numpy as np  # math\nimport pandas as pd  # manipulate tabular data\nimport pyarrow.compute  # construct dataset filters\nimport pyarrow.dataset  # load and query the NEOWISE dataset\nimport pyarrow.fs  # interact with the S3 bucket storing the NEOWISE catalog\nimport pyvo  # TAP service for the Vizier query\nfrom astropy import units as u  # manipulate astropy quantities\nfrom astropy.coordinates import SkyCoord  # manipulate sky coordinates\nfrom matplotlib import pyplot as plt  # plot light curves\n\n# copy-on-write will become the default in pandas 3.0 and is generally more performant\npd.options.mode.copy_on_write = True","key":"mzHp7InqMd"},{"type":"output","id":"cZlnYR5z5YDQRcmIDa-wj","data":[],"key":"SHTbYA3OzS"}],"key":"Lfux95G8R2"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":102,"column":1},"end":{"line":102,"column":1}},"children":[{"type":"text","value":"3. Setup","position":{"start":{"line":102,"column":1},"end":{"line":102,"column":1}},"key":"SmS6t2HgSY"}],"identifier":"id-3-setup","label":"3. Setup","html_id":"id-3-setup","implicit":true,"key":"XNOtAqtE1t"}],"key":"zlXzJIGvCk"},{"type":"block","position":{"start":{"line":104,"column":1},"end":{"line":104,"column":1}},"children":[{"type":"heading","depth":3,"position":{"start":{"line":106,"column":1},"end":{"line":106,"column":1}},"children":[{"type":"text","value":"3.1 Define variables","position":{"start":{"line":106,"column":1},"end":{"line":106,"column":1}},"key":"LywlrGlYL7"}],"identifier":"id-3-1-define-variables","label":"3.1 Define variables","html_id":"id-3-1-define-variables","implicit":true,"key":"YO66i3nN8D"},{"type":"paragraph","position":{"start":{"line":108,"column":1},"end":{"line":110,"column":1}},"children":[{"type":"text","value":"First, choose which NEOWISE years to include.\nReal use cases are likely to require all ten years but it can be helpful to start with\nfewer while exploring to make things run faster.","position":{"start":{"line":108,"column":1},"end":{"line":108,"column":1}},"key":"U4JKqc8GCU"}],"key":"WRHlRob5AY"}],"key":"QS0LpX422P"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# all years => about 11 CPU, 65G RAM, and 50 minutes runtime\nYEARS = [f\"year{yr}\" for yr in range(1, 12)] + [\"addendum\"]\n\n# To try out a smaller version of the notebook,\n# uncomment the next line and choose your own subset of years.\n# YEARS = [10]  # one year => about 5 CPU, 20G RAM, and 10 minutes runtime","key":"qesHixsm1i"},{"type":"output","id":"-MfOk7D5FrWSnblQ_l-q0","data":[],"key":"cJcpg2z3gl"}],"key":"FQCdEKmT79"},{"type":"block","children":[],"key":"lzKBndeaag"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# sets of columns that we'll need\nFLUX_COLUMNS = [\"w1flux\", \"w2flux\"]\nLIGHTCURVE_COLUMNS = [\"mjd\"] + FLUX_COLUMNS\nCOLUMN_SUBSET = [\"cntr\", \"ra\", \"dec\"] + LIGHTCURVE_COLUMNS\n\n# cone-search radius defining which NEOWISE sources are associated with each target object\nMATCH_RADIUS = 1 * u.arcsec","key":"YkY6lvxQMu"},{"type":"output","id":"VtBTBWgRWKSNEqSybsKqh","data":[],"key":"lLpwGprVre"}],"key":"RXJ16bOaJE"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"children":[{"type":"text","value":"3.2 Load NEOWISE metadata","position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"key":"uLw1Rq3iYD"}],"identifier":"id-3-2-load-neowise-metadata","label":"3.2 Load NEOWISE metadata","html_id":"id-3-2-load-neowise-metadata","implicit":true,"key":"Z9f96uhw2l"}],"key":"H2jh51s3IM"},{"type":"block","position":{"start":{"line":133,"column":1},"end":{"line":133,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":135,"column":1},"end":{"line":136,"column":1}},"children":[{"type":"text","value":"The metadata contains column names, schema, and row-group statistics for every file in the dataset.\nWe’ll load it as a pyarrow dataset.","position":{"start":{"line":135,"column":1},"end":{"line":135,"column":1}},"key":"b2SFqHapHt"}],"key":"T1EmlKvaEv"}],"key":"SHFIhE6LOC"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# This catalog is so big that even the metadata is big.\n# Expect this cell to take about 30 seconds per year.\n\n# This information can be found at https://irsa.ipac.caltech.edu/cloud_access/.\nbucket = \"nasa-irsa-wise\"\nbase_prefix = \"wise/neowiser/catalogs/p1bs_psd/healpix_k5\"\nmetadata_path = (\n    lambda yr: f\"{bucket}/{base_prefix}/{yr}/neowiser-healpix_k5-{yr}.parquet/_metadata\"\n)\nfs = pyarrow.fs.S3FileSystem(region=\"us-west-2\", anonymous=True)\n\n# list of datasets, one per year\nyear_datasets = [\n    pyarrow.dataset.parquet_dataset(metadata_path(yr), filesystem=fs, partitioning=\"hive\")\n    for yr in YEARS\n]\n\n# unified dataset, all years\nneowise_ds = pyarrow.dataset.dataset(year_datasets)","key":"vQrM2aleDw"},{"type":"output","id":"eSszAV9GR2CKAcyQj7jxz","data":[],"key":"d1ILrjTULU"}],"key":"CXK9DnqJLe"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":160,"column":1},"end":{"line":160,"column":1}},"children":[{"type":"text","value":"4. Define functions to filter and load data","position":{"start":{"line":160,"column":1},"end":{"line":160,"column":1}},"key":"IBl9X2U0Xm"}],"identifier":"id-4-define-functions-to-filter-and-load-data","label":"4. Define functions to filter and load data","html_id":"id-4-define-functions-to-filter-and-load-data","implicit":true,"key":"sJZHKOMnio"}],"key":"BUy0hskF0a"},{"type":"block","position":{"start":{"line":162,"column":1},"end":{"line":162,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":164,"column":1},"end":{"line":167,"column":1}},"children":[{"type":"text","value":"These functions will be used in the next section.\nDefining them here in the notebook is useful for demonstration and should work seamlessly on Linux, which includes most science platforms.\nMac and Windows users should see the note at the end of the notebook.\nHowever, note that this use case is likely too large for a laptop and may perform poorly and/or crash if attempted.","position":{"start":{"line":164,"column":1},"end":{"line":164,"column":1}},"key":"jtMyPhfJdl"}],"key":"WRkxNVinbF"}],"key":"tZtaGZ5qyf"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# If you have your own list of target objects, replace this function to load your sample.\ndef load_targets_Downes2001(radius=1 * u.arcsec):\n    \"\"\"Load a sample of targets and return a pandas DataFrame.\n\n    References:\n    - Downes et al., 2001 ([2001PASP..113..764D](https://ui.adsabs.harvard.edu/abs/2001PASP..113..764D/abstract)).\n    - https://cdsarc.cds.unistra.fr/ftp/V/123A/ReadMe\n\n    Parameters\n    ----------\n    radius : astropy.Quantity (optional)\n        Radius for the cone search around each target. This is used to determine which partition(s)\n        need to be searched for a given target. Use the same radius here as in the rest of the notebook.\n\n    Returns\n    -------\n    pandas.DataFrame\n        The loaded targets with the following columns:\n            - uid: Unique identifier of the target.\n            - GCVS: Name in the General Catalogue of Variable Stars if it exists, else the constellation name.\n            - RAJ2000: Right Ascension of the target in J2000 coordinates.\n            - DEJ2000: Declination of the target in J2000 coordinates.\n            - healpix_k5: HEALPix pixel index at order k=5.\n    \"\"\"\n    astroquery.vizier.Vizier.ROW_LIMIT = -1\n    # https://cdsarc.cds.unistra.fr/vizier/notebook.gml?source=V/123A\n    # https://cdsarc.cds.unistra.fr/ftp/V/123A/ReadMe\n    CATALOGUE = \"V/123A\"\n    voresource = pyvo.registry.search(ivoid=f\"ivo://CDS.VizieR/{CATALOGUE}\")[0]\n    tap_service = voresource.get_service(\"tap\")\n\n    # Query Vizier and load targets to a dataframe.\n    cv_columns = [\"uid\", \"GCVS\", \"RAJ2000\", \"DEJ2000\"]\n    cvs_records = tap_service.run_sync(\n        f'SELECT {\",\".join(cv_columns)} from \"{CATALOGUE}/cv\"'\n    )\n    cvs_df = cvs_records.to_table().to_pandas()\n\n    # Add a new column containing a list of all order k HEALPix pixels that overlap with\n    # the CV's position plus search radius.\n    cvs_df[\"healpix_k5\"] = [\n        hpgeom.query_circle(\n            a=cv.RAJ2000,\n            b=cv.DEJ2000,\n            radius=radius.to_value(\"deg\"),\n            nside=hpgeom.order_to_nside(order=5),\n            nest=True,\n            inclusive=True,\n        )\n        for cv in cvs_df.itertuples()\n    ]\n    # Explode the lists of pixels so the dataframe has one row per target per pixel.\n    # Targets near a pixel boundary will now have more than one row.\n    # Later, we'll search each pixel separately for NEOWISE detections and then\n    # concatenate the matches for each target to produce complete light curves.\n    cvs_df = cvs_df.explode(\"healpix_k5\", ignore_index=True)\n\n    return cvs_df","key":"lcQxXLbEmk"},{"type":"output","id":"Wm4VVs5QjGmxdDmleT-Xo","data":[],"key":"OCh8VcqLzP"}],"key":"IHWdVLfmuh"},{"type":"block","children":[],"key":"VO6Za6atxf"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# This is the main function.\ndef load_lightcurves_one_partition(targets_group):\n    \"\"\"Load lightcurves from a single partition.\n\n    Parameters\n    ----------\n    targets_group : tuple\n        Tuple of pixel index and sub-DataFrame (result of DataFrame groupby operation).\n\n    Returns\n    -------\n    pd.DataFrame\n        The lightcurves for targets found in this partition.\n    \"\"\"\n    # These global variables will be set when the worker is initialized.\n    global _neowise_ds\n    global _columns\n    global _radius\n\n    # Get row filters that will limit the amount of data loaded from this partition.\n    # It is important for these filters to be efficient for the specific use case.\n    filters = _construct_dataset_filters(targets_group=targets_group, radius=_radius)\n\n    # Load this slice of the dataset to a pyarrow Table.\n    pixel_tbl = _neowise_ds.to_table(columns=_columns, filter=filters)\n\n    # Associate NEOWISE detections with targets to get the light curves.\n    lightcurves_df = _cone_search(\n        targets_group=targets_group, pixel_tbl=pixel_tbl, radius=_radius\n    )\n\n    return lightcurves_df","key":"g1fDow0Vco"},{"type":"output","id":"ZiM4ukkSy7e0ox792OZi5","data":[],"key":"JHBSdSGoCi"}],"key":"TkcWv6WlxY"},{"type":"block","children":[],"key":"MrQSlg8Iqk"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# The filters returned by this function need to be efficient for the specific use case.\ndef _construct_dataset_filters(*, targets_group, radius, scale_factor=100):\n    \"\"\"Construct dataset filters for a box search around all targets in the partition.\n\n    Parameters\n    ----------\n    targets_group : tuple\n        Tuple of pixel index and sub-DataFrame (result of DataFrame groupby operation).\n    radius : astropy.Quantity\n        The radius used for constructing the RA and Dec filters.\n    scale_factor : int (optional)\n        Factor by which the radius will be multiplied to ensure that the box encloses\n        all relevant detections.\n\n    Returns\n    -------\n    filters : pyarrow.compute.Expression\n        The constructed filters based on the given inputs.\n    \"\"\"\n    pixel, locations_df = targets_group\n\n    # Start with a filter for the partition. This is the most important one because\n    # it tells the Parquet reader to just skip all the other partitions.\n    filters = pyarrow.compute.field(\"healpix_k5\") == pixel\n\n    # Add box search filters. For our CV sample, one box encompassing all targets in\n    # the partition should be sufficient. Make a different choice if you use a different\n    # sample and find that this loads more data than you want to handle at once.\n    buffer_dist = scale_factor * radius.to_value(\"deg\")\n    for coord, target_coord in zip([\"ra\", \"dec\"], [\"RAJ2000\", \"DEJ2000\"]):\n        coord_fld = pyarrow.compute.field(coord)\n\n        # Add a filter for coordinate lower limit.\n        coord_min = locations_df[target_coord].min()\n        filters = filters & (coord_fld > coord_min - buffer_dist)\n\n        # Add a filter for coordinate upper limit.\n        coord_max = locations_df[target_coord].max()\n        filters = filters & (coord_fld < coord_max + buffer_dist)\n\n    # Add your own additional requirements here, like magnitude limits or quality cuts.\n    # See the AllWISE notebook for more filter examples and links to pyarrow documentation.\n    # We'll add a filter for sources not affected by contamination or confusion.\n    filters = filters & pyarrow.compute.equal(pyarrow.compute.field(\"cc_flags\"), \"0000\")\n\n    return filters","key":"Qy098k0zoX"},{"type":"output","id":"s6Ncep-Zs67LEcYSAK3Eu","data":[],"key":"iUH4zS20mM"}],"key":"iffK4bb8SF"},{"type":"block","children":[],"key":"E8cDPD3hbI"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def _cone_search(*, targets_group, pixel_tbl, radius):\n    \"\"\"Perform a cone search to select NEOWISE detections belonging to each target object.\n\n    Parameters\n    ----------\n    targets_group : tuple\n        Tuple of pixel index and sub-DataFrame (result of DataFrame groupby operation).\n    pixel_tbl : pyarrow.Table\n        Table of NEOWISE data for a single pixel\n    radius : astropy.Quantity\n        Cone search radius.\n\n    Returns\n    -------\n    match_df : pd.DataFrame\n        A dataframe with all matched sources.\n    \"\"\"\n    _, targets_df = targets_group\n\n    # Cone search using astropy to select NEOWISE detections belonging to each object.\n    pixel_skycoords = SkyCoord(ra=pixel_tbl[\"ra\"] * u.deg, dec=pixel_tbl[\"dec\"] * u.deg)\n    targets_skycoords = SkyCoord(targets_df[\"RAJ2000\"], targets_df[\"DEJ2000\"], unit=u.deg)\n    targets_ilocs, pixel_ilocs, _, _ = pixel_skycoords.search_around_sky(\n        targets_skycoords, radius\n    )\n\n    # Create a dataframe with all matched source detections.\n    match_df = pixel_tbl.take(pixel_ilocs).to_pandas()\n\n    # Add the target IDs by joining with targets_df.\n    match_df[\"targets_ilocs\"] = targets_ilocs\n    match_df = match_df.set_index(\"targets_ilocs\").join(targets_df.reset_index().uid)\n\n    return match_df","key":"osAkzZBDFh"},{"type":"output","id":"2VXGlcmcro-6OrAg6JuJf","data":[],"key":"jnU2DmFI4t"}],"key":"RHbrldP580"},{"type":"block","children":[],"key":"uixmKg8XrY"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# This function will be called once for each worker in the pool.\ndef init_worker(neowise_ds, columns, radius):\n    \"\"\"Set global variables '_neowise_ds', '_columns', and '_radius'.\n\n    These variables will be the same for every call to 'load_lightcurves_one_partition'\n    and will be set once for each worker. It is important to pass 'neowise_ds' this\n    way because of its size and the way it will be used. (For the other two, it makes\n    little difference whether we use this method or pass them directly as function\n    arguments to 'load_lightcurves_one_partition'.)\n\n    Parameters\n    ----------\n    neowise_ds : pyarrow.dataset.Dataset\n        NEOWISE metadata loaded as a PyArrow dataset.\n    columns : list\n        Columns to include in the output DataFrame of light curves.\n    radius : astropy.Quantity\n        Cone search radius.\n    \"\"\"\n    global _neowise_ds\n    _neowise_ds = neowise_ds\n    global _columns\n    _columns = columns\n    global _radius\n    _radius = radius","key":"GS8XmcIKEZ"},{"type":"output","id":"Ywde5Mj5SyBkyKlnK7MGr","data":[],"key":"UkgQhTDDUz"}],"key":"WinigSBaKL"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":380,"column":1},"end":{"line":380,"column":1}},"children":[{"type":"text","value":"5. Load light curves","position":{"start":{"line":380,"column":1},"end":{"line":380,"column":1}},"key":"jq4YGAPb2f"}],"identifier":"id-5-load-light-curves","label":"5. Load light curves","html_id":"id-5-load-light-curves","implicit":true,"key":"DfE2fR1syY"}],"key":"rCPDMex3td"},{"type":"block","position":{"start":{"line":382,"column":1},"end":{"line":382,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":384,"column":1},"end":{"line":384,"column":1}},"children":[{"type":"text","value":"Load the target objects’ coordinates and other info.","position":{"start":{"line":384,"column":1},"end":{"line":384,"column":1}},"key":"I2i3zvYqO4"}],"key":"egEEAT7MtP"}],"key":"kB182jHqh4"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"targets_df = load_targets_Downes2001(radius=MATCH_RADIUS)\ntargets_df.head()","key":"YlmAc0pfnV"},{"type":"output","id":"brtaJTqhIhoxof9WAaX3r","data":[],"key":"RObV2sNXcC"}],"key":"tuq8lPczvf"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":391,"column":1},"end":{"line":395,"column":1}},"children":[{"type":"text","value":"Search the NEOWISE Source Table for all targets (positional matches) and load the light curves.\nPartitions are searched in parallel.\nFor targets located near partition boundaries, relevant partitions will be searched\nindependently for the given target and the results will be concatenated.\nIf searching all NEOWISE years, this may take 45 minutes or more.","position":{"start":{"line":391,"column":1},"end":{"line":391,"column":1}},"key":"vmgclzEzgo"}],"key":"XHbKZYyMaS"}],"key":"IvBTs5ANz6"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Group targets by partition. 'load_lightcurves_one_partition' will be called once per group.\ntargets_groups = targets_df.groupby(\"healpix_k5\")\n# Arguments for 'init_worker'.\ninit_args = (neowise_ds, COLUMN_SUBSET, MATCH_RADIUS)\n\n# Start a multiprocessing pool and load the target light curves in parallel.\n# About 1900 unique pixels in targets_df, 8 workers, 48 chunksize => ~5 chunks per worker.\nnworkers = 8\nchunksize = 48\nwith multiprocessing.Pool(nworkers, initializer=init_worker, initargs=init_args) as pool:\n    lightcurves = []\n    for lightcurves_df in pool.imap_unordered(\n        load_lightcurves_one_partition, targets_groups, chunksize=chunksize\n    ):\n        lightcurves.append(lightcurves_df)\nneowise_lightcurves_df = pd.concat(lightcurves).sort_values(\"mjd\").reset_index(drop=True)","key":"ArKXM6nUPG"},{"type":"output","id":"WDkp8i-Vsx2xSIQea9ZK4","data":[],"key":"LiRscKtmO0"}],"key":"R2y4Tni1Cd"},{"type":"block","children":[],"key":"NMl2f8mkHc"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"neowise_lightcurves_df.head()","key":"w5slT2tvig"},{"type":"output","id":"XHbbz_GOWVZsQrWZWZ7nz","data":[],"key":"Vtpv8gaFWy"}],"key":"nFxMeewrW2"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":420,"column":1},"end":{"line":420,"column":1}},"children":[{"type":"text","value":"6. Plot NEOWISE light curves","position":{"start":{"line":420,"column":1},"end":{"line":420,"column":1}},"key":"Gyrd1juahE"}],"identifier":"id-6-plot-neowise-light-curves","label":"6. Plot NEOWISE light curves","html_id":"id-6-plot-neowise-light-curves","implicit":true,"key":"UcAffCCIFJ"},{"type":"paragraph","position":{"start":{"line":422,"column":1},"end":{"line":423,"column":1}},"children":[{"type":"text","value":"The light curves will have large gaps due to the observing cadence, so we’ll plot each\n“epoch” separately to see them better.","position":{"start":{"line":422,"column":1},"end":{"line":422,"column":1}},"key":"rvCapor65l"}],"key":"em7ABuyD7D"}],"key":"osnK9INv32"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# get the light curves of the target with the most data\ntarget_uid = neowise_lightcurves_df.groupby(\"uid\").mjd.count().sort_values().index[-1]\ntarget_df = neowise_lightcurves_df.loc[neowise_lightcurves_df.uid == target_uid]\n\n# list of indexes that separate epochs (arbitrarily at delta mjd > 30)\nepoch_idxs = target_df.loc[target_df.mjd.diff() > 30].index.to_list()\nepoch_idxs = epoch_idxs + [target_df.index[-1]]  # add the final index\n\n# make the figure\nncols = 4\nnrows = int(np.ceil(len(epoch_idxs) / ncols))\nfig, axs = plt.subplots(nrows, ncols, sharey=True, figsize=(3 * ncols, 2.5 * nrows))\naxs = axs.flatten()\nidx0 = target_df.index[0]\nfor i, (idx1, ax) in enumerate(zip(epoch_idxs, axs)):\n    epoch_df = target_df.loc[idx0 : idx1 - 1, LIGHTCURVE_COLUMNS].set_index(\"mjd\")\n    for col in FLUX_COLUMNS:\n        ax.plot(epoch_df[col], \".\", markersize=3, label=col)\n    ax.set_title(f\"epoch {i}\")\n    ax.xaxis.set_ticks(  # space by 10\n        range(int((ax.get_xlim()[0] + 10) / 10) * 10, int(ax.get_xlim()[1]), 10)\n    )\n    idx0 = idx1\naxs[0].legend()\nfig.supxlabel(\"MJD\")\nfig.supylabel(\"RAW FLUX\")\nfig.suptitle(f\"NEOWISE light curves for target CV {target_uid}\")\nfig.tight_layout()\nplt.show(block=False)","key":"fBL5Y3qbRo"},{"type":"output","id":"zLlPwMgdzXXb8X5eUQM5I","data":[],"key":"I1Y2vsF5yZ"}],"key":"xkt6pGfUS2"},{"type":"block","children":[{"type":"thematicBreak","position":{"start":{"line":457,"column":1},"end":{"line":457,"column":1}},"key":"PQnzHTqjGF"},{"type":"paragraph","position":{"start":{"line":459,"column":1},"end":{"line":459,"column":1}},"children":[{"type":"text","value":"[*] Note to Mac and Windows users:","position":{"start":{"line":459,"column":1},"end":{"line":459,"column":1}},"key":"fFmywtQhpQ"}],"key":"p1NY30ImYl"},{"type":"paragraph","position":{"start":{"line":461,"column":1},"end":{"line":463,"column":1}},"children":[{"type":"text","value":"You will need to copy the functions and imports from this notebook into a separate ‘.py’ file and then import them in order to use the multiprocessing pool for parallelization.\nIn addition, you may need to load ","position":{"start":{"line":461,"column":1},"end":{"line":461,"column":1}},"key":"NoLBlyPUTx"},{"type":"inlineCode","value":"neowise_ds","position":{"start":{"line":461,"column":1},"end":{"line":461,"column":1}},"key":"fRt6HFwjQk"},{"type":"text","value":" separately for each child process (i.e., worker) by adding that code to the ","position":{"start":{"line":461,"column":1},"end":{"line":461,"column":1}},"key":"r0wYGHd5St"},{"type":"inlineCode","value":"init_worker","position":{"start":{"line":461,"column":1},"end":{"line":461,"column":1}},"key":"JYx7URibLE"},{"type":"text","value":" function instead of passing it in as an argument.\nThis has to do with differences in what does / does not get copied into the child processes on different platforms.","position":{"start":{"line":461,"column":1},"end":{"line":461,"column":1}},"key":"XvquxjYo4Z"}],"key":"Ozblx98Gcj"},{"type":"thematicBreak","position":{"start":{"line":465,"column":1},"end":{"line":465,"column":1}},"key":"gRe2l7JL0O"},{"type":"heading","depth":2,"position":{"start":{"line":467,"column":1},"end":{"line":467,"column":1}},"children":[{"type":"text","value":"About this notebook","position":{"start":{"line":467,"column":1},"end":{"line":467,"column":1}},"key":"yM5SpA96KG"}],"identifier":"about-this-notebook","label":"About this notebook","html_id":"about-this-notebook","implicit":true,"key":"JxcZriJOUF"},{"type":"paragraph","position":{"start":{"line":469,"column":1},"end":{"line":469,"column":1}},"children":[{"type":"strong","position":{"start":{"line":469,"column":1},"end":{"line":469,"column":1}},"children":[{"type":"text","value":"Author:","position":{"start":{"line":469,"column":1},"end":{"line":469,"column":1}},"key":"jjRCsquNtD"}],"key":"qIiOojA7XI"},{"type":"text","value":" Troy Raen (IRSA Developer) and the IPAC Science Platform team","position":{"start":{"line":469,"column":1},"end":{"line":469,"column":1}},"key":"C8PsmWm89G"}],"key":"xH4nL1800h"},{"type":"paragraph","position":{"start":{"line":471,"column":1},"end":{"line":471,"column":1}},"children":[{"type":"strong","position":{"start":{"line":471,"column":1},"end":{"line":471,"column":1}},"children":[{"type":"text","value":"Updated:","position":{"start":{"line":471,"column":1},"end":{"line":471,"column":1}},"key":"ZpON9qFRNX"}],"key":"nbKOTqLdHy"},{"type":"text","value":" 2025-03-07","position":{"start":{"line":471,"column":1},"end":{"line":471,"column":1}},"key":"GR5IlUoNRn"}],"key":"AIxnzEZ6VY"},{"type":"paragraph","position":{"start":{"line":473,"column":1},"end":{"line":473,"column":1}},"children":[{"type":"strong","position":{"start":{"line":473,"column":1},"end":{"line":473,"column":1}},"children":[{"type":"text","value":"Contact:","position":{"start":{"line":473,"column":1},"end":{"line":473,"column":1}},"key":"BlsHYVXdoG"}],"key":"Z4RglEDQ0G"},{"type":"text","value":" ","position":{"start":{"line":473,"column":1},"end":{"line":473,"column":1}},"key":"eFwg1gyPlN"},{"type":"link","url":"https://irsa.ipac.caltech.edu/docs/help_desk.html","position":{"start":{"line":473,"column":1},"end":{"line":473,"column":1}},"children":[{"type":"text","value":"the IRSA Helpdesk","position":{"start":{"line":473,"column":1},"end":{"line":473,"column":1}},"key":"l1mfSPX6tr"}],"urlSource":"https://irsa.ipac.caltech.edu/docs/help_desk.html","key":"QFOIjGMgMe"},{"type":"text","value":" with questions or reporting problems.","position":{"start":{"line":473,"column":1},"end":{"line":473,"column":1}},"key":"lhOvcaAJNh"}],"key":"mLsb1D1dXO"}],"key":"M7LNvYb6ug"}],"key":"H87XDTkZ37"},"references":{"cite":{"order":["Downes_2001"],"data":{"Downes_2001":{"label":"Downes_2001","enumerator":"1","doi":"10.1086/320802","html":"Downes, R. A., Webbink, R. F., Shara, M. M., Ritter, H., Kolb, U., & Duerbeck, H. W. (2001). A Catalog and Atlas of Cataclysmic Variables: The Living Edition. <i>Publications of the Astronomical Society of the Pacific</i>, <i>113</i>(784), 764–768. <a target=\"_blank\" rel=\"noreferrer\" href=\"https://doi.org/10.1086/320802\">10.1086/320802</a>","url":"https://doi.org/10.1086/320802"}}}},"footer":{"navigation":{"prev":{"title":"Strategies to Efficiently Work with NEOWISE Single-exposure Source Table in Parquet","url":"/neowise-source-table-strategies","group":"NEOWISE"},"next":{"title":"Searching for Spitzer Enhanced Imaging Products","url":"/siav2-seip","group":"Spitzer"}}},"domain":"http://localhost:3000"}